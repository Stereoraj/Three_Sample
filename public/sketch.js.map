{"version":3,"sources":["../../../../../usr/local/lib/node_modules/canvas-sketch-cli/node_modules/browser-pack/_prelude.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/object-assign/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/right-now/browser.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-promise/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-dom/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/util.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/repeat-string/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/keys.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/is_arguments.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/dateformat/lib/dateformat.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/pad-left/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/save.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/accessibility.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/paper-sizes.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/defined/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/convert-length/convert-length.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/distances.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/resizeCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/get-canvas-context/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/createCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/SketchManager.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/keyboardShortcuts.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/canvas-sketch.js","node_modules/three/build/three.js","node_modules/three/examples/js/controls/OrbitControls.js","sketch.js","canvas-sketch-cli/injected/storage-key.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","objectAssign","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","map","join","test3","split","forEach","letter","keys","err","shouldUseNative","target","source","from","symbols","to","val","TypeError","toObject","s","arguments","key","browser","commonjsGlobal","performance","now","Date","isPromise_1","obj","then","isDom","window","Node","nodeType","nodeName","getClientAPI","defined","arguments$1","isBrowser","document","cache","shim","push","supportsArgumentsClass","toString","supported","object","unsupported","pSlice","Array","slice","deepEqual","actual","expected","opts","getTime","strict","b","isUndefinedOrNull","is_arguments","isBuffer","ka","kb","sort","objEquiv","value","x","copy","global","token","timezone","timezoneClip","dateFormat","date","mask","utc","gmt","undefined","isArray","toLowerCase","test","isNaN","maskSlice","masks","_","d","D","m","y","H","M","L","getTimezoneOffset","W","targetThursday","getFullYear","getMonth","getDate","setDate","getDay","firstThursday","ds","setHours","getHours","Math","floor","getWeek","N","dow","getDayOfWeek","flags","dd","pad","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","round","timeNames","tt","T","TT","Z","match","pop","replace","abs","S","len","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","expiresHeaderFormat","res","repeatString","str","num","max","substr","link","padLeft","ch","noop","defaultExts","extension","prefix","suffix","supportedEncodings","stream","isStart","Promise","resolve","reject","filename","resolveFilename","frame","func","client","output","ev","saveDataURL","dataURL","splitIndex","indexOf","base64","byteString","atob","type","mimeMatch","exec","mime","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","createBlobFromDataURL","blob","saveBlob","createElement","style","visibility","download","href","URL","createObjectURL","body","appendChild","onclick","setTimeout","revokeObjectURL","parentElement","removeChild","removeAttribute","click","opt","file","totalFrames","layerStr","isFinite","totalLayers","layer","filter","Boolean","name","timeStamp","hash","commonTypos","dimension","animated","animating","unit","P5","pixellated","looping","pixelPerInch","allKeys","checkSettings","settings","console","warn","includes","paperSizes","reduce","dict","preset","item","units","dimensions","defined$1","conversions","system","factor","cm","pt","pc","in","ft","anchors","metric","ratio","imperial","convertLength","fromUnit","toUnit","pixelsPerInch","precision","roundPixel","toFactor","fromFactor","isToPixel","fromUnitData","toUnitData","anchor","result","decimals","Number","convertDistance$1","unitsFrom","unitsTo","resizeCanvas","props","width","height","styleWidth","styleHeight","canvasWidth","canvasHeight","hasDimensions","checkIfHasDimensions","exporting","scaleToFit","scaleToView","pixelRatio","exportPixelRatio","bleed","devicePixelRatio","basePixelRatio","maxPixelRatio","min","trimWidth","trimHeight","ref","element","parent","innerWidth","innerHeight","getBoundingClientRect","getParentSize","parentWidth","parentHeight","getDimensionsFromPreset","highest","lowest","orientation","landscape","realWidth","realHeight","aspect","windowAspect","scaleToFitPadding","maxWidth","maxHeight","getCanvasContext_1","canvas","gl","attribs","names","getContext","createCanvas","context","ownsCanvas","newCanvas","createCanvasElement","attributes","pixelated","imageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","SketchManager","_settings","_props","_sketch","_raf","_recordTimeout","_lastRedrawResult","_isP5Resizing","_keyboardShortcuts","handler","enabled","keyCode","altKey","metaKey","ctrlKey","togglePlay","preventDefault","commit","save","addEventListener","removeEventListener","keyboardShortcuts","this$1","hotkeys","shiftKey","recording","endRecord","run","record","exportFrame","playing","pause","play","_animateHandler","animate","_resizeHandler","resize","render","sketch","get","this","_computePlayhead","currentTime","duration","_computeFrame","playhead","time","fps","_computeCurrentFrame","_getSizeProps","viewportWidth","viewportHeight","dispose","started","_signalBegin","tick","_cancelTimeouts","cancelAnimationFrame","_lastTime","requestAnimationFrame","error","stop","deltaTime","exportOpts","_createExportOptions","frameInterval","log","_signalEnd","beginRecord","_wrapContextScale","catch","response","begin","end","wasRecording","sequence","encoding","encodingQuality","dateformat","all","preExport","commitOpts","_doExportFrame","drawResult","concat","hasDataObject","data","toDataURL","exportCanvas","layerList","curOpt","saveParam","k","savePromise","parts","saveFile","saveResult","savedEvents","eventWithOutput","find","outputName","isClient","some","isStreaming","ofSeq","postExport","cb","_preRender","_postRender","p5","scale","scaleX","scaleY","scaleContext","restore","flush","redraw","submitDrawCall","update","notYetSupported","oldCanvas","oldContext","timeOpts","timeProps","getTimeProps","_setupGLKey","_appendCanvasIfNeeded","draw","oldSizes","newProps","pixelDensity","styleCanvas","newSizes","changed","deepEqual_1","_sizeChanged","frameIntervalMS","deltaTimeMS","hasDuration","isNewFrame","playbackRate","newTime","timeScale","isFinished","isLoopStart","loop","lastFrame","dispatch","mount","unmount","detach","ctx","clear","clearColor","bufferData","hasTotalFrames","totalFramesFromDuration","durationFromTotalFrames","Infinity","startTime","startFrame","hasStartTime","hasStartFrame","setup","loadAndRun","canvasSketch","newSettings","load","unload","destroy","createSketch","preload","P5Constructor","p5Sketch","isGL","renderer","WEBGL","P2D","noLoop","setAttributes","_renderer","drawingContext","loader","attach","message","CACHE","runtimeCollisions","hotID","isHot","hot","id","isInjecting","previousData","cacheGet","next","oldManager","manager","PaperSizes","factory","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","NormalAnimationBlendMode","AdditiveAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","EventDispatcher","listener","_listeners","listeners","hasEventListener","listenerArray","index","splice","dispatchEvent","event","array","_lut","_seed","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","toUpperCase","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","inverseLerp","lerp","damp","lambda","dt","exp","pingpong","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","seededRandom","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","Vector2","[object Object]","scalar","constructor","v","w","addVectors","subVectors","multiplyScalar","elements","minVal","maxVal","divideScalar","sqrt","atan2","distanceToSquared","dx","dy","normalize","alpha","v1","v2","offset","attribute","getX","getY","center","angle","isVector2","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","me","xAxis","yAxis","zAxis","setFromMatrix3Column","multiplyMatrices","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","g","t11","t12","t13","det","detInv","tmp","matrix4","setFromMatrix4","invert","transpose","tx","ty","sx","sy","rotation","cx","cy","theta","matrix","fromArray","_canvas","isMatrix3","ImageUtils","getDataURL","image","src","HTMLCanvasElement","createElementNS","ImageData","putImageData","drawImage","textureId","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","super","defineProperty","uuid","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","setUvTransform","meta","isRootObject","textures","metadata","generator","wrap","images","url","serializeImage","isDataTexture","uv","applyMatrix3","needsUpdate","HTMLImageElement","ImageBitmap","isTexture","Vector4","z","acos","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","zz","xy","xz","yz","getZ","getW","isVector4","WebGLRenderTarget","options","depth","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","clone","isWebGLRenderTarget","WebGLMultisampleRenderTarget","samples","isWebGLMultisampleRenderTarget","Quaternion","_x","_y","_z","_w","qa","qb","qm","slerpQuaternions","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","EPSILON","tDir","_onChangeCallback","quaternion","euler","isEuler","_order","c1","c3","s1","s3","axis","halfAngle","trace","vFrom","vTo","dot","step","angleTo","slerp","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","callback","isQuaternion","Vector3","multiplyVectors","applyQuaternion","_quaternion$4","setFromEuler","setFromAxisAngle","qx","qy","qz","qw","ix","iy","iz","iw","camera","applyMatrix4","matrixWorldInverse","projectionMatrix","projectionMatrixInverse","matrixWorld","crossVectors","ax","ay","az","bx","by","bz","denominator","lengthSq","planeNormal","_vector$c","projectOnVector","sub","normal","dz","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindricalCoords","setFromMatrixColumn","sz","isVector3","Box3","minX","minY","minZ","maxX","maxY","maxZ","count","points","makeEmpty","il","expandByPoint","size","halfSize","_vector$b","add","expandByObject","box","isEmpty","point","vector","addScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","_box$3","union","children","sphere","clampPoint","plane","constant","triangle","getCenter","_center","_extents","_v0$2","_v1$7","_v2$3","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","getSize","_points","setFromPoints","equals","isBox3","_testAxis","v0","extents","j","p0","p1","p2","_box$2","_v1$6","_toFarthestPoint","_toPoint","Sphere","optionalCenter","maxRadiusSq","distanceTo","radiusSum","intersectsSphere","distanceToPoint","deltaLengthSq","expandByScalar","getMaxScaleOnAxis","missingRadiusHalf","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","Ray","origin","direction","ray","at","directionDistance","distanceSqToPoint","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","tca","radius2","thc","t0","t1","distanceToPlane","distToPoint","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectBox","backfaceCulling","sign","DdN","DdQxE2","DdE1xQ","cross","QdN","transformDirection","Matrix4","n14","n24","n34","n41","n42","n43","n44","_v1$5","scaleZ","af","bf","ce","cf","de","df","ac","ad","bc","bd","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","t14","position","x2","y2","z2","wx","wy","wz","determinant","_m1$2","invSX","invSY","invSZ","setFromRotationMatrix","left","right","top","bottom","near","far","isMatrix4","_matrix$1","_quaternion$3","Euler","DefaultOrder","asin","makeRotationFromQuaternion","newOrder","setFromQuaternion","optionalResult","RotationOrders","Layers","channel","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","_onChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","create","isObject3D","onBeforeRender","onAfterRender","updateMatrix","premultiply","decompose","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","multiply","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","lookAt","setFromMatrixPosition","isCamera","isLight","extractRotation","remove","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","toJSON","geometries","materials","shapes","skeletons","serialize","library","JSON","stringify","toArray","isInstancedMesh","instanceMatrix","instanceColor","isMesh","isLine","isPoints","parameters","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","extractFromCache","values","recursive","parse","_vector1","_vector2$1","_normalMatrix","Plane","setFromNormalAndCoplanarPoint","inverseNormalLength","negate","line","delta","start","startSign","endSign","intersectsPlane","optionalNormalMatrix","getNormalMatrix","referencePoint","coplanarPoint","isPlane","_v0$1","_v1$3","_v2$2","_v3$1","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","targetLengthSq","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getBarycoord","p3","uv1","uv2","uv3","addScaledVector","i0","i1","i2","getNormal","setFromCoplanarPoints","getUV","containsPoint","isFrontFacing","intersectsTriangle","d4","vc","d5","d6","vb","va","materialId","Material","fog","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","alphaToCoverage","premultipliedAlpha","toneMapped","isMaterial","onBeforeCompile","customProgramCacheKey","setValues","newValue","flatShading","currentValue","isColor","isRoot","color","getHex","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","envMap","reflectivity","refractionRatio","combine","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","morphTargets","morphNormals","skinning","srcPlanes","dstPlanes","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","setHex","setStyle","hex","handleAlpha","string","parseFloat","components","parseInt","setHSL","charAt","setColorName","gammaFactor","safeInverse","copyGammaToLinear","copyLinearToGamma","copySRGBToLinear","copyLinearToSRGB","hue","saturation","lightness","getHSL","color1","color2","normalized","NAMES","MeshBasicMaterial","isMeshBasicMaterial","_vector$9","_vector2","BufferAttribute","itemSize","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float16BufferAttribute","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","fromBufferAttribute","setXY","setXYZ","applyNormalMatrix","setX","setY","setZ","setW","setXYZW","onUpload","isFloat16BufferAttribute","TYPED_ARRAYS","getTypedArray","buffer","_id","_m1","_obj","_offset","_box$1","_boxMorphTargets","_vector$8","BufferGeometry","morphAttributes","morphTargetsRelative","groups","boundingSphere","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","tangent","computeBoundingSphere","makeRotationX","makeRotationY","makeRotationZ","translate","makeTranslation","makeScale","morphAttributesPosition","isGLBufferAttribute","setFromBufferAttribute","morphAttribute","jl","computeFaceNormals","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","handleTriangle","group","tmp2","n2","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","hasMorphAttributes","attributeArray","_inverseMatrix$2","_ray$2","_sphere$3","_vA$1","_vB$1","_vC$1","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA$1","_uvB$1","_uvC$1","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkBufferGeometryIntersection","raycaster","morphPosition","morphInfluences","morphTargetInfluences","influence","boneTransform","intersection","intersect","intersectTriangle","checkIntersection","face","morphTargetDictionary","ml","intersects","intersectsBox","groupMaterial","faceIndex","isGeometry","BoxGeometry","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","Camera","PerspectiveCamera","fov","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","makePerspective","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","scene","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","CubeTexture","_needsFlipEnvMap","isCubeTexture","WebGLCubeRenderTarget","dummy","isInteger","shader","tEquirect","mesh","currentMinFilter","stencil","DataTexture","_sphere$2","_vector$7","Frustum","p4","planes","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","sprite","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","FLOAT","HALF_FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmissionmap_fragment","transmissionmap_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","cubemaps","state","objects","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","isScene","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","copyPosition","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","getParameter","MAX_VERTEX_ATTRIBS","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","reset","resetDefaultState","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","saveCache","ELEMENT_ARRAY_BUFFER","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","ARRAY_BUFFER","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","has","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","onTextureDispose","cubemap","fromEquirectangularTexture","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","TRIANGLES","LINES","LINE_STRIP","LINE_LOOP","POINTS","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","MAX_SAFE_INTEGER","morphInfluencesSum","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","physical","transmission","transmissionMap","DataTexture2DArray","wrapR","isDataTexture2DArray","DataTexture3D","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueV1i","uniform1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV2ui","uniform2uiv","setValueV3ui","uniform3uiv","setValueV4ui","uniform4uiv","setValueT1","safeSetTexture2D","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueT2DArray1","setTexture2DArray","setValueV1fArray","uniform1fv","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","uniform1uiv","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","subscript","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","trim","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getTexelEncodingFunction","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","generateExtensions","customDefines","chunks","generateDefines","createProgram","prefixVertex","prefixFragment","versionString","isRawShaderMaterial","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexAlphas","vertexUvs","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","vertexErrors","fragmentErrors","getError","VALIDATE_STATUS","diagnostics","cachedUniforms","deleteShader","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","fetchAttributeLocations","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","isMeshStandardMaterial","environment","bones","nVertexMatrices","getMaxBones","isFogExp2","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","finish","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","renderCallDepth","list","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","ShadowUniformsCache","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","identity","WebGLRenderState","lightsArray","shadowsArray","setupLights","setupLightsView","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_objects","_capabilities","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","_maxTextureSize","0","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","intersectsObject","kl","depthMaterial","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","enable","DEPTH_TEST","disable","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","xrFramebuffer","currentBoundFramebuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","MIN_EXT","MAX_EXT","factorToGL","ZERO","ONE","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","BLEND","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","setPolygonOffset","POLYGON_OFFSET_FILL","activeTexture","webglSlot","TEXTURE0","bindFramebuffer","framebuffer","bindXRFramebuffer","FRAMEBUFFER","useProgram","setMaterial","frontFaceCW","SAMPLE_ALPHA_TO_COVERAGE","setLineWidth","lineWidth","SCISSOR_TEST","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","KEEP","DRAW_FRAMEBUFFER","READ_FRAMEBUFFER","WebGLTextures","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","log2","getInternalFormat","internalFormatName","glFormat","glType","RED","R32F","R16F","R8","RGB","RGB32F","RGB16F","RGB8","RGBA32F","RGBA16F","RGBA8","filterFallback","LINEAR","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","setTextureCube","initTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","mipmapImage","uploadCubeTexture","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_WRAP_R","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","DEPTH_STENCIL","setupFrameBufferTexture","attachment","textureTarget","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isRenderTarget3D","createFramebuffer","COLOR_ATTACHMENT0","glTextureType","updateRenderTargetMipmap","updateMultisampleRenderTarget","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","WebGLUtils","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","LUMINANCE","LUMINANCE_ALPHA","RED_INTEGER","RG","RG_INTEGER","RGB_INTEGER","RGBA_INTEGER","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","cameras","isArrayCamera","Group","WebXRController","_targetRay","_grip","_hand","WebXRManager","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","onSessionEnd","disconnect","animation","isPresenting","onInputSourcesChange","inputSources","removed","added","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","async","getContextAttributes","xrCompatible","makeXRCompatible","baseLayer","XRWebGLLayer","antialias","updateRenderState","requestReferenceSpace","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","transform","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","WebGLRenderer","display","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","domElement","sortObjects","toneMappingExposure","_this","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","initGLContext","infoAutoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","onMaterialDispose","releaseMaterialProgramReferences","deallocateMaterial","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","setSize","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","onXRSessionStart","onXRSessionEnd","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","DYNAMIC_DRAW","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","getProgram","renderObjects","camera2","isImmediateRenderObject","renderObjectImmediate","lightsStateVersion","programCacheKey","updateCommonMaterialProperties","needsLights","materialNeedsLights","progUniforms","uniformsList","needsProgramChange","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","setFromProjectionMatrix","projectObject","isGroup","isLOD","intersectsSprite","opaqueObjects","transparentObjects","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","halfFloatSupportedByExt","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","UNPACK_ROW_LENGTH","unpackImageHeight","UNPACK_IMAGE_HEIGHT","unpackSkipPixels","UNPACK_SKIP_PIXELS","unpackSkipRows","UNPACK_SKIP_ROWS","unpackSkipImages","UNPACK_SKIP_IMAGES","texSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","joints","inputState","pinching","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","getPose","targetRaySpace","inputjoint","jointPose","getJointPose","jointName","joint","jointRadius","distanceToPinch","threshold","handedness","gripSpace","WebGL1Renderer","FogExp2","Fog","Scene","InterleavedBuffer","isInterleavedBuffer","arrayBuffers","_uuid","ib","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","setFromMatrixScale","transformVertex","vertexPosition","mvPosition","_v1$2","_v2$1","LOD","_currentLevel","levels","addLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$5","_matrix","SkinnedMesh","bindMatrixInverse","Bone","bind","calculateInverses","normalizeSkinWeights","skinWeight","manhattanLength","skinIndex","weight","getComponent","boneIndex","boneInverses","isBone","_offsetMatrix","_identityMatrix","Skeleton","inverse","bone","json","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","linecap","linejoin","_start$1","_end$1","_inverseMatrix$1","_ray$1","_sphere$1","Line","computeLineDistances","lineDistances","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distanceSqToSegment","_start","_end","LineSegments","LineLoop","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","intersectPoint","closestPointToPoint","distanceToRay","VideoTexture","video","requestVideoFrameCallback","updateVideo","readyState","HAVE_CURRENT_DATA","CompressedTexture","CanvasTexture","isCanvasTexture","DepthTexture","CircleGeometry","segments","thetaStart","thetaLength","vertex","segment","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","PolyhedronGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","azi","correctUVs","correctSeam","generateUVs","DodecahedronGeometry","_v0","_v1$1","_normal","_triangle","EdgesGeometry","thresholdAngle","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","Earcut","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","prev","invSize","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","faces","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","verticesArray","addShape","shape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","reverse","hl","ahole","scalePt2","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","holesMovements","oneHoleMovements","verticesMovements","bs","vert","binormals","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","toJSON$1","indexA","indexB","indexC","b_x","b_y","c_x","c_y","indexD","a_x","a_y","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","LatheGeometry","phiStart","phiLength","inverseSegments","base","n1","OctahedronGeometry","ParametricGeometry","slices","stacks","pu","pv","sliceCount","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","ShapeGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","SphereGeometry","thetaEnd","grid","verticesRow","uOffset","TetrahedronGeometry","TextGeometry","text","font","isFont","generateShapes","TorusGeometry","tube","tubularSegments","arc","TorusKnotGeometry","P1","P2","B","calculatePositionOnCurve","cu","su","quOverP","cs","TubeGeometry","closed","frames","P","generateSegment","getPointAt","generateIndices","generateBufferData","WireframeGeometry","edge","edges","ol","edge1","edge2","Geometries","freeze","__proto__","BoxBufferGeometry","CircleBufferGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronBufferGeometry","ExtrudeBufferGeometry","IcosahedronBufferGeometry","LatheBufferGeometry","OctahedronBufferGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingBufferGeometry","ShapeBufferGeometry","SphereBufferGeometry","TetrahedronBufferGeometry","TextBufferGeometry","TorusBufferGeometry","TorusKnotBufferGeometry","TubeBufferGeometry","RawShaderMaterial","STANDARD","PHYSICAL","ior","TOON","MATCAP","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","endFrame","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex","interpolant","endIndex","evaluate","resultBuffer","numTimes","valueStart","multiplyQuaternionsFlat","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","getInterpolation","factoryMethod","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","timeOffset","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","slerpFlat","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","morphTargetSequence","numMorphTargets","objectOrClipArray","clipArray","animationToMorphTargets","pattern","morphTarget","animationMorphTargets","clips","CreateFromMorphTargetSequence","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","validate","optimize","typeName","getTrackTypeForValueTypeName","Cache","files","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","getHandler","DefaultLoadingManager","Loader","crossOrigin","withCredentials","resourcePath","requestHeader","loadAsync","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","FileLoader","CompressedTextureLoader","dataUriRegexResult","request","mimeType","isBase64","decodeURIComponent","responseType","parser","DOMParser","parseFromString","XMLHttpRequest","open","callbacks","overrideMimeType","header","send","setResponseType","setMimeType","loaded","loadTexture","texDatas","mipmapCount","isCubemap","ImageLoader","onImageLoad","onImageError","CubeTextureLoader","urls","DataTextureLoader","TextureLoader","Curve","arcLengthDivisions","texData","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","arcLengths","targetArcLength","comparison","lengthBefore","getTangent","t2","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","makeRotationAxis","fromJSON","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","twoPi","deltaAngle","samePoints","isEllipseCurve","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","isArcCurve","pz","CatmullRomCurve3","curveType","intPoint","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","isCatmullRomCurve3","CubicBezierCurve","v3","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","LineCurve3","isLineCurve3","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","SplineCurve","isSplineCurve","Curves","CurvePath","curves","autoClose","curve","startPoint","endPoint","curveLengths","getCurveLengths","diff","segmentLength","lens","cacheLengths","sums","Path","currentPoint","moveTo","lineTo","aCPx","aCPy","aCP1x","aCP1y","aCP2x","aCP2y","npts","absarc","absellipse","firstPoint","lastPoint","Shape","holesPts","getPointsHoles","Light","HemisphereLight","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","LightShadow","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","SpotLightShadow","isSpotLightShadow","SpotLight","power","_lightPositionWorld","_lookTarget","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","scaleW","scaleH","makeOrthographic","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","SphericalHarmonics3","coeff","shBasis","isSphericalHarmonics3","LightProbe","MaterialLoader","getTexture","shading","LoaderUtils","decodeText","TextDecoder","decode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","typedArray","bufferAttribute","drawcalls","offsets","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","ImageBitmapLoader","createImageBitmap","fetch","isImageBitmapLoader","setOptions","fetchOptions","credentials","headers","colorSpaceConversion","imageBitmap","ShapePath","subPaths","currentPath","quadraticCurveTo","bezierCurveTo","splineThru","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","betterShapeHoles","newShapes","tmpPoints","tmpHoles","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","Font","paths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","createPaths","toShapes","glyph","glyphs","familyName","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","AudioContext","webkitAudioContext","AudioLoader","bufferCopy","decodeAudioData","audioBuffer","HemisphereLightProbe","sky","ground","isHemisphereLightProbe","AmbientLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","Clock","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","_position$1","_quaternion$1","_scale$1","_orientation$1","Audio","gain","createGain","connect","getInput","autoplay","detune","loopStart","loopEnd","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","audioNode","mediaElement","createMediaElementSource","mediaStream","createMediaStreamSource","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getOutput","setTargetAtTime","getFilters","setFilters","_position","_quaternion","_scale","_orientation","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getByteFrequencyData","getFrequencyData","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accuIndex","currentWeight","weightAdditive","originalValueOffset","getValue","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nCachedObjects_","bindings","unbind","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","substring","getBoneByName","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","AnimationObjectGroup","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCachedIndex","firstActiveObject","lastObject","indicesByPath","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","_isActiveAction","_scheduleFading","fadeOutAction","warp","fadeOut","fadeIn","fadeInDuration","fadeOutDuration","endStartRatio","fadeInAction","crossFadeFrom","weightInterpolant","_takeBackControlInterpolant","action","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","_root","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","accumulateAdditive","accumulate","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_initMemoryManager","_accuIndex","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","_bindAction","knownActions","_addInactiveAction","_lendBinding","saveOriginalState","_lendAction","restoreOriginalState","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","optionalRoot","clipObject","findByName","existingAction","newAction","nActions","_update","timeInSeconds","actionsToRemove","_removeInactiveAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","Raycaster","PointCloud","ascSort","intersectObject","setBuffer","setType","setItemSize","setCount","setFromCamera","coords","unproject","intersectObjects","_vector$4","Box2","isBox2","_startP","_startEnd","Line3","clampToLine","startEnd2","closestPointToPointParameter","ImmediateRenderObject","_vector$3","_vector$2","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","isSkeletonHelper","_vector$1","_color1","_color2","GridHelper","_v1","_v2","_v3","_vector","_camera","setPoint","pointMap","_box","BoxHelper","setFromObject","_axis","_lineGeometry","_coneGeometry","AxesHelper","_floatView","_int32View","DataUtils","toHalfFloat","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","ENCODINGS","backgroundMaterial","backgroundBox","_flatCamera","_lodPlanes","_sizeLods","_sigmas","_createPlanes","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","convertLinearToRGBE","maxComponent","fExp","_isLDR","lod","sizeLod","sigma","texelSize","cubeFaces","positionSize","uvSize","faceIndexSize","_createRenderTarget","cubeUVRenderTarget","_setViewport","_getEquirectShader","inputEncoding","_getCommonVertexShader","_getEncodings","_getCubemapShader","construct","fromPoints","setColors","Handlers","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","intersectsLine","isIntersectionPlane","getArea","barycoordFromPoint","midpoint","getMidpoint","prototypenormal","getPlane","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","manhattanDistanceTo","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","maxInstancedCount","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","transparency","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","initMaterial","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","revision","__THREE__","AnimationLoader","ArrowHelper","headLength","headWidth","cone","setDirection","setLength","AudioListener","destination","timeDelta","_clock","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setPosition","setOrientation","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","Box3Helper","CameraHelper","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","CanvasRenderer","CullFaceFrontBack","Cylindrical","other","setFromCartesianCoords","DecrementStencilOp","DecrementWrapStencilOp","DirectionalLightHelper","lightPlane","targetLine","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","FaceColors","FlatShading","Float32Attribute","Float64Attribute","FontLoader","GLSL1","GreaterEqualStencilFunc","GreaterStencilFunc","HemisphereLightHelper","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","isMultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","ObjectLoader","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","child","geometryShapes","bufferGeometryLoader","details","setTextures","deserializeImage","loadImage","deserializedImage","parseConstant","getGeometry","getMaterial","objectAnimations","PMREMGenerator","_pingPongRenderTarget","_blurMaterial","weights","poleAxis","latitudinal","dTheta","mipInt","_getBlurShader","_equirectShader","_cubemapShader","_compileMaterial","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","equirectangular","_fromTexture","outputTarget","_textureToCubeUV","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","useSolidColor","convertSRGBToLinear","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","outputSize","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PlaneHelper","PointCloudMaterial","PointLightHelper","sphereSize","PolarGridHelper","radials","circles","PositionalAudio","panner","createPanner","panningModel","refDistance","rolloffFactor","distanceModel","maxDistance","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","REVISION","ReplaceStencilOp","SmoothShading","Spherical","SpotLightHelper","coneLength","coneWidth","StaticCopyUsage","StaticReadUsage","StereoCamera","eyeSep","_cache","eyeSepHalf","eyeSepOnProjection","ymax","xmin","xmax","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","XHRLoader","ZeroStencilOp","define","amd","globalThis","self","THREE","OrbitControls","quat","quatInverse","lastPosition","lastQuaternion","twoPI","minDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","UP","BOTTOM","mouseButtons","touches","TWO","target0","position0","zoom0","_domElementKeyEvents","getPolarAngle","spherical","getAzimuthalAngle","listenToKeyEvents","onKeyDown","saveState","changeEvent","STATE","setFromUnitVectors","setFromVector3","rotateLeft","sphericalDelta","makeSafe","panOffset","setFromSpherical","zoomChanged","EPS","onContextMenu","onPointerDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","ownerDocument","onPointerMove","onPointerUp","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","panUp","pan","deltaX","deltaY","targetDistance","clientHeight","clientWidth","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","handleTouchMoveRotate","handleTouchMovePan","handleTouchMoveDolly","pointerType","mouseAction","button","handleMouseDownDolly","onMouseDown","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","onMouseUp","handleMouseWheel","handleKeyDown","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","MapControls","controls","earthTexture","moonTexture","earthMaterial","earthMesh","moonGroup","moonMaterial","moonMesh","setScalar","CANVAS_SKETCH_DEFAULT_STORAGE_KEY","location"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","module.exports = isNode\n\nfunction isNode (val) {\n  return (!val || typeof val !== 'object')\n    ? false\n    : (typeof window === 'object' && typeof window.Node === 'object')\n      ? (val instanceof window.Node)\n      : (typeof val.nodeType === 'number') &&\n        (typeof val.nodeName === 'string')\n}\n","// TODO: We can remove a huge chunk of bundle size by using a smaller\n// utility module for converting units.\nimport isDOM from 'is-dom';\n\nexport function getClientAPI () {\n  return typeof window !== 'undefined' && window['canvas-sketch-cli'];\n}\n\nexport function defined () {\n  for (let i = 0; i < arguments.length; i++) {\n    if (arguments[i] != null) {\n      return arguments[i];\n    }\n  }\n  return undefined;\n}\n\nexport function isBrowser () {\n  return typeof document !== 'undefined';\n}\n\nexport function isWebGLContext (ctx) {\n  return typeof ctx.clear === 'function' && typeof ctx.clearColor === 'function' && typeof ctx.bufferData === 'function';\n}\n\nexport function isCanvas (element) {\n  return isDOM(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === 'function';\n}\n","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\n(function(global) {\n  'use strict';\n\n  var dateFormat = (function() {\n      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n      var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n      var timezoneClip = /[^-+\\dA-Z]/g;\n  \n      // Regexes and supporting functions are cached through closure\n      return function (date, mask, utc, gmt) {\n  \n        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n        if (arguments.length === 1 && kindOf(date) === 'string' && !/\\d/.test(date)) {\n          mask = date;\n          date = undefined;\n        }\n  \n        date = date || new Date;\n  \n        if(!(date instanceof Date)) {\n          date = new Date(date);\n        }\n  \n        if (isNaN(date)) {\n          throw TypeError('Invalid date');\n        }\n  \n        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);\n  \n        // Allow setting the utc/gmt argument via the mask\n        var maskSlice = mask.slice(0, 4);\n        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {\n          mask = mask.slice(4);\n          utc = true;\n          if (maskSlice === 'GMT:') {\n            gmt = true;\n          }\n        }\n  \n        var _ = utc ? 'getUTC' : 'get';\n        var d = date[_ + 'Date']();\n        var D = date[_ + 'Day']();\n        var m = date[_ + 'Month']();\n        var y = date[_ + 'FullYear']();\n        var H = date[_ + 'Hours']();\n        var M = date[_ + 'Minutes']();\n        var s = date[_ + 'Seconds']();\n        var L = date[_ + 'Milliseconds']();\n        var o = utc ? 0 : date.getTimezoneOffset();\n        var W = getWeek(date);\n        var N = getDayOfWeek(date);\n        var flags = {\n          d:    d,\n          dd:   pad(d),\n          ddd:  dateFormat.i18n.dayNames[D],\n          dddd: dateFormat.i18n.dayNames[D + 7],\n          m:    m + 1,\n          mm:   pad(m + 1),\n          mmm:  dateFormat.i18n.monthNames[m],\n          mmmm: dateFormat.i18n.monthNames[m + 12],\n          yy:   String(y).slice(2),\n          yyyy: y,\n          h:    H % 12 || 12,\n          hh:   pad(H % 12 || 12),\n          H:    H,\n          HH:   pad(H),\n          M:    M,\n          MM:   pad(M),\n          s:    s,\n          ss:   pad(s),\n          l:    pad(L, 3),\n          L:    pad(Math.round(L / 10)),\n          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n          W:    W,\n          N:    N\n        };\n  \n        return mask.replace(token, function (match) {\n          if (match in flags) {\n            return flags[match];\n          }\n          return match.slice(1, match.length - 1);\n        });\n      };\n    })();\n\n  dateFormat.masks = {\n    'default':               'ddd mmm dd yyyy HH:MM:ss',\n    'shortDate':             'm/d/yy',\n    'mediumDate':            'mmm d, yyyy',\n    'longDate':              'mmmm d, yyyy',\n    'fullDate':              'dddd, mmmm d, yyyy',\n    'shortTime':             'h:MM TT',\n    'mediumTime':            'h:MM:ss TT',\n    'longTime':              'h:MM:ss TT Z',\n    'isoDate':               'yyyy-mm-dd',\n    'isoTime':               'HH:MM:ss',\n    'isoDateTime':           'yyyy-mm-dd\\'T\\'HH:MM:sso',\n    'isoUtcDateTime':        'UTC:yyyy-mm-dd\\'T\\'HH:MM:ss\\'Z\\'',\n    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'\n  };\n\n  // Internationalization strings\n  dateFormat.i18n = {\n    dayNames: [\n      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ],\n    monthNames: [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n    ],\n    timeNames: [\n      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'\n    ]\n  };\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = '0' + val;\n  }\n  return val;\n}\n\n/**\n * Get the ISO 8601 week number\n * Based on comments from\n * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n *\n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getWeek(date) {\n  // Remove time components of date\n  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n  // Change date to Thursday same week\n  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);\n\n  // Take January 4th as it is always in week 1 (see ISO 8601)\n  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n\n  // Change date to Thursday same week\n  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);\n\n  // Check if daylight-saving-time-switch occurred and correct for it\n  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n  targetThursday.setHours(targetThursday.getHours() - ds);\n\n  // Number of weeks between target Thursday and first Thursday\n  var weekDiff = (targetThursday - firstThursday) / (86400000*7);\n  return 1 + Math.floor(weekDiff);\n}\n\n/**\n * Get ISO-8601 numeric representation of the day of the week\n * 1 (for Monday) through 7 (for Sunday)\n * \n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getDayOfWeek(date) {\n  var dow = date.getDay();\n  if(dow === 0) {\n    dow = 7;\n  }\n  return dow;\n}\n\n/**\n * kind-of shortcut\n * @param  {*} val\n * @return {String}\n */\nfunction kindOf(val) {\n  if (val === null) {\n    return 'null';\n  }\n\n  if (val === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof val !== 'object') {\n    return typeof val;\n  }\n\n  if (Array.isArray(val)) {\n    return 'array';\n  }\n\n  return {}.toString.call(val)\n    .slice(8, -1).toLowerCase();\n};\n\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dateFormat;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = dateFormat;\n  } else {\n    global.dateFormat = dateFormat;\n  }\n})(this);\n","/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar repeat = require('repeat-string');\n\nmodule.exports = function padLeft(str, num, ch) {\n  str = str.toString();\n\n  if (typeof num === 'undefined') {\n    return str;\n  }\n\n  if (ch === 0) {\n    ch = '0';\n  } else if (ch) {\n    ch = ch.toString();\n  } else {\n    ch = ' ';\n  }\n\n  return repeat(ch, num - str.length) + str;\n};\n","import dateformat from 'dateformat';\nimport assign from 'object-assign';\nimport padLeft from 'pad-left';\nimport { getClientAPI } from './util';\n\nconst noop = () => {};\nlet link;\nlet defaultExts = { extension: '', prefix: '', suffix: '' };\n\n// Alternative solution for saving files,\n// a bit slower and does not work in Safari\n// function fetchBlobFromDataURL (dataURL) {\n//   return window.fetch(dataURL).then(res => res.blob());\n// }\n\nconst supportedEncodings = [\n  'image/png',\n  'image/jpeg',\n  'image/webp'\n];\n\nfunction stream (isStart, opts = {}) {\n  return new Promise((resolve, reject) => {\n    opts = assign({}, defaultExts, opts);\n    const filename = resolveFilename(Object.assign({}, opts, {\n      extension: '',\n      frame: undefined\n    }));\n    const func = isStart ? 'streamStart' : 'streamEnd';\n    const client = getClientAPI();\n    if (client && client.output && typeof client[func] === 'function') {\n      return client[func](assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      return resolve({ filename, client: false });\n    }\n  });\n}\n\nexport function streamStart (opts = {}) {\n  return stream(true, opts);\n}\n\nexport function streamEnd (opts = {}) {\n  return stream(false, opts);\n}\n\nexport function exportCanvas (canvas, opt = {}) {\n  const encoding = opt.encoding || 'image/png';\n  if (!supportedEncodings.includes(encoding)) throw new Error(`Invalid canvas encoding ${encoding}`);\n  let extension = (encoding.split('/')[1] || '').replace(/jpeg/i, 'jpg');\n  if (extension) extension = `.${extension}`.toLowerCase();\n  return {\n    extension,\n    type: encoding,\n    dataURL: canvas.toDataURL(encoding, opt.encodingQuality)\n  };\n}\n\nfunction createBlobFromDataURL (dataURL) {\n  return new Promise((resolve) => {\n    const splitIndex = dataURL.indexOf(',');\n    if (splitIndex === -1) {\n      resolve(new window.Blob());\n      return;\n    }\n    const base64 = dataURL.slice(splitIndex + 1);\n    const byteString = window.atob(base64);\n    const type = dataURL.slice(0, splitIndex);\n    const mimeMatch = /data:([^;]+)/.exec(type);\n    const mime = (mimeMatch ? mimeMatch[1] : '') || undefined;\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    resolve(new window.Blob([ ab ], { type: mime }));\n  });\n}\n\nexport function saveDataURL (dataURL, opts = {}) {\n  return createBlobFromDataURL(dataURL)\n    .then(blob => saveBlob(blob, opts));\n}\n\nexport function saveBlob (blob, opts = {}) {\n  return new Promise(resolve => {\n    opts = assign({}, defaultExts, opts);\n    const filename = opts.filename;\n\n    const client = getClientAPI();\n    if (client && typeof client.saveBlob === 'function' && client.output) {\n      // native saving using a CLI tool\n      return client.saveBlob(blob, assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      // force download\n      if (!link) {\n        link = document.createElement('a');\n        link.style.visibility = 'hidden';\n        link.target = '_blank';\n      }\n      link.download = filename;\n      link.href = window.URL.createObjectURL(blob);\n      document.body.appendChild(link);\n      link.onclick = () => {\n        link.onclick = noop;\n        setTimeout(() => {\n          window.URL.revokeObjectURL(blob);\n          if (link.parentElement) link.parentElement.removeChild(link);\n          link.removeAttribute('href');\n          resolve({ filename, client: false });\n        });\n      };\n      link.click();\n    }\n  });\n}\n\nexport function saveFile (data, opts = {}) {\n  const parts = Array.isArray(data) ? data : [ data ];\n  const blob = new window.Blob(parts, { type: opts.type || '' });\n  return saveBlob(blob, opts);\n}\n\nexport function getTimeStamp () {\n  const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  return dateformat(new Date(), dateFormatStr);\n}\n\nexport function getDefaultFile (prefix = '', suffix = '', ext) {\n  // const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  const dateFormatStr = `yyyy-mm-dd 'at' h.MM.ss TT`;\n  return `${prefix}${dateformat(new Date(), dateFormatStr)}${suffix}${ext}`;\n}\n\nexport function resolveFilename (opt = {}) {\n  opt = assign({}, opt);\n\n  // Custom filename function\n  if (typeof opt.file === 'function') {\n    return opt.file(opt);\n  } else if (opt.file) {\n    return opt.file;\n  }\n\n  let frame = null;\n  let extension = '';\n  if (typeof opt.extension === 'string') extension = opt.extension;\n\n  if (typeof opt.frame === 'number') {\n    let totalFrames;\n    if (typeof opt.totalFrames === 'number') {\n      totalFrames = opt.totalFrames;\n    } else {\n      totalFrames = Math.max(10000, opt.frame);\n    }\n    frame = padLeft(String(opt.frame), String(totalFrames).length, '0');\n  }\n\n  const layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? `${opt.layer}` : '';\n  if (frame != null) {\n    return [ layerStr, frame ].filter(Boolean).join('-') + extension;\n  } else {\n    const defaultFileName = opt.timeStamp;\n    return [ opt.prefix, opt.name || defaultFileName, layerStr, opt.hash, opt.suffix ].filter(Boolean).join('-') + extension;\n  }\n}\n","// Handle some common typos\nconst commonTypos = {\n  dimension: 'dimensions',\n  animated: 'animate',\n  animating: 'animate',\n  unit: 'units',\n  P5: 'p5',\n  pixellated: 'pixelated',\n  looping: 'loop',\n  pixelPerInch: 'pixels'\n};\n\n// Handle all other typos\nconst allKeys = [\n  'dimensions', 'units', 'pixelsPerInch', 'orientation',\n  'scaleToFit', 'scaleToView', 'bleed', 'pixelRatio',\n  'exportPixelRatio', 'maxPixelRatio', 'scaleContext',\n  'resizeCanvas', 'styleCanvas', 'canvas', 'context', 'attributes',\n  'parent', 'file', 'name', 'prefix', 'suffix', 'animate', 'playing',\n  'loop', 'duration', 'totalFrames', 'fps', 'playbackRate', 'timeScale',\n  'frame', 'time', 'flush', 'pixelated', 'hotkeys', 'p5', 'id',\n  'scaleToFitPadding', 'data', 'params', 'encoding', 'encodingQuality'\n];\n\n// This is fairly opinionated and forces users to use the 'data' parameter\n// if they want to pass along non-setting objects...\nexport const checkSettings = (settings) => {\n  const keys = Object.keys(settings);\n  keys.forEach(key => {\n    if (key in commonTypos) {\n      const actual = commonTypos[key];\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\", did you mean \"${actual}\"?`);\n    } else if (!allKeys.includes(key)) {\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\"`);\n    }\n  });\n};\n","const defaultUnits = 'mm';\n\nconst data = [\n  // Common Paper Sizes\n  // (Mostly North-American based)\n  [ 'postcard', 101.6, 152.4 ],\n  [ 'poster-small', 280, 430 ],\n  [ 'poster', 460, 610 ],\n  [ 'poster-large', 610, 910 ],\n  [ 'business-card', 50.8, 88.9 ],\n\n  // Photographic Print Paper Sizes\n  [ '2r', 64, 89 ],\n  [ '3r', 89, 127 ],\n  [ '4r', 102, 152 ],\n  [ '5r', 127, 178 ], // 5″x7″\n  [ '6r', 152, 203 ], // 6″x8″\n  [ '8r', 203, 254 ], // 8″x10″\n  [ '10r', 254, 305 ], // 10″x12″\n  [ '11r', 279, 356 ], // 11″x14″\n  [ '12r', 305, 381 ],\n\n  // Standard Paper Sizes\n  [ 'a0', 841, 1189 ],\n  [ 'a1', 594, 841 ],\n  [ 'a2', 420, 594 ],\n  [ 'a3', 297, 420 ],\n  [ 'a4', 210, 297 ],\n  [ 'a5', 148, 210 ],\n  [ 'a6', 105, 148 ],\n  [ 'a7', 74, 105 ],\n  [ 'a8', 52, 74 ],\n  [ 'a9', 37, 52 ],\n  [ 'a10', 26, 37 ],\n  [ '2a0', 1189, 1682 ],\n  [ '4a0', 1682, 2378 ],\n  [ 'b0', 1000, 1414 ],\n  [ 'b1', 707, 1000 ],\n  [ 'b1+', 720, 1020 ],\n  [ 'b2', 500, 707 ],\n  [ 'b2+', 520, 720 ],\n  [ 'b3', 353, 500 ],\n  [ 'b4', 250, 353 ],\n  [ 'b5', 176, 250 ],\n  [ 'b6', 125, 176 ],\n  [ 'b7', 88, 125 ],\n  [ 'b8', 62, 88 ],\n  [ 'b9', 44, 62 ],\n  [ 'b10', 31, 44 ],\n  [ 'b11', 22, 32 ],\n  [ 'b12', 16, 22 ],\n  [ 'c0', 917, 1297 ],\n  [ 'c1', 648, 917 ],\n  [ 'c2', 458, 648 ],\n  [ 'c3', 324, 458 ],\n  [ 'c4', 229, 324 ],\n  [ 'c5', 162, 229 ],\n  [ 'c6', 114, 162 ],\n  [ 'c7', 81, 114 ],\n  [ 'c8', 57, 81 ],\n  [ 'c9', 40, 57 ],\n  [ 'c10', 28, 40 ],\n  [ 'c11', 22, 32 ],\n  [ 'c12', 16, 22 ],\n\n  // Use inches for North American sizes,\n  // as it produces less float precision errors\n  [ 'half-letter', 5.5, 8.5, 'in' ],\n  [ 'letter', 8.5, 11, 'in' ],\n  [ 'legal', 8.5, 14, 'in' ],\n  [ 'junior-legal', 5, 8, 'in' ],\n  [ 'ledger', 11, 17, 'in' ],\n  [ 'tabloid', 11, 17, 'in' ],\n  [ 'ansi-a', 8.5, 11.0, 'in' ],\n  [ 'ansi-b', 11.0, 17.0, 'in' ],\n  [ 'ansi-c', 17.0, 22.0, 'in' ],\n  [ 'ansi-d', 22.0, 34.0, 'in' ],\n  [ 'ansi-e', 34.0, 44.0, 'in' ],\n  [ 'arch-a', 9, 12, 'in' ],\n  [ 'arch-b', 12, 18, 'in' ],\n  [ 'arch-c', 18, 24, 'in' ],\n  [ 'arch-d', 24, 36, 'in' ],\n  [ 'arch-e', 36, 48, 'in' ],\n  [ 'arch-e1', 30, 42, 'in' ],\n  [ 'arch-e2', 26, 38, 'in' ],\n  [ 'arch-e3', 27, 39, 'in' ]\n];\n\nexport default data.reduce((dict, preset) => {\n  const item = {\n    units: preset[3] || defaultUnits,\n    dimensions: [ preset[1], preset[2] ]\n  };\n  dict[preset[0]] = item;\n  dict[preset[0].replace(/-/g, ' ')] = item;\n  return dict;\n}, {});\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var defined = require('defined');\nvar units = [ 'mm', 'cm', 'm', 'pc', 'pt', 'in', 'ft', 'px' ];\n\nvar conversions = {\n  // metric\n  m: {\n    system: 'metric',\n    factor: 1\n  },\n  cm: {\n    system: 'metric',\n    factor: 1 / 100\n  },\n  mm: {\n    system: 'metric',\n    factor: 1 / 1000\n  },\n  // imperial\n  pt: {\n    system: 'imperial',\n    factor: 1 / 72\n  },\n  pc: {\n    system: 'imperial',\n    factor: 1 / 6\n  },\n  in: {\n    system: 'imperial',\n    factor: 1\n  },\n  ft: {\n    system: 'imperial',\n    factor: 12\n  }\n};\n\nconst anchors = {\n  metric: {\n    unit: 'm',\n    ratio: 1 / 0.0254\n  },\n  imperial: {\n    unit: 'in',\n    ratio: 0.0254\n  }\n};\n\nfunction round (value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\nfunction convertDistance (value, fromUnit, toUnit, opts) {\n  if (typeof value !== 'number' || !isFinite(value)) throw new Error('Value must be a finite number');\n  if (!fromUnit || !toUnit) throw new Error('Must specify from and to units');\n\n  opts = opts || {};\n  var pixelsPerInch = defined(opts.pixelsPerInch, 96);\n  var precision = opts.precision;\n  var roundPixel = opts.roundPixel !== false;\n\n  fromUnit = fromUnit.toLowerCase();\n  toUnit = toUnit.toLowerCase();\n\n  if (units.indexOf(fromUnit) === -1) throw new Error('Invalid from unit \"' + fromUnit + '\", must be one of: ' + units.join(', '));\n  if (units.indexOf(toUnit) === -1) throw new Error('Invalid from unit \"' + toUnit + '\", must be one of: ' + units.join(', '));\n\n  if (fromUnit === toUnit) {\n    // We don't need to convert from A to B since they are the same already\n    return value;\n  }\n\n  var toFactor = 1;\n  var fromFactor = 1;\n  var isToPixel = false;\n\n  if (fromUnit === 'px') {\n    fromFactor = 1 / pixelsPerInch;\n    fromUnit = 'in';\n  }\n  if (toUnit === 'px') {\n    isToPixel = true;\n    toFactor = pixelsPerInch;\n    toUnit = 'in';\n  }\n\n  var fromUnitData = conversions[fromUnit];\n  var toUnitData = conversions[toUnit];\n\n  // source to anchor inside source's system\n  var anchor = value * fromUnitData.factor * fromFactor;\n\n  // if systems differ, convert one to another\n  if (fromUnitData.system !== toUnitData.system) {\n    // regular 'm' to 'in' and so forth\n    anchor *= anchors[fromUnitData.system].ratio;\n  }\n\n  var result = anchor / toUnitData.factor * toFactor;\n  if (isToPixel && roundPixel) {\n    result = Math.round(result);\n  } else if (typeof precision === 'number' && isFinite(precision)) {\n    result = round(result, precision);\n  }\n  return result;\n}\n\nmodule.exports = convertDistance;\nmodule.exports.units = units;\n","import paperSizes from './paper-sizes';\nimport convertLength from 'convert-length';\n\nexport function getDimensionsFromPreset (dimensions, unitsTo = 'px', pixelsPerInch = 72) {\n  if (typeof dimensions === 'string') {\n    const key = dimensions.toLowerCase();\n    if (!(key in paperSizes)) {\n      throw new Error(`The dimension preset \"${dimensions}\" is not supported or could not be found; try using a4, a3, postcard, letter, etc.`)\n    }\n    const preset = paperSizes[key];\n    return preset.dimensions.map(d => {\n      return convertDistance(d, preset.units, unitsTo, pixelsPerInch);\n    });\n  } else {\n    return dimensions;\n  }\n}\n\nexport function convertDistance (dimension, unitsFrom = 'px', unitsTo = 'px', pixelsPerInch = 72) {\n  return convertLength(dimension, unitsFrom, unitsTo, {\n    pixelsPerInch,\n    precision: 4,\n    roundPixel: true\n  });\n}\n","import { getDimensionsFromPreset, convertDistance } from '../distances';\nimport { isBrowser, defined } from '../util';\n\nfunction checkIfHasDimensions (settings) {\n  if (!settings.dimensions) return false;\n  if (typeof settings.dimensions === 'string') return true;\n  if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) return true;\n  return false;\n}\n\nfunction getParentSize (props, settings) {\n  // When no { dimension } is passed in node, we default to HTML canvas size\n  if (!isBrowser()) {\n    return [ 300, 150 ];\n  }\n\n  let element = settings.parent || window;\n\n  if (element === window ||\n      element === document ||\n      element === document.body) {\n    return [ window.innerWidth, window.innerHeight ];\n  } else {\n    const { width, height } = element.getBoundingClientRect();\n    return [ width, height ];\n  }\n}\n\nexport default function resizeCanvas (props, settings) {\n  let width, height;\n  let styleWidth, styleHeight;\n  let canvasWidth, canvasHeight;\n\n  const browser = isBrowser();\n  const dimensions = settings.dimensions;\n  const hasDimensions = checkIfHasDimensions(settings);\n  const exporting = props.exporting;\n  let scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;\n  let scaleToView = (!exporting && hasDimensions) ? settings.scaleToView : true;\n  // in node, cancel both of these options\n  if (!browser) scaleToFit = scaleToView = false;\n  const units = settings.units;\n  const pixelsPerInch = (typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch)) ? settings.pixelsPerInch : 72;\n  const bleed = defined(settings.bleed, 0);\n\n  const devicePixelRatio = browser ? window.devicePixelRatio : 1;\n  const basePixelRatio = scaleToView ? devicePixelRatio : 1;\n\n  let pixelRatio, exportPixelRatio;\n\n  // If a pixel ratio is specified, we will use it.\n  // Otherwise:\n  //  -> If dimension is specified, use base ratio (i.e. size for export)\n  //  -> If no dimension is specified, use device ratio (i.e. size for screen)\n  if (typeof settings.pixelRatio === 'number' && isFinite(settings.pixelRatio)) {\n    // When { pixelRatio } is specified, it's also used as default exportPixelRatio.\n    pixelRatio = settings.pixelRatio;\n    exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n  } else {\n    if (hasDimensions) {\n      // When a dimension is specified, use the base ratio rather than screen ratio\n      pixelRatio = basePixelRatio;\n      // Default to a pixel ratio of 1 so that you end up with the same dimension\n      // you specified, i.e. [ 500, 500 ] is exported as 500x500 px\n      exportPixelRatio = defined(settings.exportPixelRatio, 1);\n    } else {\n      // No dimension is specified, assume full-screen retina sizing\n      pixelRatio = devicePixelRatio;\n      // Default to screen pixel ratio, so that it's like taking a device screenshot\n      exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n    }\n  }\n\n  // Clamp pixel ratio\n  if (typeof settings.maxPixelRatio === 'number' && isFinite(settings.maxPixelRatio)) {\n    pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);\n  }\n\n  // Handle export pixel ratio\n  if (exporting) {\n    pixelRatio = exportPixelRatio;\n  }\n\n  // parentWidth = typeof parentWidth === 'undefined' ? defaultNodeSize[0] : parentWidth;\n  // parentHeight = typeof parentHeight === 'undefined' ? defaultNodeSize[1] : parentHeight;\n\n  let [ parentWidth, parentHeight ] = getParentSize(props, settings);\n  let trimWidth, trimHeight;\n\n  // You can specify a dimensions in pixels or cm/m/in/etc\n  if (hasDimensions) {\n    const result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);\n    const highest = Math.max(result[0], result[1]);\n    const lowest = Math.min(result[0], result[1]);\n    if (settings.orientation) {\n      const landscape = settings.orientation === 'landscape';\n      width = landscape ? highest : lowest;\n      height = landscape ? lowest : highest;\n    } else {\n      width = result[0];\n      height = result[1];\n    }\n\n    trimWidth = width;\n    trimHeight = height;\n\n    // Apply bleed which is assumed to be in the same units\n    width += bleed * 2;\n    height += bleed * 2;\n  } else {\n    width = parentWidth;\n    height = parentHeight;\n    trimWidth = width;\n    trimHeight = height;\n  }\n\n  // Real size in pixels after PPI is taken into account\n  let realWidth = width;\n  let realHeight = height;\n  if (hasDimensions && units) {\n    // Convert to digital/pixel units if necessary\n    realWidth = convertDistance(width, units, 'px', pixelsPerInch);\n    realHeight = convertDistance(height, units, 'px', pixelsPerInch);\n  }\n\n  // How big to set the 'view' of the canvas in the browser (i.e. style)\n  styleWidth = Math.round(realWidth);\n  styleHeight = Math.round(realHeight);\n\n  // If we wish to scale the view to the browser window\n  if (scaleToFit && !exporting && hasDimensions) {\n    const aspect = width / height;\n    const windowAspect = parentWidth / parentHeight;\n    const scaleToFitPadding = defined(settings.scaleToFitPadding, 40);\n    const maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);\n    const maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);\n    if (styleWidth > maxWidth || styleHeight > maxHeight) {\n      if (windowAspect > aspect) {\n        styleHeight = maxHeight;\n        styleWidth = Math.round(styleHeight * aspect);\n      } else {\n        styleWidth = maxWidth;\n        styleHeight = Math.round(styleWidth / aspect);\n      }\n    }\n  }\n\n  canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(pixelRatio * realWidth);\n  canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(pixelRatio * realHeight);\n\n  const viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);\n  const viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);\n\n  const scaleX = canvasWidth / width;\n  const scaleY = canvasHeight / height;\n\n  // Assign to current props\n  return {\n    bleed,\n    pixelRatio,\n    width,\n    height,\n    dimensions: [ width, height ],\n    units: units || 'px',\n    scaleX,\n    scaleY,\n    pixelsPerInch,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    trimWidth,\n    trimHeight,\n    styleWidth,\n    styleHeight\n  };\n}\n","module.exports = getCanvasContext\nfunction getCanvasContext (type, opts) {\n  if (typeof type !== 'string') {\n    throw new TypeError('must specify type string')\n  }\n\n  opts = opts || {}\n\n  if (typeof document === 'undefined' && !opts.canvas) {\n    return null // check for Node\n  }\n\n  var canvas = opts.canvas || document.createElement('canvas')\n  if (typeof opts.width === 'number') {\n    canvas.width = opts.width\n  }\n  if (typeof opts.height === 'number') {\n    canvas.height = opts.height\n  }\n\n  var attribs = opts\n  var gl\n  try {\n    var names = [ type ]\n    // prefix GL contexts\n    if (type.indexOf('webgl') === 0) {\n      names.push('experimental-' + type)\n    }\n\n    for (var i = 0; i < names.length; i++) {\n      gl = canvas.getContext(names[i], attribs)\n      if (gl) return gl\n    }\n  } catch (e) {\n    gl = null\n  }\n  return (gl || null) // ensure null on fail\n}\n","import assign from 'object-assign';\nimport getCanvasContext from 'get-canvas-context';\nimport { isBrowser } from '../util';\n\nfunction createCanvasElement () {\n  if (!isBrowser()) {\n    throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');\n  }\n  return document.createElement('canvas');\n}\n\nexport default function createCanvas (settings = {}) {\n  let context, canvas;\n  let ownsCanvas = false;\n  if (settings.canvas !== false) {\n    // Determine the canvas and context to create\n    context = settings.context;\n    if (!context || typeof context === 'string') {\n      let newCanvas = settings.canvas;\n      if (!newCanvas) {\n        newCanvas = createCanvasElement();\n        ownsCanvas = true;\n      }\n      const type = context || '2d';\n      if (typeof newCanvas.getContext !== 'function') {\n        throw new Error(`The specified { canvas } element does not have a getContext() function, maybe it is not a <canvas> tag?`);\n      }\n      context = getCanvasContext(type, assign({}, settings.attributes, { canvas: newCanvas }));\n      if (!context) {\n        throw new Error(`Failed at canvas.getContext('${type}') - the browser may not support this context, or a different context may already be in use with this canvas.`);\n      }\n    }\n\n    canvas = context.canvas;\n    // Ensure context matches user's canvas expectations\n    if (settings.canvas && canvas !== settings.canvas) {\n      throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');\n    }\n\n    // Apply pixelation to canvas if necessary, this is mostly a convenience utility\n    if (settings.pixelated) {\n      context.imageSmoothingEnabled = false;\n      context.mozImageSmoothingEnabled = false;\n      context.oImageSmoothingEnabled = false;\n      context.webkitImageSmoothingEnabled = false;\n      context.msImageSmoothingEnabled = false;\n      canvas.style['image-rendering'] = 'pixelated';\n    }\n  }\n  return { canvas, context, ownsCanvas };\n}\n","import assign from 'object-assign';\nimport rightNow from 'right-now';\nimport isPromise from 'is-promise';\nimport { isBrowser, defined, isWebGLContext, isCanvas, getClientAPI } from '../util';\nimport deepEqual from 'deep-equal';\nimport {\n  resolveFilename,\n  saveFile,\n  saveDataURL,\n  getTimeStamp,\n  exportCanvas,\n  streamStart,\n  streamEnd\n} from '../save';\nimport { checkSettings } from '../accessibility';\n\nimport keyboardShortcuts from './keyboardShortcuts';\nimport resizeCanvas from './resizeCanvas';\nimport createCanvas from './createCanvas';\n\nclass SketchManager {\n  constructor () {\n    this._settings = {};\n    this._props = {};\n    this._sketch = undefined;\n    this._raf = null;\n    this._recordTimeout = null;\n\n    // Some hacky things required to get around p5.js structure\n    this._lastRedrawResult = undefined;\n    this._isP5Resizing = false;\n\n    this._keyboardShortcuts = keyboardShortcuts({\n      enabled: () => this.settings.hotkeys !== false,\n      save: (ev) => {\n        if (ev.shiftKey) {\n          if (this.props.recording) {\n            this.endRecord();\n            this.run();\n          } else this.record();\n        } else if (!this.props.recording) {\n          this.exportFrame();\n        }\n      },\n      togglePlay: () => {\n        if (this.props.playing) this.pause();\n        else this.play();\n      },\n      commit: (ev) => {\n        this.exportFrame({ commit: true });\n      }\n    });\n\n    this._animateHandler = () => this.animate();\n\n    this._resizeHandler = () => {\n      const changed = this.resize();\n      // Only re-render when size actually changes\n      if (changed) {\n        this.render();\n      }\n    };\n  }\n\n  get sketch () {\n    return this._sketch;\n  }\n\n  get settings () {\n    return this._settings;\n  }\n\n  get props () {\n    return this._props;\n  }\n\n  _computePlayhead (currentTime, duration) {\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    return hasDuration ? currentTime / duration : 0;\n  }\n\n  _computeFrame (playhead, time, totalFrames, fps) {\n    return (isFinite(totalFrames) && totalFrames > 1)\n      ? Math.floor(playhead * (totalFrames - 1))\n      : Math.floor(fps * time);\n  }\n\n  _computeCurrentFrame () {\n    return this._computeFrame(\n      this.props.playhead, this.props.time,\n      this.props.totalFrames, this.props.fps\n    );\n  }\n\n  _getSizeProps () {\n    const props = this.props;\n    return {\n      width: props.width,\n      height: props.height,\n      pixelRatio: props.pixelRatio,\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      viewportWidth: props.viewportWidth,\n      viewportHeight: props.viewportHeight\n    };\n  }\n\n  run () {\n    if (!this.sketch) throw new Error('should wait until sketch is loaded before trying to play()');\n\n    // Start an animation frame loop if necessary\n    if (this.settings.playing !== false) {\n      this.play();\n    }\n\n    // Let's let this warning hang around for a few versions...\n    if (typeof this.sketch.dispose === 'function') {\n      console.warn('In canvas-sketch@0.0.23 the dispose() event has been renamed to unload()');\n    }\n\n    // In case we aren't playing or animated, make sure we still trigger begin message...\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Render an initial frame\n    this.tick();\n    this.render();\n    return this;\n  }\n\n  _cancelTimeouts () {\n    if (this._raf != null && typeof window !== 'undefined' && typeof window.cancelAnimationFrame === 'function') {\n      window.cancelAnimationFrame(this._raf);\n      this._raf = null;\n    }\n    if (this._recordTimeout != null) {\n      clearTimeout(this._recordTimeout);\n      this._recordTimeout = null;\n    }\n  }\n\n  play () {\n    let animate = this.settings.animate;\n    if ('animation' in this.settings) {\n      animate = true;\n      console.warn('[canvas-sketch] { animation } has been renamed to { animate }');\n    }\n    if (!animate) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported');\n      return;\n    }\n    if (this.props.playing) return;\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // console.log('play', this.props.time)\n\n    // Start a render loop\n    this.props.playing = true;\n    this._cancelTimeouts();\n    this._lastTime = rightNow();\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n  }\n\n  pause () {\n    if (this.props.recording) this.endRecord();\n    this.props.playing = false;\n\n    this._cancelTimeouts();\n  }\n\n  togglePlay () {\n    if (this.props.playing) this.pause();\n    else this.play();\n  }\n\n  // Stop and reset to frame zero\n  stop () {\n    this.pause();\n    this.props.frame = 0;\n    this.props.playhead = 0;\n    this.props.time = 0;\n    this.props.deltaTime = 0;\n    this.props.started = false;\n    this.render();\n  }\n\n  record () {\n    if (this.props.recording) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Recording from Node.js is not yet supported');\n      return;\n    }\n\n    this.stop();\n    this.props.playing = true;\n    this.props.recording = true;\n\n    const exportOpts = this._createExportOptions({ sequence: true });\n\n    const frameInterval = 1 / this.props.fps;\n    // Render each frame in the sequence\n    this._cancelTimeouts();\n    const tick = () => {\n      if (!this.props.recording) return Promise.resolve();\n      this.props.deltaTime = frameInterval;\n      this.tick();\n      return this.exportFrame(exportOpts)\n        .then(() => {\n          if (!this.props.recording) return; // was cancelled before\n          this.props.deltaTime = 0;\n          this.props.frame++;\n          if (this.props.frame < this.props.totalFrames) {\n            this.props.time += frameInterval;\n            this.props.playhead = this._computePlayhead(this.props.time, this.props.duration);\n            this._recordTimeout = setTimeout(tick, 0);\n          } else {\n            console.log('Finished recording');\n            this._signalEnd();\n            this.endRecord();\n            this.stop();\n            this.run();\n          }\n        });\n    };\n\n    // Trigger a start event before we begin recording\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Trigger 'begin record' event\n    if (this.sketch && typeof this.sketch.beginRecord === 'function') {\n      this._wrapContextScale(props => this.sketch.beginRecord(props));\n    }\n\n    // Initiate a streaming start if necessary\n    streamStart(exportOpts)\n      .catch(err => {\n        console.error(err);\n      })\n      .then(response => {\n        this._raf = window.requestAnimationFrame(tick);\n      });\n  }\n\n  _signalBegin () {\n    if (this.sketch && typeof this.sketch.begin === 'function') {\n      this._wrapContextScale(props => this.sketch.begin(props));\n    }\n  }\n\n  _signalEnd () {\n    if (this.sketch && typeof this.sketch.end === 'function') {\n      this._wrapContextScale(props => this.sketch.end(props));\n    }\n  }\n\n  endRecord () {\n    const wasRecording = this.props.recording;\n\n    this._cancelTimeouts();\n    this.props.recording = false;\n    this.props.deltaTime = 0;\n    this.props.playing = false;\n\n    // tell CLI that stream has finished\n    return streamEnd()\n      .catch(err => {\n        console.error(err);\n      })\n      .then(() => {\n        // Trigger 'end record' event\n        if (wasRecording && this.sketch && typeof this.sketch.endRecord === 'function') {\n          this._wrapContextScale(props => this.sketch.endRecord(props));\n        }\n      });\n  }\n\n  _createExportOptions (opt = {}) {\n    return {\n      sequence: opt.sequence,\n      save: opt.save,\n      fps: this.props.fps,\n      frame: opt.sequence ? this.props.frame : undefined,\n      file: this.settings.file,\n      name: this.settings.name,\n      prefix: this.settings.prefix,\n      suffix: this.settings.suffix,\n      encoding: this.settings.encoding,\n      encodingQuality: this.settings.encodingQuality,\n      timeStamp: opt.timeStamp || getTimeStamp(),\n      totalFrames: isFinite(this.props.totalFrames) ? Math.max(0, this.props.totalFrames) : 1000\n    };\n  }\n\n  exportFrame (opt = {}) {\n    if (!this.sketch) return Promise.all([]);\n    if (typeof this.sketch.preExport === 'function') {\n      this.sketch.preExport();\n    }\n\n    // Options for export function\n    let exportOpts = this._createExportOptions(opt);\n\n    const client = getClientAPI();\n    let p = Promise.resolve();\n    if (client && opt.commit && typeof client.commit === 'function') {\n      const commitOpts = assign({}, exportOpts);\n      const hash = client.commit(commitOpts);\n      if (isPromise(hash)) p = hash;\n      else p = Promise.resolve(hash);\n    }\n\n    return p.then(hash => {\n      return this._doExportFrame(assign({}, exportOpts, { hash: hash || '' }));\n    }).then(result => {\n      // Most common usecase is to export a single layer,\n      // so let's optimize the user experience for that.\n      if (result.length === 1) return result[0];\n      else return result;\n    });\n  }\n\n  _doExportFrame (exportOpts = {}) {\n    this._props.exporting = true;\n\n    // Resize to output resolution\n    this.resize();\n\n    // Draw at this output resolution\n    let drawResult = this.render();\n\n    // The self owned canvas (may be undefined...!)\n    const canvas = this.props.canvas;\n\n    // Get list of results from render\n    if (typeof drawResult === 'undefined') {\n      drawResult = [ canvas ];\n    }\n    drawResult = [].concat(drawResult).filter(Boolean);\n\n    // Transform the canvas/file descriptors into a consistent format,\n    // and pull out any data URLs from canvas elements\n    drawResult = drawResult.map(result => {\n      const hasDataObject = typeof result === 'object' && result && ('data' in result || 'dataURL' in result);\n      const data = hasDataObject ? result.data : result;\n      const opts = hasDataObject ? assign({}, result, { data }) : { data };\n      if (isCanvas(data)) {\n        const encoding = opts.encoding || exportOpts.encoding;\n        const encodingQuality = defined(opts.encodingQuality, exportOpts.encodingQuality, 0.95);\n        const { dataURL, extension, type } = exportCanvas(data, { encoding, encodingQuality });\n        return Object.assign(opts, { dataURL, extension, type });\n      } else {\n        return opts;\n      }\n    });\n\n    // Now return to regular rendering mode\n    this._props.exporting = false;\n    this.resize();\n    this.render();\n\n    // And now we can save each result\n    return Promise.all(drawResult.map((result, i, layerList) => {\n      // By default, if rendering multiple layers we will give them indices\n      const curOpt = assign({\n        extension: '',\n        prefix: '',\n        suffix: ''\n      }, exportOpts, result, {\n        layer: i,\n        totalLayers: layerList.length\n      });\n\n      // If export is explicitly not saving, make sure nothing saves\n      // Otherwise default to the layer save option, or fallback to true\n      const saveParam = exportOpts.save === false ? false : result.save;\n      curOpt.save = saveParam !== false;\n\n      // Resolve a full filename from all the options\n      curOpt.filename = resolveFilename(curOpt);\n\n      // Clean up some parameters that may be ambiguous to the user\n      delete curOpt.encoding;\n      delete curOpt.encodingQuality;\n\n      // Clean it up further by just removing undefined values\n      for (let k in curOpt) {\n        if (typeof curOpt[k] === 'undefined') delete curOpt[k];\n      }\n\n      let savePromise = Promise.resolve({});\n      if (curOpt.save) {\n        // Whether to actually save (download) this fragment\n        const data = curOpt.data;\n        if (curOpt.dataURL) {\n          const dataURL = curOpt.dataURL;\n          savePromise = saveDataURL(dataURL, curOpt);\n        } else {\n          savePromise = saveFile(data, curOpt);\n        }\n      }\n      return savePromise.then(saveResult => {\n        return Object.assign({}, curOpt, saveResult);\n      });\n    })).then(ev => {\n      const savedEvents = ev.filter(e => e.save);\n      if (savedEvents.length > 0) {\n        // Log the saved exports\n        const eventWithOutput = savedEvents.find(e => e.outputName);\n        const isClient = savedEvents.some(e => e.client);\n        const isStreaming = savedEvents.some(e => e.stream);\n        let item;\n        // many files, just log how many were exported\n        if (savedEvents.length > 1) item = savedEvents.length;\n        // in CLI, we know exact path dirname\n        else if (eventWithOutput) item = `${eventWithOutput.outputName}/${savedEvents[0].filename}`;\n        // in browser, we can only know it went to \"browser download folder\"\n        else item = `${savedEvents[0].filename}`;\n        let ofSeq = '';\n        if (exportOpts.sequence) {\n          const hasTotalFrames = isFinite(this.props.totalFrames);\n          ofSeq = hasTotalFrames ? ` (frame ${exportOpts.frame + 1} / ${this.props.totalFrames})` : ` (frame ${exportOpts.frame})`;\n        } else if (savedEvents.length > 1) {\n          ofSeq = ` files`;\n        }\n        const client = isClient ? 'canvas-sketch-cli' : 'canvas-sketch';\n        const action = isStreaming ? 'Streaming into' : 'Exported';\n        console.log(`%c[${client}]%c ${action} %c${item}%c${ofSeq}`, 'color: #8e8e8e;', 'color: initial;', 'font-weight: bold;', 'font-weight: initial;');\n      }\n      if (typeof this.sketch.postExport === 'function') {\n        this.sketch.postExport();\n      }\n      return ev;\n    });\n  }\n\n  _wrapContextScale (cb) {\n    this._preRender();\n    cb(this.props);\n    this._postRender();\n  }\n\n  _preRender () {\n    const props = this.props;\n\n    // Scale context for unit sizing\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.save();\n      if (this.settings.scaleContext !== false) {\n        props.context.scale(props.scaleX, props.scaleY);\n      }\n    } else if (props.p5) {\n      props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);\n    }\n  }\n\n  _postRender () {\n    const props = this.props;\n\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.restore();\n    }\n\n    // Flush by default, this may be revisited at a later point.\n    // We do this to ensure toDataURL can be called immediately after.\n    // Most likely browsers already handle this, so we may revisit this and\n    // remove it if it improves performance without any usability issues.\n    if (props.gl && this.settings.flush !== false && !props.p5) {\n      props.gl.flush();\n    }\n  }\n\n  tick () {\n    if (this.sketch && typeof this.sketch.tick === 'function') {\n      this._preRender();\n      this.sketch.tick(this.props);\n      this._postRender();\n    }\n  }\n\n  render () {\n    if (this.props.p5) {\n      this._lastRedrawResult = undefined;\n      this.props.p5.redraw();\n      return this._lastRedrawResult;\n    } else {\n      return this.submitDrawCall();\n    }\n  }\n\n  submitDrawCall () {\n    if (!this.sketch) return;\n\n    const props = this.props;\n    this._preRender();\n\n    let drawResult;\n\n    if (typeof this.sketch === 'function') {\n      drawResult = this.sketch(props);\n    } else if (typeof this.sketch.render === 'function') {\n      drawResult = this.sketch.render(props);\n    }\n\n    this._postRender();\n\n    return drawResult;\n  }\n\n  update (opt = {}) {\n    // Currently update() is only focused on resizing,\n    // but later we will support other options like switching\n    // frames and such.\n    const notYetSupported = [\n      'animate'\n    ];\n\n    Object.keys(opt).forEach(key => {\n      if (notYetSupported.indexOf(key) >= 0) {\n        throw new Error(`Sorry, the { ${key} } option is not yet supported with update().`);\n      }\n    });\n\n    const oldCanvas = this._settings.canvas;\n    const oldContext = this._settings.context;\n\n    // Merge new options into settings\n    for (let key in opt) {\n      const value = opt[key];\n      if (typeof value !== 'undefined') { // ignore undefined\n        this._settings[key] = value;\n      }\n    }\n\n    // Merge in time props\n    const timeOpts = Object.assign({}, this._settings, opt);\n    if ('time' in opt && 'frame' in opt) throw new Error('You should specify { time } or { frame } but not both');\n    else if ('time' in opt) delete timeOpts.frame;\n    else if ('frame' in opt) delete timeOpts.time;\n    if ('duration' in opt && 'totalFrames' in opt) throw new Error('You should specify { duration } or { totalFrames } but not both');\n    else if ('duration' in opt) delete timeOpts.totalFrames;\n    else if ('totalFrames' in opt) delete timeOpts.duration;\n\n    // Merge in user data without copying\n    if ('data' in opt) this._props.data = opt.data;\n\n    const timeProps = this.getTimeProps(timeOpts);\n    Object.assign(this._props, timeProps);\n\n    // If either canvas or context is changed, we should re-update\n    if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {\n      const { canvas, context } = createCanvas(this._settings);\n\n      this.props.canvas = canvas;\n      this.props.context = context;\n\n      // Delete or add a 'gl' prop for convenience\n      this._setupGLKey();\n\n      // Re-mount the new canvas if it has no parent\n      this._appendCanvasIfNeeded();\n    }\n\n    // Special case to support P5.js\n    if (opt.p5 && typeof opt.p5 !== 'function') {\n      this.props.p5 = opt.p5;\n      this.props.p5.draw = () => {\n        if (this._isP5Resizing) return;\n        this._lastRedrawResult = this.submitDrawCall();\n      };\n    }\n\n    // Update playing state if necessary\n    if ('playing' in opt) {\n      if (opt.playing) this.play();\n      else this.pause();\n    }\n\n    checkSettings(this._settings);\n\n    // Draw new frame\n    this.resize();\n    this.render();\n    return this.props;\n  }\n\n  resize () {\n    const oldSizes = this._getSizeProps();\n\n    const settings = this.settings;\n    const props = this.props;\n\n    // Recompute new properties based on current setup\n    const newProps = resizeCanvas(props, settings);\n\n    // Assign to current props\n    Object.assign(this._props, newProps);\n\n    // Now we actually update the canvas width/height and style props\n    const {\n      pixelRatio,\n      canvasWidth,\n      canvasHeight,\n      styleWidth,\n      styleHeight\n    } = this.props;\n\n    // Update canvas settings\n    const canvas = this.props.canvas;\n    if (canvas && settings.resizeCanvas !== false) {\n      if (props.p5) {\n        // P5.js specific edge case\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n          this._isP5Resizing = true;\n          // This causes a re-draw :\\ so we ignore draws in the mean time... sorta hacky\n          props.p5.pixelDensity(pixelRatio);\n          props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);\n          this._isP5Resizing = false;\n        }\n      } else {\n        // Force canvas size\n        if (canvas.width !== canvasWidth) canvas.width = canvasWidth;\n        if (canvas.height !== canvasHeight) canvas.height = canvasHeight;\n      }\n      // Update canvas style\n      if (isBrowser() && settings.styleCanvas !== false) {\n        canvas.style.width = `${styleWidth}px`;\n        canvas.style.height = `${styleHeight}px`;\n      }\n    }\n\n    const newSizes = this._getSizeProps();\n    let changed = !deepEqual(oldSizes, newSizes);\n    if (changed) {\n      this._sizeChanged();\n    }\n    return changed;\n  }\n\n  _sizeChanged () {\n    // Send resize event to sketch\n    if (this.sketch && typeof this.sketch.resize === 'function') {\n      this.sketch.resize(this.props);\n    }\n  }\n\n  animate () {\n    if (!this.props.playing) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Animation in Node.js is not yet supported');\n      return;\n    }\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n\n    let now = rightNow();\n\n    const fps = this.props.fps;\n    const frameIntervalMS = 1000 / fps;\n    let deltaTimeMS = now - this._lastTime;\n\n    const duration = this.props.duration;\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n\n    let isNewFrame = true;\n    const playbackRate = this.settings.playbackRate;\n    if (playbackRate === 'fixed') {\n      deltaTimeMS = frameIntervalMS;\n    } else if (playbackRate === 'throttle') {\n      if (deltaTimeMS > frameIntervalMS) {\n        now = now - (deltaTimeMS % frameIntervalMS);\n        this._lastTime = now;\n      } else {\n        isNewFrame = false;\n      }\n    } else {\n      this._lastTime = now;\n    }\n\n    const deltaTime = deltaTimeMS / 1000;\n    let newTime = this.props.time + deltaTime * this.props.timeScale;\n\n    // Handle reverse time scale\n    if (newTime < 0 && hasDuration) {\n      newTime = duration + newTime;\n    }\n\n    // Re-start animation\n    let isFinished = false;\n    let isLoopStart = false;\n\n    const looping = this.settings.loop !== false;\n\n    if (hasDuration && newTime >= duration) {\n      // Re-start animation\n      if (looping) {\n        isNewFrame = true;\n        newTime = newTime % duration;\n        isLoopStart = true;\n      } else {\n        isNewFrame = false;\n        newTime = duration;\n        isFinished = true;\n      }\n\n      this._signalEnd();\n    }\n\n    if (isNewFrame) {\n      this.props.deltaTime = deltaTime;\n      this.props.time = newTime;\n      this.props.playhead = this._computePlayhead(newTime, duration);\n      const lastFrame = this.props.frame;\n      this.props.frame = this._computeCurrentFrame();\n      if (isLoopStart) this._signalBegin();\n      if (lastFrame !== this.props.frame) this.tick();\n      this.render();\n      this.props.deltaTime = 0;\n    }\n\n    if (isFinished) {\n      this.pause();\n    }\n  }\n\n  dispatch (cb) {\n    if (typeof cb !== 'function') throw new Error('must pass function into dispatch()');\n    cb(this.props);\n    this.render();\n  }\n\n  mount () {\n    this._appendCanvasIfNeeded();\n  }\n\n  unmount () {\n    if (isBrowser()) {\n      window.removeEventListener('resize', this._resizeHandler);\n      this._keyboardShortcuts.detach();\n    }\n    if (this.props.canvas.parentElement) {\n      this.props.canvas.parentElement.removeChild(this.props.canvas);\n    }\n  }\n\n  _appendCanvasIfNeeded () {\n    if (!isBrowser()) return;\n    if (this.settings.parent !== false && (this.props.canvas && !this.props.canvas.parentElement)) {\n      const defaultParent = this.settings.parent || document.body;\n      defaultParent.appendChild(this.props.canvas);\n    }\n  }\n\n  _setupGLKey () {\n    if (this.props.context) {\n      if (isWebGLContext(this.props.context)) {\n        this._props.gl = this.props.context;\n      } else {\n        delete this._props.gl;\n      }\n    }\n  }\n\n  getTimeProps (settings = {}) {\n    // Get timing data\n    let duration = settings.duration;\n    let totalFrames = settings.totalFrames;\n    const timeScale = defined(settings.timeScale, 1);\n    const fps = defined(settings.fps, 24);\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    const hasTotalFrames = typeof totalFrames === 'number' && isFinite(totalFrames);\n\n    const totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;\n    const durationFromTotalFrames = hasTotalFrames ? (totalFrames / fps) : undefined;\n    if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {\n      throw new Error('You should specify either duration or totalFrames, but not both. Or, they must match exactly.');\n    }\n\n    if (typeof settings.dimensions === 'undefined' && typeof settings.units !== 'undefined') {\n      console.warn(`You've specified a { units } setting but no { dimension }, so the units will be ignored.`);\n    }\n\n    totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);\n    duration = defined(duration, durationFromTotalFrames, Infinity);\n\n    const startTime = settings.time;\n    const startFrame = settings.frame;\n    const hasStartTime = typeof startTime === 'number' && isFinite(startTime);\n    const hasStartFrame = typeof startFrame === 'number' && isFinite(startFrame);\n\n    // start at zero unless user specifies frame or time (but not both mismatched)\n    let time = 0;\n    let frame = 0;\n    let playhead = 0;\n    if (hasStartTime && hasStartFrame) {\n      throw new Error('You should specify either start frame or time, but not both.');\n    } else if (hasStartTime) {\n      // User specifies time, we infer frames from FPS\n      time = startTime;\n      playhead = this._computePlayhead(time, duration);\n      frame = this._computeFrame(\n        playhead, time,\n        totalFrames, fps\n      );\n    } else if (hasStartFrame) {\n      // User specifies frame number, we infer time from FPS\n      frame = startFrame;\n      time = frame / fps;\n      playhead = this._computePlayhead(time, duration);\n    }\n\n    return {\n      playhead,\n      time,\n      frame,\n      duration,\n      totalFrames,\n      fps,\n      timeScale\n    };\n  }\n\n  setup (settings = {}) {\n    if (this.sketch) throw new Error('Multiple setup() calls not yet supported.');\n\n    this._settings = Object.assign({}, settings, this._settings);\n\n    checkSettings(this._settings);\n\n    // Get initial canvas & context\n    const { context, canvas } = createCanvas(this._settings);\n\n    const timeProps = this.getTimeProps(this._settings);\n\n    // Initial render state features\n    this._props = {\n      ...timeProps,\n      canvas,\n      context,\n      deltaTime: 0,\n      started: false,\n      exporting: false,\n      playing: false,\n      recording: false,\n      settings: this.settings,\n      data: this.settings.data,\n\n      // Export some specific actions to the sketch\n      render: () => this.render(),\n      togglePlay: () => this.togglePlay(),\n      dispatch: (cb) => this.dispatch(cb),\n      tick: () => this.tick(),\n      resize: () => this.resize(),\n      update: (opt) => this.update(opt),\n      exportFrame: opt => this.exportFrame(opt),\n      record: () => this.record(),\n      play: () => this.play(),\n      pause: () => this.pause(),\n      stop: () => this.stop()\n    };\n\n    // For WebGL sketches, a gl variable reads a bit better\n    this._setupGLKey();\n\n    // Trigger initial resize now so that canvas is already sized\n    // by the time we load the sketch\n    this.resize();\n  }\n\n  loadAndRun (canvasSketch, newSettings) {\n    return this.load(canvasSketch, newSettings).then(() => {\n      this.run();\n      return this;\n    });\n  }\n\n  unload () {\n    this.pause();\n    if (!this.sketch) return;\n    if (typeof this.sketch.unload === 'function') {\n      this._wrapContextScale(props => this.sketch.unload(props));\n    }\n    this._sketch = null;\n  }\n\n  destroy () {\n    this.unload();\n    this.unmount();\n  }\n\n  load (createSketch, newSettings) {\n    // User didn't specify a function\n    if (typeof createSketch !== 'function') {\n      throw new Error('The function must take in a function as the first parameter. Example:\\n  canvasSketcher(() => { ... }, settings)');\n    }\n\n    if (this.sketch) {\n      this.unload();\n    }\n\n    if (typeof newSettings !== 'undefined') {\n      this.update(newSettings);\n    }\n\n    // This is a bit of a tricky case; we set up the auto-scaling here\n    // in case the user decides to render anything to the context *before* the\n    // render() function... However, users should instead use begin() function for that.\n    this._preRender();\n\n    let preload = Promise.resolve();\n\n    // Because of P5.js's unusual structure, we have to do a bit of\n    // library-specific changes to support it properly.\n    if (this.settings.p5) {\n      if (!isBrowser()) {\n        throw new Error('[canvas-sketch] ERROR: Using p5.js in Node.js is not supported');\n      }\n      preload = new Promise(resolve => {\n        let P5Constructor = this.settings.p5;\n        let preload;\n        if (P5Constructor.p5) {\n          preload = P5Constructor.preload;\n          P5Constructor = P5Constructor.p5;\n        }\n\n        // The sketch setup; disable loop, set sizing, etc.\n        const p5Sketch = p5 => {\n          // Hook in preload if necessary\n          if (preload) p5.preload = () => preload(p5);\n          p5.setup = () => {\n            const props = this.props;\n            const isGL = this.settings.context === 'webgl';\n            const renderer = isGL ? p5.WEBGL : p5.P2D;\n            p5.noLoop();\n            p5.pixelDensity(props.pixelRatio);\n            p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);\n            if (isGL && this.settings.attributes) {\n              p5.setAttributes(this.settings.attributes);\n            }\n\n            this.update({ p5, canvas: p5.canvas, context: p5._renderer.drawingContext });\n            resolve();\n          };\n        };\n\n        // Support global and instance P5.js modes\n        if (typeof P5Constructor === 'function') {\n          new P5Constructor(p5Sketch);\n        } else {\n          if (typeof window.createCanvas !== 'function') {\n            throw new Error(\"{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\\nnew p5(); // <-- attaches to global scope\");\n          }\n          p5Sketch(window);\n        }\n      });\n    }\n\n    return preload.then(() => {\n      // Load the user's sketch\n      let loader = createSketch(this.props);\n      if (!isPromise(loader)) {\n        loader = Promise.resolve(loader);\n      }\n      return loader;\n    }).then(sketch => {\n      if (!sketch) sketch = {};\n      this._sketch = sketch;\n\n      // Once the sketch is loaded we can add the events\n      if (isBrowser()) {\n        this._keyboardShortcuts.attach();\n        window.addEventListener('resize', this._resizeHandler);\n      }\n\n      this._postRender();\n\n      // The initial resize() in the constructor will not have\n      // triggered a resize() event on the sketch, since it was before\n      // the sketch was loaded. So we send the signal here, allowing\n      // users to react to the initial size before first render.\n      this._sizeChanged();\n      return this;\n    }).catch(err => {\n      console.warn('Could not start sketch, the async loading function rejected with an error:\\n    Error: ' + err.message);\n      throw err;\n    });\n  }\n}\n\nexport default SketchManager;\n","import { getClientAPI } from '../util';\n\nexport default function (opt = {}) {\n  const handler = ev => {\n    if (!opt.enabled()) return;\n\n    const client = getClientAPI();\n    if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + S\n      ev.preventDefault();\n      opt.save(ev);\n    } else if (ev.keyCode === 32) {\n      // Space\n      // TODO: what to do with this? keep it, or remove it?\n      opt.togglePlay(ev);\n    } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + K, only when canvas-sketch-cli is used\n      ev.preventDefault();\n      opt.commit(ev);\n    }\n  };\n\n  const attach = () => {\n    window.addEventListener('keydown', handler);\n  };\n\n  const detach = () => {\n    window.removeEventListener('keydown', handler);\n  };\n\n  return {\n    attach,\n    detach\n  };\n}\n","import SketchManager from './core/SketchManager';\nimport PaperSizes from './paper-sizes';\nimport { getClientAPI, defined } from './util';\n\nconst CACHE = 'hot-id-cache';\nconst runtimeCollisions = [];\n\nfunction isHotReload () {\n  const client = getClientAPI();\n  return client && client.hot;\n}\n\nfunction cacheGet (id) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  return client[CACHE][id];\n}\n\nfunction cachePut (id, data) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  client[CACHE][id] = data;\n}\n\nfunction getTimeProp (oldManager, newSettings) {\n  // Static sketches ignore the time persistency\n  return newSettings.animate ? { time: oldManager.props.time } : undefined;\n}\n\nfunction canvasSketch (sketch, settings = {}) {\n  if (settings.p5) {\n    if (settings.canvas || (settings.context && typeof settings.context !== 'string')) {\n      throw new Error(`In { p5 } mode, you can't pass your own canvas or context, unless the context is a \"webgl\" or \"2d\" string`);\n    }\n\n    // Do not create a canvas on startup, since P5.js does that for us\n    const context = typeof settings.context === 'string' ? settings.context : false;\n    settings = Object.assign({}, settings, { canvas: false, context });\n  }\n\n  const isHot = isHotReload();\n  let hotID;\n  if (isHot) {\n    // Use a magic name by default, force user to define each sketch if they\n    // require more than one in an application. Open to other ideas on how to tackle\n    // this as well...\n    hotID = defined(settings.id, '$__DEFAULT_CANVAS_SKETCH_ID__$');\n  }\n  let isInjecting = isHot && typeof hotID === 'string';\n\n  if (isInjecting && runtimeCollisions.includes(hotID)) {\n    console.warn(`Warning: You have multiple calls to canvasSketch() in --hot mode. You must pass unique { id } strings in settings to enable hot reload across multiple sketches. `, hotID);\n    isInjecting = false;\n  }\n\n  let preload = Promise.resolve();\n\n  if (isInjecting) {\n    // Mark this as already spotted in this runtime instance\n    runtimeCollisions.push(hotID);\n\n    const previousData = cacheGet(hotID);\n    if (previousData) {\n      const next = () => {\n        // Grab new props from old sketch instance\n        const newProps = getTimeProp(previousData.manager, settings);\n        // Destroy the old instance\n        previousData.manager.destroy();\n        // Pass along new props\n        return newProps;\n      };\n\n      // Move along the next data...\n      preload = previousData.load.then(next).catch(next);\n    }\n  }\n\n  return preload.then(newProps => {\n    const manager = new SketchManager();\n    let result;\n    if (sketch) {\n      // Merge with incoming data\n      settings = Object.assign({}, settings, newProps);\n\n      // Apply settings and create a canvas\n      manager.setup(settings);\n\n      // Mount to DOM\n      manager.mount();\n\n      // load the sketch first\n      result = manager.loadAndRun(sketch);\n    } else {\n      result = Promise.resolve(manager);\n    }\n    if (isInjecting) {\n      cachePut(hotID, { load: result, manager });\n    }\n    return result;\n  });\n}\n\n// TODO: Figure out a nice way to export things.\ncanvasSketch.canvasSketch = canvasSketch;\ncanvasSketch.PaperSizes = PaperSizes;\n\nexport default canvasSketch;\n","/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\tconst REVISION = '127';\n\tconst MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tconst TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tconst CullFaceNone = 0;\n\tconst CullFaceBack = 1;\n\tconst CullFaceFront = 2;\n\tconst CullFaceFrontBack = 3;\n\tconst BasicShadowMap = 0;\n\tconst PCFShadowMap = 1;\n\tconst PCFSoftShadowMap = 2;\n\tconst VSMShadowMap = 3;\n\tconst FrontSide = 0;\n\tconst BackSide = 1;\n\tconst DoubleSide = 2;\n\tconst FlatShading = 1;\n\tconst SmoothShading = 2;\n\tconst NoBlending = 0;\n\tconst NormalBlending = 1;\n\tconst AdditiveBlending = 2;\n\tconst SubtractiveBlending = 3;\n\tconst MultiplyBlending = 4;\n\tconst CustomBlending = 5;\n\tconst AddEquation = 100;\n\tconst SubtractEquation = 101;\n\tconst ReverseSubtractEquation = 102;\n\tconst MinEquation = 103;\n\tconst MaxEquation = 104;\n\tconst ZeroFactor = 200;\n\tconst OneFactor = 201;\n\tconst SrcColorFactor = 202;\n\tconst OneMinusSrcColorFactor = 203;\n\tconst SrcAlphaFactor = 204;\n\tconst OneMinusSrcAlphaFactor = 205;\n\tconst DstAlphaFactor = 206;\n\tconst OneMinusDstAlphaFactor = 207;\n\tconst DstColorFactor = 208;\n\tconst OneMinusDstColorFactor = 209;\n\tconst SrcAlphaSaturateFactor = 210;\n\tconst NeverDepth = 0;\n\tconst AlwaysDepth = 1;\n\tconst LessDepth = 2;\n\tconst LessEqualDepth = 3;\n\tconst EqualDepth = 4;\n\tconst GreaterEqualDepth = 5;\n\tconst GreaterDepth = 6;\n\tconst NotEqualDepth = 7;\n\tconst MultiplyOperation = 0;\n\tconst MixOperation = 1;\n\tconst AddOperation = 2;\n\tconst NoToneMapping = 0;\n\tconst LinearToneMapping = 1;\n\tconst ReinhardToneMapping = 2;\n\tconst CineonToneMapping = 3;\n\tconst ACESFilmicToneMapping = 4;\n\tconst CustomToneMapping = 5;\n\tconst UVMapping = 300;\n\tconst CubeReflectionMapping = 301;\n\tconst CubeRefractionMapping = 302;\n\tconst EquirectangularReflectionMapping = 303;\n\tconst EquirectangularRefractionMapping = 304;\n\tconst CubeUVReflectionMapping = 306;\n\tconst CubeUVRefractionMapping = 307;\n\tconst RepeatWrapping = 1000;\n\tconst ClampToEdgeWrapping = 1001;\n\tconst MirroredRepeatWrapping = 1002;\n\tconst NearestFilter = 1003;\n\tconst NearestMipmapNearestFilter = 1004;\n\tconst NearestMipMapNearestFilter = 1004;\n\tconst NearestMipmapLinearFilter = 1005;\n\tconst NearestMipMapLinearFilter = 1005;\n\tconst LinearFilter = 1006;\n\tconst LinearMipmapNearestFilter = 1007;\n\tconst LinearMipMapNearestFilter = 1007;\n\tconst LinearMipmapLinearFilter = 1008;\n\tconst LinearMipMapLinearFilter = 1008;\n\tconst UnsignedByteType = 1009;\n\tconst ByteType = 1010;\n\tconst ShortType = 1011;\n\tconst UnsignedShortType = 1012;\n\tconst IntType = 1013;\n\tconst UnsignedIntType = 1014;\n\tconst FloatType = 1015;\n\tconst HalfFloatType = 1016;\n\tconst UnsignedShort4444Type = 1017;\n\tconst UnsignedShort5551Type = 1018;\n\tconst UnsignedShort565Type = 1019;\n\tconst UnsignedInt248Type = 1020;\n\tconst AlphaFormat = 1021;\n\tconst RGBFormat = 1022;\n\tconst RGBAFormat = 1023;\n\tconst LuminanceFormat = 1024;\n\tconst LuminanceAlphaFormat = 1025;\n\tconst RGBEFormat = RGBAFormat;\n\tconst DepthFormat = 1026;\n\tconst DepthStencilFormat = 1027;\n\tconst RedFormat = 1028;\n\tconst RedIntegerFormat = 1029;\n\tconst RGFormat = 1030;\n\tconst RGIntegerFormat = 1031;\n\tconst RGBIntegerFormat = 1032;\n\tconst RGBAIntegerFormat = 1033;\n\tconst RGB_S3TC_DXT1_Format = 33776;\n\tconst RGBA_S3TC_DXT1_Format = 33777;\n\tconst RGBA_S3TC_DXT3_Format = 33778;\n\tconst RGBA_S3TC_DXT5_Format = 33779;\n\tconst RGB_PVRTC_4BPPV1_Format = 35840;\n\tconst RGB_PVRTC_2BPPV1_Format = 35841;\n\tconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\tconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\tconst RGB_ETC1_Format = 36196;\n\tconst RGB_ETC2_Format = 37492;\n\tconst RGBA_ETC2_EAC_Format = 37496;\n\tconst RGBA_ASTC_4x4_Format = 37808;\n\tconst RGBA_ASTC_5x4_Format = 37809;\n\tconst RGBA_ASTC_5x5_Format = 37810;\n\tconst RGBA_ASTC_6x5_Format = 37811;\n\tconst RGBA_ASTC_6x6_Format = 37812;\n\tconst RGBA_ASTC_8x5_Format = 37813;\n\tconst RGBA_ASTC_8x6_Format = 37814;\n\tconst RGBA_ASTC_8x8_Format = 37815;\n\tconst RGBA_ASTC_10x5_Format = 37816;\n\tconst RGBA_ASTC_10x6_Format = 37817;\n\tconst RGBA_ASTC_10x8_Format = 37818;\n\tconst RGBA_ASTC_10x10_Format = 37819;\n\tconst RGBA_ASTC_12x10_Format = 37820;\n\tconst RGBA_ASTC_12x12_Format = 37821;\n\tconst RGBA_BPTC_Format = 36492;\n\tconst SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tconst SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tconst SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tconst SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tconst SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tconst SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tconst SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tconst SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tconst SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tconst SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tconst SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tconst SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tconst SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tconst SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tconst LoopOnce = 2200;\n\tconst LoopRepeat = 2201;\n\tconst LoopPingPong = 2202;\n\tconst InterpolateDiscrete = 2300;\n\tconst InterpolateLinear = 2301;\n\tconst InterpolateSmooth = 2302;\n\tconst ZeroCurvatureEnding = 2400;\n\tconst ZeroSlopeEnding = 2401;\n\tconst WrapAroundEnding = 2402;\n\tconst NormalAnimationBlendMode = 2500;\n\tconst AdditiveAnimationBlendMode = 2501;\n\tconst TrianglesDrawMode = 0;\n\tconst TriangleStripDrawMode = 1;\n\tconst TriangleFanDrawMode = 2;\n\tconst LinearEncoding = 3000;\n\tconst sRGBEncoding = 3001;\n\tconst GammaEncoding = 3007;\n\tconst RGBEEncoding = 3002;\n\tconst LogLuvEncoding = 3003;\n\tconst RGBM7Encoding = 3004;\n\tconst RGBM16Encoding = 3005;\n\tconst RGBDEncoding = 3006;\n\tconst BasicDepthPacking = 3200;\n\tconst RGBADepthPacking = 3201;\n\tconst TangentSpaceNormalMap = 0;\n\tconst ObjectSpaceNormalMap = 1;\n\tconst ZeroStencilOp = 0;\n\tconst KeepStencilOp = 7680;\n\tconst ReplaceStencilOp = 7681;\n\tconst IncrementStencilOp = 7682;\n\tconst DecrementStencilOp = 7683;\n\tconst IncrementWrapStencilOp = 34055;\n\tconst DecrementWrapStencilOp = 34056;\n\tconst InvertStencilOp = 5386;\n\tconst NeverStencilFunc = 512;\n\tconst LessStencilFunc = 513;\n\tconst EqualStencilFunc = 514;\n\tconst LessEqualStencilFunc = 515;\n\tconst GreaterStencilFunc = 516;\n\tconst NotEqualStencilFunc = 517;\n\tconst GreaterEqualStencilFunc = 518;\n\tconst AlwaysStencilFunc = 519;\n\tconst StaticDrawUsage = 35044;\n\tconst DynamicDrawUsage = 35048;\n\tconst StreamDrawUsage = 35040;\n\tconst StaticReadUsage = 35045;\n\tconst DynamicReadUsage = 35049;\n\tconst StreamReadUsage = 35041;\n\tconst StaticCopyUsage = 35046;\n\tconst DynamicCopyUsage = 35050;\n\tconst StreamCopyUsage = 35042;\n\tconst GLSL1 = '100';\n\tconst GLSL3 = '300 es';\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tfunction EventDispatcher() {}\n\n\tObject.assign(EventDispatcher.prototype, {\n\t\taddEventListener: function (type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tconst listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t},\n\t\thasEventListener: function (type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tconst listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t},\n\t\tremoveEventListener: function (type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdispatchEvent: function (event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\n\t\t\t\tevent.target = null;\n\t\t\t}\n\t\t}\n\t});\n\n\tconst _lut = [];\n\n\tfor (let i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tlet _seed = 1234567;\n\tconst MathUtils = {\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\t\tgenerateUUID: function () {\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\t\t\tconst d0 = Math.random() * 0xffffffff | 0;\n\t\t\tconst d1 = Math.random() * 0xffffffff | 0;\n\t\t\tconst d2 = Math.random() * 0xffffffff | 0;\n\t\t\tconst d3 = Math.random() * 0xffffffff | 0;\n\t\t\tconst uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\t\treturn uuid.toUpperCase();\n\t\t},\n\t\tclamp: function (value, min, max) {\n\t\t\treturn Math.max(min, Math.min(max, value));\n\t\t},\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\teuclideanModulo: function (n, m) {\n\t\t\treturn (n % m + m) % m;\n\t\t},\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\tmapLinear: function (x, a1, a2, b1, b2) {\n\t\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t\t},\n\t\t// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\t\tinverseLerp: function (x, y, value) {\n\t\t\tif (x !== y) {\n\t\t\t\treturn (value - x) / (y - x);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t},\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\t\tlerp: function (x, y, t) {\n\t\t\treturn (1 - t) * x + t * y;\n\t\t},\n\t\t// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\t\tdamp: function (x, y, lambda, dt) {\n\t\t\treturn MathUtils.lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t\t},\n\t\t// https://www.desmos.com/calculator/vcsjnyz7x4\n\t\tpingpong: function (x, length = 1) {\n\t\t\treturn length - Math.abs(MathUtils.euclideanModulo(x, length * 2) - length);\n\t\t},\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\t\tsmoothstep: function (x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * (3 - 2 * x);\n\t\t},\n\t\tsmootherstep: function (x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t\t},\n\t\t// Random integer from <low, high> interval\n\t\trandInt: function (low, high) {\n\t\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t\t},\n\t\t// Random float from <low, high> interval\n\t\trandFloat: function (low, high) {\n\t\t\treturn low + Math.random() * (high - low);\n\t\t},\n\t\t// Random float from <-range/2, range/2> interval\n\t\trandFloatSpread: function (range) {\n\t\t\treturn range * (0.5 - Math.random());\n\t\t},\n\t\t// Deterministic pseudo-random float in the interval [ 0, 1 ]\n\t\tseededRandom: function (s) {\n\t\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t\t_seed = _seed * 16807 % 2147483647;\n\t\t\treturn (_seed - 1) / 2147483646;\n\t\t},\n\t\tdegToRad: function (degrees) {\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\t\t},\n\t\tradToDeg: function (radians) {\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\t\t},\n\t\tisPowerOfTwo: function (value) {\n\t\t\treturn (value & value - 1) === 0 && value !== 0;\n\t\t},\n\t\tceilPowerOfTwo: function (value) {\n\t\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t\t},\n\t\tfloorPowerOfTwo: function (value) {\n\t\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t\t},\n\t\tsetQuaternionFromProperEuler: function (q, a, b, c, order) {\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\t\t\tconst cos = Math.cos;\n\t\t\tconst sin = Math.sin;\n\t\t\tconst c2 = cos(b / 2);\n\t\t\tconst s2 = sin(b / 2);\n\t\t\tconst c13 = cos((a + c) / 2);\n\t\t\tconst s13 = sin((a + c) / 2);\n\t\t\tconst c1_3 = cos((a - c) / 2);\n\t\t\tconst s1_3 = sin((a - c) / 2);\n\t\t\tconst c3_1 = cos((c - a) / 2);\n\t\t\tconst s3_1 = sin((c - a) / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYX':\n\t\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZY':\n\t\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXZ':\n\t\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZX':\n\t\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXY':\n\t\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYZ':\n\t\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\t\t}\n\t};\n\n\tclass Vector2 {\n\t\tconstructor(x = 0, y = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.x;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.x = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.y;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.y = value;\n\t\t}\n\n\t\tset(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t}\n\n\t\tcross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tangle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tconst angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateAround(center, angle) {\n\t\t\tconst c = Math.cos(angle),\n\t\t\t\t\t\ts = Math.sin(angle);\n\t\t\tconst x = this.x - center.x;\n\t\t\tconst y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector2.prototype.isVector2 = true;\n\n\tclass Matrix3 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix4(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\t\ta13 = ae[6];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\t\ta23 = ae[7];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\t\ta33 = ae[8];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[3],\n\t\t\t\t\t\tb13 = be[6];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[4],\n\t\t\t\t\t\tb23 = be[7];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[5],\n\t\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst a = te[0],\n\t\t\t\t\t\tb = te[1],\n\t\t\t\t\t\tc = te[2],\n\t\t\t\t\t\td = te[3],\n\t\t\t\t\t\te = te[4],\n\t\t\t\t\t\tf = te[5],\n\t\t\t\t\t\tg = te[6],\n\t\t\t\t\t\th = te[7],\n\t\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t}\n\n\t\tinvert() {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn12 = te[3],\n\t\t\t\t\t\tn22 = te[4],\n\t\t\t\t\t\tn32 = te[5],\n\t\t\t\t\t\tn13 = te[6],\n\t\t\t\t\t\tn23 = te[7],\n\t\t\t\t\t\tn33 = te[8],\n\t\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranspose() {\n\t\t\tlet tmp;\n\t\t\tconst m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).invert().transpose();\n\t\t}\n\n\t\ttransposeIntoArray(r) {\n\t\t\tconst m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tconst c = Math.cos(rotation);\n\t\t\tconst s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(sx, sy) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t}\n\n\t\trotate(theta) {\n\t\t\tconst c = Math.cos(theta);\n\t\t\tconst s = Math.sin(theta);\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = te[0],\n\t\t\t\t\t\ta12 = te[3],\n\t\t\t\t\t\ta13 = te[6];\n\t\t\tconst a21 = te[1],\n\t\t\t\t\t\ta22 = te[4],\n\t\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(tx, ty) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t}\n\n\t}\n\n\tMatrix3.prototype.isMatrix3 = true;\n\n\tlet _canvas;\n\n\tconst ImageUtils = {\n\t\tgetDataURL: function (image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tlet canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tconst context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\tconsole.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\t};\n\n\tlet textureId = 0;\n\n\tclass Texture extends EventDispatcher {\n\t\tconstructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: textureId++\n\t\t\t});\n\t\t\tthis.uuid = MathUtils.generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.image = image;\n\t\t\tthis.mipmaps = [];\n\t\t\tthis.mapping = mapping;\n\t\t\tthis.wrapS = wrapS;\n\t\t\tthis.wrapT = wrapT;\n\t\t\tthis.magFilter = magFilter;\n\t\t\tthis.minFilter = minFilter;\n\t\t\tthis.anisotropy = anisotropy;\n\t\t\tthis.format = format;\n\t\t\tthis.internalFormat = null;\n\t\t\tthis.type = type;\n\t\t\tthis.offset = new Vector2(0, 0);\n\t\t\tthis.repeat = new Vector2(1, 1);\n\t\t\tthis.center = new Vector2(0, 0);\n\t\t\tthis.rotation = 0;\n\t\t\tthis.matrixAutoUpdate = true;\n\t\t\tthis.matrix = new Matrix3();\n\t\t\tthis.generateMipmaps = true;\n\t\t\tthis.premultiplyAlpha = false;\n\t\t\tthis.flipY = true;\n\t\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t\t//\n\t\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\t\tthis.encoding = encoding;\n\t\t\tthis.version = 0;\n\t\t\tthis.onUpdate = null;\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tconst output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tconst image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tlet url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (let i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\ttransformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype.isTexture = true;\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Vector4 {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.z;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.z = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.w;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.w = value;\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z,\n\t\t\t\t\t\tw = this.w;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tsetAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tconst s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tlet angle, x, y, z; // variables for result\n\n\t\t\tconst epsilon = 0.01,\n\t\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tconst xx = (m11 + 1) / 2;\n\t\t\t\tconst yy = (m22 + 1) / 2;\n\t\t\t\tconst zz = (m33 + 1) / 2;\n\t\t\t\tconst xy = (m12 + m21) / 4;\n\t\t\t\tconst xz = (m13 + m31) / 4;\n\t\t\t\tconst yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tlet s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector4.prototype.isVector4 = true;\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tclass WebGLRenderTarget extends EventDispatcher {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper();\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = 1;\n\t\t\tthis.scissor = new Vector4(0, 0, width, height);\n\t\t\tthis.scissorTest = false;\n\t\t\tthis.viewport = new Vector4(0, 0, width, height);\n\t\t\toptions = options || {};\n\t\t\tthis.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.image = {};\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = 1;\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t}\n\n\t\tsetTexture(texture) {\n\t\t\ttexture.image = {\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.height,\n\t\t\t\tdepth: this.depth\n\t\t\t};\n\t\t\tthis.texture = texture;\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.texture.image.depth = depth;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\n\tclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper(width, height, options);\n\t\t\tthis.samples = 4;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy.call(this, source);\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\n\tclass Quaternion {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tstatic slerp(qa, qb, qm, t) {\n\t\t\tconsole.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');\n\t\t\treturn qm.slerpQuaternions(qa, qb, t);\n\t\t}\n\n\t\tstatic slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tlet x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1 + 0],\n\t\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (t === 0) {\n\t\t\t\tdst[dstOffset + 0] = x0;\n\t\t\t\tdst[dstOffset + 1] = y0;\n\t\t\t\tdst[dstOffset + 2] = z0;\n\t\t\t\tdst[dstOffset + 3] = w0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (t === 1) {\n\t\t\t\tdst[dstOffset + 0] = x1;\n\t\t\t\tdst[dstOffset + 1] = y1;\n\t\t\t\tdst[dstOffset + 2] = z1;\n\t\t\t\tdst[dstOffset + 3] = w1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tlet s = 1 - t;\n\t\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tconst sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tconst tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tconst f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t}\n\n\t\tstatic multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tconst x0 = src0[srcOffset0];\n\t\t\tconst y0 = src0[srcOffset0 + 1];\n\t\t\tconst z0 = src0[srcOffset0 + 2];\n\t\t\tconst w0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1];\n\t\t\tconst y1 = src1[srcOffset1 + 1];\n\t\t\tconst z1 = src1[srcOffset1 + 2];\n\t\t\tconst w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget w() {\n\t\t\treturn this._w;\n\t\t}\n\n\t\tset w(value) {\n\t\t\tthis._w = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t}\n\n\t\tcopy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst x = euler._x,\n\t\t\t\t\t\ty = euler._y,\n\t\t\t\t\t\tz = euler._z,\n\t\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tconst cos = Math.cos;\n\t\t\tconst sin = Math.sin;\n\t\t\tconst c1 = cos(x / 2);\n\t\t\tconst c2 = cos(y / 2);\n\t\t\tconst c3 = cos(z / 2);\n\t\t\tconst s1 = sin(x / 2);\n\t\t\tconst s2 = sin(y / 2);\n\t\t\tconst s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tconst halfAngle = angle / 2,\n\t\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10],\n\t\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tconst s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\t\t\t\tthis._w = (m32 - m23) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = (m12 + m21) / s;\n\t\t\t\tthis._z = (m13 + m31) / s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\t\t\t\tthis._w = (m13 - m31) / s;\n\t\t\t\tthis._x = (m12 + m21) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = (m23 + m32) / s;\n\t\t\t} else {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\t\t\t\tthis._w = (m21 - m12) / s;\n\t\t\t\tthis._x = (m13 + m31) / s;\n\t\t\t\tthis._y = (m23 + m32) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tlet r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < Number.EPSILON) {\n\t\t\t\t// vFrom and vTo point in opposite directions\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tangleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n\t\t}\n\n\t\trotateTowards(q, step) {\n\t\t\tconst angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tconst t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t}\n\n\t\tinvert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t}\n\n\t\tconjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\tlet l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t}\n\n\t\tpremultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t}\n\n\t\tmultiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tconst qax = a._x,\n\t\t\t\t\t\tqay = a._y,\n\t\t\t\t\t\tqaz = a._z,\n\t\t\t\t\t\tqaw = a._w;\n\t\t\tconst qbx = b._x,\n\t\t\t\t\t\tqby = b._y,\n\t\t\t\t\t\tqbz = b._z,\n\t\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tconst x = this._x,\n\t\t\t\t\t\ty = this._y,\n\t\t\t\t\t\tz = this._z,\n\t\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tconst s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tconst halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tconst ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerpQuaternions(qa, qb, t) {\n\t\t\tthis.copy(qa).slerp(qb, t);\n\t\t}\n\n\t\tequals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tQuaternion.prototype.isQuaternion = true;\n\n\tclass Vector3 {\n\t\tconstructor(x = 0, y = 0, z = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tset(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n\t\t}\n\n\t\tapplyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tconst w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst qx = q.x,\n\t\t\t\t\t\tqy = q.y,\n\t\t\t\t\t\tqz = q.z,\n\t\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tconst ix = qw * x + qy * z - qz * y;\n\t\t\tconst iy = qw * y + qz * x - qx * z;\n\t\t\tconst iz = qw * z + qx * y - qy * x;\n\t\t\tconst iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t}\n\n\t\tproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t}\n\n\t\tunproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tcross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t}\n\n\t\tcrossVectors(a, b) {\n\t\t\tconst ax = a.x,\n\t\t\t\t\t\tay = a.y,\n\t\t\t\t\t\taz = a.z;\n\t\t\tconst bx = b.x,\n\t\t\t\t\t\tby = b.y,\n\t\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t}\n\n\t\tprojectOnVector(v) {\n\t\t\tconst denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tconst scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t}\n\n\t\tprojectOnPlane(planeNormal) {\n\t\t\t_vector$c.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector$c);\n\t\t}\n\n\t\treflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t}\n\n\t\tangleTo(v) {\n\t\t\tconst denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tconst theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(MathUtils.clamp(theta, -1, 1));\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t}\n\n\t\tsetFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t}\n\n\t\tsetFromSphericalCoords(radius, phi, theta) {\n\t\t\tconst sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t}\n\n\t\tsetFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixPosition(m) {\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixScale(m) {\n\t\t\tconst sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tconst sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tconst sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t}\n\n\t\tsetFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector3.prototype.isVector3 = true;\n\n\tconst _vector$c = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tclass Box3 {\n\t\tconstructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromArray(array) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tconst x = array[i];\n\t\t\t\tconst y = array[i + 1];\n\t\t\t\tconst z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromBufferAttribute(attribute) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tconst x = attribute.getX(i);\n\t\t\t\tconst y = attribute.getY(i);\n\t\t\t\tconst z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box$3.copy(geometry.boundingBox);\n\n\t\t\t\t_box$3.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box$3);\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tlet min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t}\n\n\t\tintersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0$2.subVectors(triangle.a, _center);\n\n\t\t\t_v1$7.subVectors(triangle.b, _center);\n\n\t\t\t_v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1$7, _v0$2);\n\n\t\t\t_f1.subVectors(_v2$3, _v1$7);\n\n\t\t\t_f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tlet axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tgetBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$b).length() * 0.5;\n\t\t\treturn target;\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox3.prototype.isBox3 = true;\n\tconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tconst _vector$b = /*@__PURE__*/new Vector3();\n\n\tconst _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tconst _v0$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$7 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tconst _f0 = /*@__PURE__*/new Vector3();\n\n\tconst _f1 = /*@__PURE__*/new Vector3();\n\n\tconst _f2 = /*@__PURE__*/new Vector3();\n\n\tconst _center = /*@__PURE__*/new Vector3();\n\n\tconst _extents = /*@__PURE__*/new Vector3();\n\n\tconst _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tconst _testAxis = /*@__PURE__*/new Vector3();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tconst r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tconst p0 = v0.dot(_testAxis);\n\t\t\tconst p1 = v1.dot(_testAxis);\n\t\t\tconst p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tconst _box$2 = /*@__PURE__*/new Box3();\n\n\tconst _v1$6 = /*@__PURE__*/new Vector3();\n\n\tconst _toFarthestPoint = /*@__PURE__*/new Vector3();\n\n\tconst _toPoint = /*@__PURE__*/new Vector3();\n\n\tclass Sphere {\n\t\tconstructor(center = new Vector3(), radius = -1) {\n\t\t\tthis.center = center;\n\t\t\tthis.radius = radius;\n\t\t}\n\n\t\tset(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points, optionalCenter) {\n\t\t\tconst center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$2.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tconst deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\tgetBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\t\t\t_toPoint.subVectors(point, this.center);\n\n\t\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\t\tif (lengthSq > this.radius * this.radius) {\n\t\t\t\tconst length = Math.sqrt(lengthSq);\n\t\t\t\tconst missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\t\tthis.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));\n\t\t\t\tthis.radius += missingRadiusHalf;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(sphere) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\t\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\t\t\t_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);\n\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$a = /*@__PURE__*/new Vector3();\n\n\tconst _segCenter = /*@__PURE__*/new Vector3();\n\n\tconst _segDir = /*@__PURE__*/new Vector3();\n\n\tconst _diff = /*@__PURE__*/new Vector3();\n\n\tconst _edge1 = /*@__PURE__*/new Vector3();\n\n\tconst _edge2 = /*@__PURE__*/new Vector3();\n\n\tconst _normal$1 = /*@__PURE__*/new Vector3();\n\n\tclass Ray {\n\t\tconstructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {\n\t\t\tthis.origin = origin;\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tat(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t}\n\n\t\tlookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\trecast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$a));\n\t\t\treturn this;\n\t\t}\n\n\t\tclosestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tconst directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t}\n\n\t\tdistanceSqToPoint(point) {\n\t\t\tconst directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$a.distanceToSquared(point);\n\t\t}\n\n\t\tdistanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tconst segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tconst a01 = -this.direction.dot(_segDir);\n\n\t\t\tconst b0 = _diff.dot(this.direction);\n\n\t\t\tconst b1 = -_diff.dot(_segDir);\n\n\t\t\tconst c = _diff.lengthSq();\n\n\t\t\tconst det = Math.abs(1 - a01 * a01);\n\t\t\tlet s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t}\n\n\t\tintersectSphere(sphere, target) {\n\t\t\t_vector$a.subVectors(sphere.center, this.origin);\n\n\t\t\tconst tca = _vector$a.dot(this.direction);\n\n\t\t\tconst d2 = _vector$a.dot(_vector$a) - tca * tca;\n\t\t\tconst radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tconst thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tconst t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tconst t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tdistanceToPlane(plane) {\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t}\n\n\t\tintersectPlane(plane, target) {\n\t\t\tconst t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tconst distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t}\n\n\t\tintersectBox(box, target) {\n\t\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tconst invdirx = 1 / this.direction.x,\n\t\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tconst origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$a) !== null;\n\t\t}\n\n\t\tintersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tlet DdN = this.direction.dot(_normal$1);\n\t\t\tlet sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tconst DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tconst QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t}\n\n\t\tapplyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass Matrix4 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyPosition(m) {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix3(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\n\t\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n\n\t\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n\n\t\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = euler.x,\n\t\t\t\t\t\ty = euler.y,\n\t\t\t\t\t\tz = euler.z;\n\t\t\tconst a = Math.cos(x),\n\t\t\t\t\t\tb = Math.sin(x);\n\t\t\tconst c = Math.cos(y),\n\t\t\t\t\t\td = Math.sin(y);\n\t\t\tconst e = Math.cos(z),\n\t\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce - df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = de + cf * b;\n\t\t\t\tte[1] = cf + de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = df - ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = be * d - af;\n\t\t\t\tte[8] = ae * d + bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = bf * d + ae;\n\t\t\t\tte[9] = af * d - be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = ac * f + bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = ad * f - bc;\n\t\t\t\tte[2] = bc * f - ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = bd * f + ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t}\n\n\t\tlookAt(eye, target, up) {\n\t\t\tconst te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\t\ta14 = ae[12];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\t\ta24 = ae[13];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\t\ta34 = ae[14];\n\t\t\tconst a41 = ae[3],\n\t\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\t\ta44 = ae[15];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[4],\n\t\t\t\t\t\tb13 = be[8],\n\t\t\t\t\t\tb14 = be[12];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[5],\n\t\t\t\t\t\tb23 = be[9],\n\t\t\t\t\t\tb24 = be[13];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[6],\n\t\t\t\t\t\tb33 = be[10],\n\t\t\t\t\t\tb34 = be[14];\n\t\t\tconst b41 = be[3],\n\t\t\t\t\t\tb42 = be[7],\n\t\t\t\t\t\tb43 = be[11],\n\t\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst n11 = te[0],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn14 = te[12];\n\t\t\tconst n21 = te[1],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn24 = te[13];\n\t\t\tconst n31 = te[2],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn34 = te[14];\n\t\t\tconst n41 = te[3],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t}\n\n\t\ttranspose() {\n\t\t\tconst te = this.elements;\n\t\t\tlet tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPosition(x, y, z) {\n\t\t\tconst te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tinvert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn41 = te[3],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn14 = te[12],\n\t\t\t\t\t\tn24 = te[13],\n\t\t\t\t\t\tn34 = te[14],\n\t\t\t\t\t\tn44 = te[15],\n\t\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(v) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = v.x,\n\t\t\t\t\t\ty = v.y,\n\t\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxScaleOnAxis() {\n\t\t\tconst te = this.elements;\n\t\t\tconst scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tconst scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tconst scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t}\n\n\t\tmakeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationX(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationY(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationZ(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tconst c = Math.cos(angle);\n\t\t\tconst s = Math.sin(angle);\n\t\t\tconst t = 1 - c;\n\t\t\tconst x = axis.x,\n\t\t\t\t\t\ty = axis.y,\n\t\t\t\t\t\tz = axis.z;\n\t\t\tconst tx = t * x,\n\t\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeShear(x, y, z) {\n\t\t\tthis.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = quaternion._x,\n\t\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\t\tw = quaternion._w;\n\t\t\tconst x2 = x + x,\n\t\t\t\t\t\ty2 = y + y,\n\t\t\t\t\t\tz2 = z + z;\n\t\t\tconst xx = x * x2,\n\t\t\t\t\t\txy = x * y2,\n\t\t\t\t\t\txz = x * z2;\n\t\t\tconst yy = y * y2,\n\t\t\t\t\t\tyz = y * z2,\n\t\t\t\t\t\tzz = z * z2;\n\t\t\tconst wx = w * x2,\n\t\t\t\t\t\twy = w * y2,\n\t\t\t\t\t\twz = w * z2;\n\t\t\tconst sx = scale.x,\n\t\t\t\t\t\tsy = scale.y,\n\t\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tdecompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\n\t\t\tlet sx = _v1$5.set(te[0], te[1], te[2]).length();\n\n\t\t\tconst sy = _v1$5.set(te[4], te[5], te[6]).length();\n\n\t\t\tconst sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tconst det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1$2.copy(this);\n\n\t\t\tconst invSX = 1 / sx;\n\t\t\tconst invSY = 1 / sy;\n\t\t\tconst invSZ = 1 / sz;\n\t\t\t_m1$2.elements[0] *= invSX;\n\t\t\t_m1$2.elements[1] *= invSX;\n\t\t\t_m1$2.elements[2] *= invSX;\n\t\t\t_m1$2.elements[4] *= invSY;\n\t\t\t_m1$2.elements[5] *= invSY;\n\t\t\t_m1$2.elements[6] *= invSY;\n\t\t\t_m1$2.elements[8] *= invSZ;\n\t\t\t_m1$2.elements[9] *= invSZ;\n\t\t\t_m1$2.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1$2);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = 2 * near / (right - left);\n\t\t\tconst y = 2 * near / (top - bottom);\n\t\t\tconst a = (right + left) / (right - left);\n\t\t\tconst b = (top + bottom) / (top - bottom);\n\t\t\tconst c = -(far + near) / (far - near);\n\t\t\tconst d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tconst te = this.elements;\n\t\t\tconst w = 1.0 / (right - left);\n\t\t\tconst h = 1.0 / (top - bottom);\n\t\t\tconst p = 1.0 / (far - near);\n\t\t\tconst x = (right + left) * w;\n\t\t\tconst y = (top + bottom) * h;\n\t\t\tconst z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t}\n\n\t}\n\n\tMatrix4.prototype.isMatrix4 = true;\n\n\tconst _v1$5 = /*@__PURE__*/new Vector3();\n\n\tconst _m1$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tconst _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tconst _x = /*@__PURE__*/new Vector3();\n\n\tconst _y = /*@__PURE__*/new Vector3();\n\n\tconst _z = /*@__PURE__*/new Vector3();\n\n\tconst _matrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tclass Euler {\n\t\tconstructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget order() {\n\t\t\treturn this._order;\n\t\t}\n\n\t\tset order(value) {\n\t\t\tthis._order = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t}\n\n\t\tcopy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m, order, update) {\n\t\t\tconst clamp = MathUtils.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tconst te = m.elements;\n\t\t\tconst m11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8];\n\t\t\tconst m21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9];\n\t\t\tconst m31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromQuaternion(q, order, update) {\n\t\t\t_matrix$1.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix$1, order, update);\n\t\t}\n\n\t\tsetFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t}\n\n\t\treorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$3.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$3, newOrder);\n\t\t}\n\n\t\tequals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t}\n\n\t\tfromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t}\n\n\t\ttoVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tEuler.prototype.isEuler = true;\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tclass Layers {\n\t\tconstructor() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tset(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t}\n\n\t\tenable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t}\n\n\t\tenableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t}\n\n\t\ttoggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t}\n\n\t\tdisable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t}\n\n\t\tdisableAll() {\n\t\t\tthis.mask = 0;\n\t\t}\n\n\t\ttest(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t}\n\n\t}\n\n\tlet _object3DId = 0;\n\n\tconst _v1$4 = new Vector3();\n\n\tconst _q1 = new Quaternion();\n\n\tconst _m1$1 = new Matrix4();\n\n\tconst _target = new Vector3();\n\n\tconst _position$3 = new Vector3();\n\n\tconst _scale$2 = new Vector3();\n\n\tconst _quaternion$2 = new Quaternion();\n\n\tconst _xAxis = new Vector3(1, 0, 0);\n\n\tconst _yAxis = new Vector3(0, 1, 0);\n\n\tconst _zAxis = new Vector3(0, 0, 1);\n\n\tconst _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tconst _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tfunction Object3D() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _object3DId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\tthis.up = Object3D.DefaultUp.clone();\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\tfunction onRotationChange() {\n\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t}\n\n\t\trotation._onChange(onRotationChange);\n\n\t\tquaternion._onChange(onQuaternionChange);\n\n\t\tObject.defineProperties(this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t});\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\t\tthis.animations = [];\n\t\tthis.userData = {};\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Object3D,\n\t\tisObject3D: true,\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\t\tapplyMatrix4: function (matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t},\n\t\tapplyQuaternion: function (q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t},\n\t\tsetRotationFromAxisAngle: function (axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t},\n\t\tsetRotationFromEuler: function (euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t},\n\t\tsetRotationFromMatrix: function (m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t},\n\t\tsetRotationFromQuaternion: function (q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t},\n\t\trotateOnAxis: function (axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateOnWorldAxis: function (axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function (angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t},\n\t\trotateY: function (angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t},\n\t\trotateZ: function (angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t},\n\t\ttranslateOnAxis: function (axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$4.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$4.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t},\n\t\ttranslateX: function (distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t},\n\t\ttranslateY: function (distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t},\n\t\ttranslateZ: function (distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t},\n\t\tlocalToWorld: function (vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t},\n\t\tworldToLocal: function (vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t},\n\t\tlookAt: function (x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tconst parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position$3.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position$3, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position$3, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t},\n\t\tadd: function (object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tremove: function (object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclear: function () {\n\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\tconst object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t},\n\t\tattach: function (object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tthis.add(object);\n\t\t\tobject.updateWorldMatrix(false, true);\n\t\t\treturn this;\n\t\t},\n\t\tgetObjectById: function (id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t},\n\t\tgetObjectByName: function (name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t},\n\t\tgetObjectByProperty: function (name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (let i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tconst child = this.children[i];\n\t\t\t\tconst object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tgetWorldPosition: function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t},\n\t\tgetWorldQuaternion: function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, target, _scale$2);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldScale: function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$2, target);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldDirection: function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t},\n\t\traycast: function () {},\n\t\ttraverse: function (callback) {\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseVisible: function (callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseAncestors: function (callback) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t},\n\t\tupdateMatrix: function () {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t},\n\t\tupdateMatrixWorld: function (force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t},\n\t\tupdateWorldMatrix: function (updateParents, updateChildren) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tconst children = this.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function (meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tconst output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tconst object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t\tif (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tconst shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tconst uuids = [];\n\n\t\t\t\t\tfor (let i = 0, l = this.material.length; i < l; i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\t\tobject.children.push(this.children[i].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\t\t\tconst animation = this.animations[i];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tconst geometries = extractFromCache(meta.geometries);\n\t\t\t\tconst materials = extractFromCache(meta.materials);\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tconst shapes = extractFromCache(meta.shapes);\n\t\t\t\tconst skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tconst animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (shapes.length > 0) output.shapes = shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t},\n\t\tclone: function (recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t},\n\t\tcopy: function (source, recursive = true) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (let i = 0; i < source.children.length; i++) {\n\t\t\t\t\tconst child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tconst _vector1 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2$1 = /*@__PURE__*/new Vector3();\n\n\tconst _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tclass Plane {\n\t\tconstructor(normal = new Vector3(1, 0, 0), constant = 0) {\n\t\t\t// normal is assumed to be normalized\n\t\t\tthis.normal = normal;\n\t\t\tthis.constant = constant;\n\t\t}\n\n\t\tset(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCoplanarPoints(a, b, c) {\n\t\t\tconst normal = _vector1.subVectors(c, b).cross(_vector2$1.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t}\n\n\t\tdistanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t}\n\n\t\tprojectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t}\n\n\t\tintersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tconst direction = line.delta(_vector1);\n\t\t\tconst denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t}\n\n\t\tintersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tconst startSign = this.distanceToPoint(line.start);\n\t\t\tconst endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t}\n\n\t\tcoplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t}\n\n\t\tapplyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tconst referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tconst normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tPlane.prototype.isPlane = true;\n\n\tconst _v0$1 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$3 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vab = /*@__PURE__*/new Vector3();\n\n\tconst _vac = /*@__PURE__*/new Vector3();\n\n\tconst _vbc = /*@__PURE__*/new Vector3();\n\n\tconst _vap = /*@__PURE__*/new Vector3();\n\n\tconst _vbp = /*@__PURE__*/new Vector3();\n\n\tconst _vcp = /*@__PURE__*/new Vector3();\n\n\tclass Triangle {\n\t\tconstructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t}\n\n\t\tstatic getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tconst targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\n\t\tstatic getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$2.subVectors(point, a);\n\n\t\t\tconst dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tconst dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tconst dot02 = _v0$1.dot(_v2$2);\n\n\t\t\tconst dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tconst dot12 = _v1$3.dot(_v2$2);\n\n\t\t\tconst denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tconst invDenom = 1 / denom;\n\t\t\tconst u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tconst v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t}\n\n\t\tstatic containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3$1);\n\t\t\treturn _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;\n\t\t}\n\n\t\tstatic getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3$1);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3$1.x);\n\t\t\ttarget.addScaledVector(uv2, _v3$1.y);\n\t\t\ttarget.addScaledVector(uv3, _v3$1.z);\n\t\t\treturn target;\n\t\t}\n\n\t\tstatic isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t}\n\n\t\tset(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t}\n\n\t\tgetMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t}\n\n\t\tgetNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t}\n\n\t\tgetBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t}\n\n\t\tisFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t}\n\n\t\tclosestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tconst a = this.a,\n\t\t\t\t\t\tb = this.b,\n\t\t\t\t\t\tc = this.c;\n\t\t\tlet v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tconst d1 = _vab.dot(_vap);\n\n\t\t\tconst d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tconst d3 = _vab.dot(_vbp);\n\n\t\t\tconst d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tconst vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tconst d5 = _vab.dot(_vcp);\n\n\t\t\tconst d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tconst vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tconst va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tconst denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t}\n\n\t\tequals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t}\n\n\t}\n\n\tlet materialId = 0;\n\n\tfunction Material() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: materialId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\t\tthis.fog = true;\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\t\tthis.shadowSide = null;\n\t\tthis.colorWrite = true;\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\t\tthis.dithering = false;\n\t\tthis.alphaTest = 0;\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\t\tthis.visible = true;\n\t\tthis.toneMapped = true;\n\t\tthis.userData = {};\n\t\tthis.version = 0;\n\t}\n\n\tMaterial.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Material,\n\t\tisMaterial: true,\n\t\tonBeforeCompile: function ()\n\t\t/* shaderobject, renderer */\n\t\t{},\n\t\tcustomProgramCacheKey: function () {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t},\n\t\tsetValues: function (values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (const key in values) {\n\t\t\t\tconst newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function (meta) {\n\t\t\tconst isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n\t\t\tif (this.lightMap && this.lightMap.isTexture) {\n\t\t\t\tdata.lightMap = this.lightMap.toJSON(meta).uuid;\n\t\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.colorWrite = this.colorWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.skinning === true) data.skinning = true;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function () {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function (source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tconst srcPlanes = source.clippingPlanes;\n\t\t\tlet dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tconst n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function () {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\tObject.defineProperty(Material.prototype, 'needsUpdate', {\n\t\tset: function (value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\tconst _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tconst _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tconst _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tclass Color {\n\t\tconstructor(r, g, b) {\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tset(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo(h, 1);\n\t\t\ts = MathUtils.clamp(s, 0, 1);\n\t\t\tl = MathUtils.clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tconst p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tconst q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tlet color;\n\t\t\t\tconst name = m[1];\n\t\t\t\tconst components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tconst h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tconst s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tconst l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tconst hex = m[1];\n\t\t\t\tconst size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetColorName(style) {\n\t\t\t// color keywords\n\t\t\tconst hex = _colorKeywords[style];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t}\n\n\t\tcopy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyGammaToLinear(color, gammaFactor = 2.0) {\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToGamma(color, gammaFactor = 2.0) {\n\t\t\tconst safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t}\n\n\t\tgetHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t}\n\n\t\tgetHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst r = this.r,\n\t\t\t\t\t\tg = this.g,\n\t\t\t\t\t\tb = this.b;\n\t\t\tconst max = Math.max(r, g, b);\n\t\t\tconst min = Math.min(r, g, b);\n\t\t\tlet hue, saturation;\n\t\t\tconst lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tconst delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t}\n\n\t\tgetStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t}\n\n\t\toffsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tconst h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tconst s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tconst l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.getHex();\n\t\t}\n\n\t}\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.isColor = true;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tclass MeshBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tconst _vector$9 = new Vector3();\n\n\tconst _vector2 = new Vector2();\n\n\tfunction BufferAttribute(array, itemSize, normalized) {\n\t\tif (Array.isArray(array)) {\n\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t}\n\n\t\tthis.name = '';\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(BufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function (value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tisBufferAttribute: true,\n\t\tonUploadCallback: function () {},\n\t\tsetUsage: function (value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function (source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function (index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (let i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyArray: function (array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t},\n\t\tcopyColorsArray: function (colors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tlet color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector2sArray: function (vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector3sArray: function (vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector4sArray: function (vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix3: function (m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2.x, _vector2.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector$9.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector$9.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix4: function (m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyNormalMatrix: function (m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttransformDirection: function (m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function (value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function (index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t},\n\t\tsetX: function (index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t},\n\t\tgetY: function (index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t},\n\t\tsetY: function (index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tgetZ: function (index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t},\n\t\tsetZ: function (index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tgetW: function (index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t},\n\t\tsetW: function (index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tsetXY: function (index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function (index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function (index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tonUpload: function (callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function () {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t},\n\t\ttoJSON: function () {\n\t\t\tconst data = {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.usage !== StaticDrawUsage) data.usage = this.usage;\n\t\t\tif (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;\n\t\t\treturn data;\n\t\t}\n\t}); //\n\n\tfunction Int8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int8Array(array), itemSize, normalized);\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\tfunction Uint8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\tfunction Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\tfunction Int16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int16Array(array), itemSize, normalized);\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\tfunction Uint16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\tfunction Int32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int32Array(array), itemSize, normalized);\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\tfunction Uint32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\tfunction Float16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tFloat16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat16BufferAttribute.prototype.constructor = Float16BufferAttribute;\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tfunction Float32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float32Array(array), itemSize, normalized);\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\tfunction Float64BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float64Array(array), itemSize, normalized);\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute; //\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tlet max = array[0];\n\n\t\tfor (let i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tconst TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\tUint8ClampedArray: Uint8ClampedArray,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tlet _id = 0;\n\n\tconst _m1 = new Matrix4();\n\n\tconst _obj = new Object3D();\n\n\tconst _offset = new Vector3();\n\n\tconst _box$1 = new Box3();\n\n\tconst _boxMorphTargets = new Box3();\n\n\tconst _vector$8 = new Vector3();\n\n\tfunction BufferGeometry() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _id++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\t\tthis.drawRange = {\n\t\t\tstart: 0,\n\t\t\tcount: Infinity\n\t\t};\n\t\tthis.userData = {};\n\t}\n\n\tBufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: BufferGeometry,\n\t\tisBufferGeometry: true,\n\t\tgetIndex: function () {\n\t\t\treturn this.index;\n\t\t},\n\t\tsetIndex: function (index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tgetAttribute: function (name) {\n\t\t\treturn this.attributes[name];\n\t\t},\n\t\tsetAttribute: function (name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t},\n\t\tdeleteAttribute: function (name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t},\n\t\thasAttribute: function (name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t},\n\t\taddGroup: function (start, count, materialIndex = 0) {\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t},\n\t\tclearGroups: function () {\n\t\t\tthis.groups = [];\n\t\t},\n\t\tsetDrawRange: function (start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t},\n\t\tapplyMatrix4: function (matrix) {\n\t\t\tconst position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function (angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t},\n\t\trotateY: function (angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t},\n\t\trotateZ: function (angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t},\n\t\ttranslate: function (x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t},\n\t\tscale: function (x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t},\n\t\tlookAt: function (vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t},\n\t\tcenter: function () {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t},\n\t\tsetFromPoints: function (points) {\n\t\t\tconst position = [];\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tconst point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t},\n\t\tcomputeBoundingBox: function () {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$1.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.min, _box$1.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.max, _box$1.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t},\n\t\tcomputeBoundingSphere: function () {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t\t_box$1.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tlet maxRadiusSq = 0;\n\n\t\t\t\tfor (let i = 0, il = position.count; i < il; i++) {\n\t\t\t\t\t_vector$8.fromBufferAttribute(position, i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\t\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (let j = 0, jl = morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$8.fromBufferAttribute(morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$8.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeFaceNormals: function () {// backwards compatibility\n\t\t},\n\t\tcomputeTangents: function () {\n\t\t\tconst index = this.index;\n\t\t\tconst attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst indices = index.array;\n\t\t\tconst positions = attributes.position.array;\n\t\t\tconst normals = attributes.normal.array;\n\t\t\tconst uvs = attributes.uv.array;\n\t\t\tconst nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tconst tangents = attributes.tangent.array;\n\t\t\tconst tan1 = [],\n\t\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (let i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tconst vA = new Vector3(),\n\t\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tconst r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tlet groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst tmp = new Vector3(),\n\t\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tconst n = new Vector3(),\n\t\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tconst t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tconst test = tmp2.dot(tan2[v]);\n\t\t\t\tconst w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleVertex(indices[j + 0]);\n\t\t\t\t\thandleVertex(indices[j + 1]);\n\t\t\t\t\thandleVertex(indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeVertexNormals: function () {\n\t\t\tconst index = this.index;\n\t\t\tconst positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tlet normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (let i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst pA = new Vector3(),\n\t\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tconst nA = new Vector3(),\n\t\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tconst cb = new Vector3(),\n\t\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (let i = 0, il = index.count; i < il; i += 3) {\n\t\t\t\t\t\tconst vA = index.getX(i + 0);\n\t\t\t\t\t\tconst vB = index.getX(i + 1);\n\t\t\t\t\t\tconst vC = index.getX(i + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (let i = 0, il = positionAttribute.count; i < il; i += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, i + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, i + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, i + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tmerge: function (geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tconst attribute1 = attributes[key];\n\t\t\t\tconst attributeArray1 = attribute1.array;\n\t\t\t\tconst attribute2 = geometry.attributes[key];\n\t\t\t\tconst attributeArray2 = attribute2.array;\n\t\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tconst length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (let i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tnormalizeNormals: function () {\n\t\t\tconst normals = this.attributes.normal;\n\n\t\t\tfor (let i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$8.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$8.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n\t\t\t}\n\t\t},\n\t\ttoNonIndexed: function () {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tconst array = attribute.array;\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst normalized = attribute.normalized;\n\t\t\t\tconst array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tlet index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (let i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (let j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tconst indices = this.index.array;\n\t\t\tconst attributes = this.attributes; // attributes\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = this.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst morphArray = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tconst attribute = morphAttribute[i];\n\t\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\t\tmorphArray.push(newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t},\n\t\ttoJSON: function () {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tconst parameters = this.parameters;\n\n\t\t\t\tfor (const key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t} // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tconst index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tdata.data.attributes[key] = attribute.toJSON(data.data);\n\t\t\t}\n\n\t\t\tconst morphAttributes = {};\n\t\t\tlet hasMorphAttributes = false;\n\n\t\t\tfor (const key in this.morphAttributes) {\n\t\t\t\tconst attributeArray = this.morphAttributes[key];\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\tarray.push(attribute.toJSON(data.data));\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[key] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tconst boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function () {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t},\n\t\tcopy: function (source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tconst data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tconst index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tconst attributes = source.attributes;\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = source.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[name] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tconst groups = source.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tconst boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tconst boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function () {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tconst _inverseMatrix$2 = new Matrix4();\n\n\tconst _ray$2 = new Ray();\n\n\tconst _sphere$3 = new Sphere();\n\n\tconst _vA$1 = new Vector3();\n\n\tconst _vB$1 = new Vector3();\n\n\tconst _vC$1 = new Vector3();\n\n\tconst _tempA = new Vector3();\n\n\tconst _tempB = new Vector3();\n\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\n\tconst _morphB = new Vector3();\n\n\tconst _morphC = new Vector3();\n\n\tconst _uvA$1 = new Vector2();\n\n\tconst _uvB$1 = new Vector2();\n\n\tconst _uvC$1 = new Vector2();\n\n\tconst _intersectionPoint = new Vector3();\n\n\tconst _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Mesh';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tMesh.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Mesh,\n\t\tisMesh: true,\n\t\tcopy: function (source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tupdateMorphTargets: function () {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\traycast: function (raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst material = this.material;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray$2.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tlet intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tconst uv = geometry.attributes.uv;\n\t\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\t\tconst groups = geometry.groups;\n\t\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = index.getX(j);\n\t\t\t\t\t\t\t\tconst b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tconst c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\t\tconst c = index.getX(i + 2);\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\t\tconst c = j + 2;\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tlet intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA$1.fromBufferAttribute(position, a);\n\n\t\t_vB$1.fromBufferAttribute(position, b);\n\n\t\t_vC$1.fromBufferAttribute(position, c);\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (let i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tconst influence = morphInfluences[i];\n\t\t\t\tconst morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA$1), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB$1), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC$1), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA$1.add(_morphA);\n\n\t\t\t_vB$1.add(_morphB);\n\n\t\t\t_vC$1.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh && material.skinning) {\n\t\t\tobject.boneTransform(a, _vA$1);\n\t\t\tobject.boneTransform(b, _vB$1);\n\t\t\tobject.boneTransform(c, _vC$1);\n\t\t}\n\n\t\tconst intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tconst face = {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tnormal: new Vector3(),\n\t\t\t\tmaterialIndex: 0\n\t\t\t};\n\t\t\tTriangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tclass BoxGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'BoxGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\t\t\tconst scope = this; // segments\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet numberOfVertices = 0;\n\t\t\tlet groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tconst segmentWidth = width / gridX;\n\t\t\t\tconst segmentHeight = height / gridY;\n\t\t\t\tconst widthHalf = width / 2;\n\t\t\t\tconst heightHalf = height / 2;\n\t\t\t\tconst depthHalf = depth / 2;\n\t\t\t\tconst gridX1 = gridX + 1;\n\t\t\t\tconst gridY1 = gridY + 1;\n\t\t\t\tlet vertexCounter = 0;\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tconst x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tconst dst = {};\n\n\t\tfor (const u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (const p in src[u]) {\n\t\t\t\tconst property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tconst merged = {};\n\n\t\tfor (let u = 0; u < uniforms.length; u++) {\n\t\t\tconst tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (const p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tconst UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShaderMaterial';\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\t\tthis.linewidth = 1;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false; // set to use scene fog\n\n\t\tthis.lights = false; // set to use scene lights\n\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\n\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false,\n\t\t\t// set to use derivatives\n\t\t\tfragDepth: false,\n\t\t\t// set to use fragment depth values\n\t\t\tdrawBuffers: false,\n\t\t\t// set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [1, 1, 1],\n\t\t\t'uv': [0, 0],\n\t\t\t'uv2': [0, 0]\n\t\t};\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\t\tthis.glslVersion = null;\n\n\t\tif (parameters !== undefined) {\n\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\tthis.setValues(parameters);\n\t\t}\n\t}\n\n\tShaderMaterial.prototype = Object.create(Material.prototype);\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\tthis.defines = Object.assign({}, source.defines);\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\tthis.glslVersion = source.glslVersion;\n\t\treturn this;\n\t};\n\n\tShaderMaterial.prototype.toJSON = function (meta) {\n\t\tconst data = Material.prototype.toJSON.call(this, meta);\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor (const name in this.uniforms) {\n\t\t\tconst uniform = this.uniforms[name];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif (value && value.isTexture) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t};\n\t\t\t} else if (value && value.isColor) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector2) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\t\tconst extensions = {};\n\n\t\tfor (const key in this.extensions) {\n\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t}\n\n\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\treturn data;\n\t};\n\n\tfunction Camera() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Camera';\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\t}\n\n\tCamera.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Camera,\n\t\tisCamera: true,\n\t\tcopy: function (source, recursive) {\n\t\t\tObject3D.prototype.copy.call(this, source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t},\n\t\tgetWorldDirection: function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t},\n\t\tupdateMatrixWorld: function (force) {\n\t\t\tObject3D.prototype.updateMatrixWorld.call(this, force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tupdateWorldMatrix: function (updateParents, updateChildren) {\n\t\t\tObject3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tclone: function () {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\t});\n\n\tfunction PerspectiveCamera(fov = 50, aspect = 1, near = 0.1, far = 2000) {\n\t\tCamera.call(this);\n\t\tthis.type = 'PerspectiveCamera';\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: PerspectiveCamera,\n\t\tisPerspectiveCamera: true,\n\t\tcopy: function (source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function (focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\t\t\tconst vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t},\n\t\tgetEffectiveFOV: function () {\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t},\n\t\tgetFilmWidth: function () {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t},\n\t\tgetFilmHeight: function () {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function (fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function () {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function () {\n\t\t\tconst near = this.near;\n\t\t\tlet top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tlet height = 2 * top;\n\t\t\tlet width = this.aspect * height;\n\t\t\tlet left = -0.5 * width;\n\t\t\tconst view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tconst skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t},\n\t\ttoJSON: function (meta) {\n\t\t\tconst data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tconst fov = 90,\n\t\t\t\taspect = 1;\n\n\tclass CubeCamera extends Object3D {\n\t\tconstructor(near, far, renderTarget) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubeCamera';\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.renderTarget = renderTarget;\n\t\t\tconst cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPX.layers = this.layers;\n\t\t\tcameraPX.up.set(0, -1, 0);\n\t\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\t\tthis.add(cameraPX);\n\t\t\tconst cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNX.layers = this.layers;\n\t\t\tcameraNX.up.set(0, -1, 0);\n\t\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\t\tthis.add(cameraNX);\n\t\t\tconst cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPY.layers = this.layers;\n\t\t\tcameraPY.up.set(0, 0, 1);\n\t\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\t\tthis.add(cameraPY);\n\t\t\tconst cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNY.layers = this.layers;\n\t\t\tcameraNY.up.set(0, 0, -1);\n\t\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\t\tthis.add(cameraNY);\n\t\t\tconst cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPZ.layers = this.layers;\n\t\t\tcameraPZ.up.set(0, -1, 0);\n\t\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\t\tthis.add(cameraPZ);\n\t\t\tconst cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNZ.layers = this.layers;\n\t\t\tcameraNZ.up.set(0, -1, 0);\n\t\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\t\tthis.add(cameraNZ);\n\t\t}\n\n\t\tupdate(renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tconst renderTarget = this.renderTarget;\n\t\t\tconst [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t}\n\n\t}\n\n\tclass CubeTexture extends Texture {\n\t\tconstructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\timages = images !== undefined ? images : [];\n\t\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\t\tformat = format !== undefined ? format : RGBFormat;\n\t\t\tsuper(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding); // Why CubeTexture._needsFlipEnvMap is necessary:\n\t\t\t//\n\t\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t\t// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\n\t\t\t// when using WebGLCubeRenderTarget.texture as a cube texture.\n\n\t\t\tthis._needsFlipEnvMap = true;\n\t\t\tthis.flipY = false;\n\t\t}\n\n\t\tget images() {\n\t\t\treturn this.image;\n\t\t}\n\n\t\tset images(value) {\n\t\t\tthis.image = value;\n\t\t}\n\n\t}\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(size, options, dummy) {\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\tsuper(size, size, options);\n\t\t\toptions = options || {};\n\t\t\tthis.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.texture._needsFlipEnvMap = false;\n\t\t}\n\n\t\tfromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tconst shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t\t};\n\t\t\tconst geometry = new BoxGeometry(5, 5, 5);\n\t\t\tconst material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tconst mesh = new Mesh(geometry, material);\n\t\t\tconst currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tconst camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t}\n\n\t\tclear(renderer, color, depth, stencil) {\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t}\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tclass DataTexture extends Texture {\n\t\tconstructor(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\tdata: data || null,\n\t\t\t\twidth: width || 1,\n\t\t\t\theight: height || 1\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\tconst _sphere$2 = /*@__PURE__*/new Sphere();\n\n\tconst _vector$7 = /*@__PURE__*/new Vector3();\n\n\tclass Frustum {\n\t\tconstructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {\n\t\t\tthis.planes = [p0, p1, p2, p3, p4, p5];\n\t\t}\n\n\t\tset(p0, p1, p2, p3, p4, p5) {\n\t\t\tconst planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(frustum) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromProjectionMatrix(m) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst me = m.elements;\n\t\t\tconst me0 = me[0],\n\t\t\t\t\t\tme1 = me[1],\n\t\t\t\t\t\tme2 = me[2],\n\t\t\t\t\t\tme3 = me[3];\n\t\t\tconst me4 = me[4],\n\t\t\t\t\t\tme5 = me[5],\n\t\t\t\t\t\tme6 = me[6],\n\t\t\t\t\t\tme7 = me[7];\n\t\t\tconst me8 = me[8],\n\t\t\t\t\t\tme9 = me[9],\n\t\t\t\t\t\tme10 = me[10],\n\t\t\t\t\t\tme11 = me[11];\n\t\t\tconst me12 = me[12],\n\t\t\t\t\t\tme13 = me[13],\n\t\t\t\t\t\tme14 = me[14],\n\t\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\tintersectsObject(object) {\n\t\t\tconst geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSprite(sprite) {\n\t\t\t_sphere$2.center.set(0, 0, 0);\n\n\t\t\t_sphere$2.radius = 0.7071067811865476;\n\n\t\t\t_sphere$2.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst center = sphere.center;\n\t\t\tconst negRadius = -sphere.radius;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$7) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tfunction WebGLAnimation() {\n\t\tlet context = null;\n\t\tlet isAnimating = false;\n\t\tlet animationLoop = null;\n\t\tlet requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function () {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function () {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function (callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function (value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst usage = attribute.usage;\n\t\t\tconst buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tlet type = gl.FLOAT;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = gl.FLOAT;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = gl.HALF_FLOAT;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = gl.SHORT;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = gl.INT;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = gl.BYTE;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tconst cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tclass PlaneGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PlaneGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tconst width_half = width / 2;\n\t\t\tconst height_half = height / 2;\n\t\t\tconst gridX = Math.floor(widthSegments);\n\t\t\tconst gridY = Math.floor(heightSegments);\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\t\t\tconst segment_width = width / gridX;\n\t\t\tconst segment_height = height / gridY; //\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\n\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tconst x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\t\tconst b = ix + gridX1 * (iy + 1);\n\t\t\t\t\tconst c = ix + 1 + gridX1 * (iy + 1);\n\t\t\t\t\tconst d = ix + 1 + gridX1 * iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmissionmap_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n#endif\";\n\n\tvar transmissionmap_pars_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\tuniform sampler2D transmissionMap;\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSMISSION\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSMISSION\\n\\tuniform float transmission;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <transmissionmap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <transmissionmap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSMISSION\\n\\t\\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tconst ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmissionmap_fragment: transmissionmap_fragment,\n\t\ttransmissionmap_pars_fragment: transmissionmap_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tconst UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tconst ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tconst clearColor = new Color(0x000000);\n\t\tlet clearAlpha = 0;\n\t\tlet planeMesh;\n\t\tlet boxMesh;\n\t\tlet currentBackground = null;\n\t\tlet currentBackgroundVersion = 0;\n\t\tlet currentTonemapping = null;\n\n\t\tfunction render(renderList, scene, camera, forceClear) {\n\t\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tconst xr = renderer.xr;\n\t\t\tconst session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function () {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function (color, alpha = 1) {\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function (alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tconst maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tconst bindingStates = {};\n\t\tconst defaultState = createBindingState(null);\n\t\tlet currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tlet updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tconst state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tconst wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tconst wireframe = material.wireframe === true;\n\t\t\tlet programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tlet stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tlet state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tconst newAttributes = [];\n\t\t\tconst enabledAttributes = [];\n\t\t\tconst attributeDivisors = [];\n\n\t\t\tfor (let i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tconst cachedAttributes = currentState.attributes;\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in geometryAttributes) {\n\t\t\t\tconst cachedAttribute = cachedAttributes[key];\n\t\t\t\tconst geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tconst cache = {};\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\n\t\t\tfor (let i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\t\tconst attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\t\t\t\textension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (let i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tconst programAttributes = program.getAttributes();\n\t\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (const name in programAttributes) {\n\t\t\t\tconst programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tconst geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\t\t\t\t\t\tconst attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tconst attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tconst attribute = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tconst value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (const programId in programMap) {\n\t\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tconst programMap = bindingStates[geometry.id];\n\n\t\t\tfor (const programId in programMap) {\n\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tconst stateMap = programMap[program.id];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tlet maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tconst isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tconst maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\t\tconst maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\t\tconst maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n\t\tconst maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n\t\tconst maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\t\tconst vertexTextures = maxVertexTextures > 0;\n\t\tconst floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n\t\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tconst maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tconst scope = this;\n\t\tlet globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tconst plane = new Plane(),\n\t\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tconst enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tconst planes = material.clippingPlanes,\n\t\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tlet dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (let i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\t\tlet dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tlet cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tconst mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tconst cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tconst cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tconst extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tlet extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function (name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function (capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function (name) {\n\t\t\t\tconst extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tconst geometries = {};\n\t\tconst wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tconst geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (const name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tconst attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tconst geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (const name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n\t\t\t} // morph targets\n\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = morphAttributes[name];\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tconst indices = [];\n\t\t\tconst geometryIndex = geometry.index;\n\t\t\tconst geometryPosition = geometry.attributes.position;\n\t\t\tlet version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tconst array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tconst a = array[i + 0];\n\t\t\t\t\tconst b = array[i + 1];\n\t\t\t\t\tconst c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n\t\t\t\t\tconst a = i + 0;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tconst previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tconst currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tlet type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tconst memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tconst render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase gl.TRIANGLES:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINES:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_STRIP:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_LOOP:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.POINTS:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tconst influencesList = {};\n\t\tconst morphInfluences = new Float32Array(8);\n\t\tconst workInfluences = [];\n\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tconst objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tlet influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tinfluences[i] = [i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst influence = influences[i];\n\t\t\t\tinfluence[0] = i;\n\t\t\t\tinfluence[1] = objectInfluences[i];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tif (i < length && influences[i][1]) {\n\t\t\t\t\tworkInfluences[i][0] = influences[i][0];\n\t\t\t\t\tworkInfluences[i][1] = influences[i][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[i][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[i][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tconst morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tconst morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tconst influence = workInfluences[i];\n\t\t\t\tconst index = influence[0];\n\t\t\t\tconst value = influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + i, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + i, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tlet updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tconst frame = info.render.frame;\n\t\t\tconst geometry = object.geometry;\n\t\t\tconst buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tconst instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tclass DataTexture2DArray extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tclass DataTexture3D extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t\t// Users can still set in DataTexture3D directly.\n\t\t\t//\n\t\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t\t// \ttexture.anisotropy = 16;\n\t\t\t//\n\t\t\t// See #14839\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tconst emptyTexture = new Texture();\n\tconst emptyTexture2dArray = new DataTexture2DArray();\n\tconst emptyTexture3d = new DataTexture3D();\n\tconst emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tconst arrayCacheF32 = [];\n\tconst arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tconst mat4array = new Float32Array(16);\n\tconst mat3array = new Float32Array(9);\n\tconst mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tconst firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tconst n = nBlocks * blockSize;\n\t\tlet r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (let i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (let i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (let i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tlet r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or THREE.MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single integer / boolean\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single integer / boolean vector (from flat array)\n\n\n\tfunction setValueV2i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single unsigned integer\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single unsigned integer vector (from flat array)\n\n\n\tfunction setValueV2ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2ui;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3ui;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4ui;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Array of vectors (from flat array or array of THREE.VectorN)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (from flat array or array of THREE.MatrixN)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of integer / boolean\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t} // Array of integer / boolean vectors (from flat array)\n\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of unsigned integer\n\n\n\tfunction setValueV1uiArray(gl, v) {\n\t\tgl.uniform1uiv(this.addr, v);\n\t} // Array of unsigned integer vectors (from flat array)\n\n\n\tfunction setValueV2uiArray(gl, v) {\n\t\tgl.uniform2uiv(this.addr, v);\n\t}\n\n\tfunction setValueV3uiArray(gl, v) {\n\t\tgl.uniform3uiv(this.addr, v);\n\t}\n\n\tfunction setValueV4uiArray(gl, v) {\n\t\tgl.uniform4uiv(this.addr, v);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1uiArray;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2uiArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3uiArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4uiArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tconst cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tconst seq = this.seq;\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tconst path = activeInfo.name,\n\t\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tconst match = RePathPart.exec(path),\n\t\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tlet id = match[1];\n\t\t\tconst idIsIndex = match[2] === ']',\n\t\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tconst map = container.map;\n\t\t\t\tlet next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n\t\tfor (let i = 0; i < n; ++i) {\n\t\t\tconst info = gl.getActiveUniform(program, i),\n\t\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tconst u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tconst v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i],\n\t\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tconst r = [];\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tconst shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tlet programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tconst lines = string.split('\\n');\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tconst status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t\tconst log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tconst source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tlet toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tconst chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tconst chunks = [];\n\n\t\tfor (const name in defines) {\n\t\t\tconst value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tconst attributes = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst info = gl.getActiveAttrib(program, i);\n\t\t\tconst name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tconst string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tlet string = '';\n\n\t\tfor (let i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tconst gl = renderer.getContext();\n\t\tconst defines = parameters.defines;\n\t\tlet vertexShader = parameters.vertexShader;\n\t\tlet fragmentShader = parameters.fragmentShader;\n\t\tconst shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tconst envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tconst envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tconst envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tconst gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tconst customDefines = generateDefines(defines);\n\t\tconst program = gl.createProgram();\n\t\tlet prefixVertex, prefixFragment;\n\t\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '\tattribute vec4 color;', '#elif defined( USE_COLOR )', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tconst glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n\t\tconst glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tconst programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tconst vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tconst fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tlet runnable = true;\n\t\t\tlet haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tconst vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tconst fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tlet cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tlet cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tconst programs = [];\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\t\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tconst vertexTextures = capabilities.vertexTextures;\n\t\tlet precision = capabilities.precision;\n\t\tconst shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tconst parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmissionMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tconst skeleton = object.skeleton;\n\t\t\tconst bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\t\tconst nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tconst maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tlet encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst envMap = cubemaps.get(material.envMap || environment);\n\t\t\tconst shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\tconst parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexAlphas: material.vertexColors === true && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: !!material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tconst array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (const name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (let i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tconst shaderID = shaderIDs[material.type];\n\t\t\tlet uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tlet program; // Check if code has been already compiled\n\n\t\t\tfor (let p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tconst preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tconst i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tlet properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tlet map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tconst renderItems = [];\n\t\tlet renderItemsIndex = 0;\n\t\tconst opaque = [];\n\t\tconst transparent = [];\n\t\tconst defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tlet renderItem = renderItems[renderItemsIndex];\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).push(renderItem);\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).unshift(renderItem);\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tconst renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tlet lists = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tlet list;\n\n\t\t\tif (lists.has(scene) === false) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, [list]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= lists.get(scene).length) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tlists.get(scene).push(list);\n\t\t\t\t} else {\n\t\t\t\t\tlist = lists.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tlet nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tconst cache = new UniformsCache();\n\t\tconst shadowCache = ShadowUniformsCache();\n\t\tconst state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (let i = 0; i < 9; i++) state.probe.push(new Vector3());\n\n\t\tconst vector3 = new Vector3();\n\t\tconst matrix4 = new Matrix4();\n\t\tconst matrix42 = new Matrix4();\n\n\t\tfunction setup(lights) {\n\t\t\tlet r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\n\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tlet numDirectionalShadows = 0;\n\t\t\tlet numPointShadows = 0;\n\t\t\tlet numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst color = light.color;\n\t\t\t\tconst intensity = light.intensity;\n\t\t\t\tconst distance = light.distance;\n\t\t\t\tconst shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.distance = distance;\n\t\t\t\t\tuniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\tuniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tstate.rectArea[rectAreaLength] = uniforms;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = shadowUniforms;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = uniforms;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\t\t\t\t\tstate.hemi[hemiLength] = uniforms;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tconst hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = state.spot[spotLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = state.rectArea[rectAreaLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4(matrix42);\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4(matrix42);\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = state.point[pointLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = state.hemi[hemiLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tuniforms.direction.normalize();\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tconst lights = new WebGLLights(extensions, capabilities);\n\t\tconst lightsArray = [];\n\t\tconst shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights() {\n\t\t\tlights.setup(lightsArray);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tconst state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tlet renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth = 0) {\n\t\t\tlet renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, [renderState]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tclass MeshDepthMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDepthMaterial';\n\t\t\tthis.depthPacking = BasicDepthPacking;\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.depthPacking = source.depthPacking;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tclass MeshDistanceMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDistanceMaterial';\n\t\t\tthis.referencePosition = new Vector3();\n\t\t\tthis.nearDistance = 1;\n\t\t\tthis.farDistance = 1000;\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.referencePosition.copy(source.referencePosition);\n\t\t\tthis.nearDistance = source.nearDistance;\n\t\t\tthis.farDistance = source.farDistance;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, _capabilities) {\n\t\tlet _frustum = new Frustum();\n\n\t\tconst _shadowMapSize = new Vector2(),\n\t\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t\t_depthMaterials = [],\n\t\t\t\t\t_distanceMaterials = [],\n\t\t\t\t\t_materialCache = {},\n\t\t\t\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\t\tconst shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tconst shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tconst fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tconst fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tconst scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tconst _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (let i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (let vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tconst viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tconst geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tconst index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tlet material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tconst index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tlet material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tlet result = null;\n\t\t\tlet getMaterialVariant = getDepthMaterialVariant;\n\t\t\tlet customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tlet useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tlet useSkinning = false;\n\n\t\t\t\tif (object.isSkinnedMesh === true) {\n\t\t\t\t\tif (material.skinning === true) {\n\t\t\t\t\t\tuseSkinning = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst useInstancing = object.isInstancedMesh === true;\n\t\t\t\tresult = getMaterialVariant(useMorphing, useSkinning, useInstancing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tconst keyA = result.uuid,\n\t\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tlet materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tconst geometry = _objects.update(object);\n\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor (let k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tconst group = groups[k];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tlet locked = false;\n\t\t\tconst color = new Vector4();\n\t\t\tlet currentColorMask = null;\n\t\t\tconst currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function (colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentDepthMask = null;\n\t\t\tlet currentDepthFunc = null;\n\t\t\tlet currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(gl.DEPTH_TEST);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(gl.DEPTH_TEST);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NEVER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.ALWAYS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LESS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.EQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GREATER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NOTEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentStencilMask = null;\n\t\t\tlet currentStencilFunc = null;\n\t\t\tlet currentStencilRef = null;\n\t\t\tlet currentStencilFuncMask = null;\n\t\t\tlet currentStencilFail = null;\n\t\t\tlet currentStencilZFail = null;\n\t\t\tlet currentStencilZPass = null;\n\t\t\tlet currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(gl.STENCIL_TEST);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(gl.STENCIL_TEST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function (stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tconst colorBuffer = new ColorBuffer();\n\t\tconst depthBuffer = new DepthBuffer();\n\t\tconst stencilBuffer = new StencilBuffer();\n\t\tlet enabledCapabilities = {};\n\t\tlet xrFramebuffer = null;\n\t\tlet currentBoundFramebuffers = {};\n\t\tlet currentProgram = null;\n\t\tlet currentBlendingEnabled = false;\n\t\tlet currentBlending = null;\n\t\tlet currentBlendEquation = null;\n\t\tlet currentBlendSrc = null;\n\t\tlet currentBlendDst = null;\n\t\tlet currentBlendEquationAlpha = null;\n\t\tlet currentBlendSrcAlpha = null;\n\t\tlet currentBlendDstAlpha = null;\n\t\tlet currentPremultipledAlpha = false;\n\t\tlet currentFlipSided = null;\n\t\tlet currentCullFace = null;\n\t\tlet currentLineWidth = null;\n\t\tlet currentPolygonOffsetFactor = null;\n\t\tlet currentPolygonOffsetUnits = null;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\t\tlet lineWidthAvailable = false;\n\t\tlet version = 0;\n\t\tconst glVersion = gl.getParameter(gl.VERSION);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tlet currentTextureSlot = null;\n\t\tlet currentBoundTextures = {};\n\t\tconst currentScissor = new Vector4(0, 0, gl.canvas.width, gl.canvas.height);\n\t\tconst currentViewport = new Vector4(0, 0, gl.canvas.width, gl.canvas.height);\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tconst data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tconst texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tconst emptyTextures = {};\n\t\temptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n\t\temptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(gl.DEPTH_TEST);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(gl.CULL_FACE);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindXRFramebuffer(framebuffer) {\n\t\t\tif (framebuffer !== xrFramebuffer) {\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t\t\t\txrFramebuffer = framebuffer;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindFramebuffer(target, framebuffer) {\n\t\t\tif (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available\n\n\t\t\tif (currentBoundFramebuffers[target] !== framebuffer) {\n\t\t\t\tgl.bindFramebuffer(target, framebuffer);\n\t\t\t\tcurrentBoundFramebuffers[target] = framebuffer;\n\t\t\t}\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst equationToGL = {\n\t\t\t[AddEquation]: gl.FUNC_ADD,\n\t\t\t[SubtractEquation]: gl.FUNC_SUBTRACT,\n\t\t\t[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT\n\t\t};\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = gl.MIN;\n\t\t\tequationToGL[MaxEquation] = gl.MAX;\n\t\t} else {\n\t\t\tconst extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tconst factorToGL = {\n\t\t\t[ZeroFactor]: gl.ZERO,\n\t\t\t[OneFactor]: gl.ONE,\n\t\t\t[SrcColorFactor]: gl.SRC_COLOR,\n\t\t\t[SrcAlphaFactor]: gl.SRC_ALPHA,\n\t\t\t[SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\n\t\t\t[DstColorFactor]: gl.DST_COLOR,\n\t\t\t[DstAlphaFactor]: gl.DST_ALPHA,\n\t\t\t[OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\n\t\t\t[OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t\t[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\n\t\t\t[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA\n\t\t};\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled === true) {\n\t\t\t\t\tdisable(gl.BLEND);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentBlendingEnabled === false) {\n\t\t\t\tenable(gl.BLEND);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ONE, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n\t\t\tlet flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tconst stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t\tmaterial.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(gl.CW);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(gl.CCW);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(gl.CULL_FACE);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(gl.BACK);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT_AND_BACK);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.CULL_FACE);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(gl.POLYGON_OFFSET_FILL);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.POLYGON_OFFSET_FILL);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(gl.SCISSOR_TEST);\n\t\t\t} else {\n\t\t\t\tdisable(gl.SCISSOR_TEST);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tlet boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tconst boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\t// reset state\n\t\t\tgl.disable(gl.BLEND);\n\t\t\tgl.disable(gl.CULL_FACE);\n\t\t\tgl.disable(gl.DEPTH_TEST);\n\t\t\tgl.disable(gl.POLYGON_OFFSET_FILL);\n\t\t\tgl.disable(gl.SCISSOR_TEST);\n\t\t\tgl.disable(gl.STENCIL_TEST);\n\t\t\tgl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\tgl.blendFunc(gl.ONE, gl.ZERO);\n\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n\t\t\tgl.colorMask(true, true, true, true);\n\t\t\tgl.clearColor(0, 0, 0, 0);\n\t\t\tgl.depthMask(true);\n\t\t\tgl.depthFunc(gl.LESS);\n\t\t\tgl.clearDepth(1);\n\t\t\tgl.stencilMask(0xffffffff);\n\t\t\tgl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\n\t\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n\t\t\tgl.clearStencil(0);\n\t\t\tgl.cullFace(gl.BACK);\n\t\t\tgl.frontFace(gl.CCW);\n\t\t\tgl.polygonOffset(0, 0);\n\t\t\tgl.activeTexture(gl.TEXTURE0);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\t\tif (isWebGL2 === true) {\n\t\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n\t\t\t}\n\n\t\t\tgl.useProgram(null);\n\t\t\tgl.lineWidth(1);\n\t\t\tgl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\txrFramebuffer = null;\n\t\t\tcurrentBoundFramebuffers = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = false;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcurrentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcurrentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tbindFramebuffer: bindFramebuffer,\n\t\t\tbindXRFramebuffer: bindXRFramebuffer,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst maxTextures = capabilities.maxTextures;\n\t\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\t\tconst maxTextureSize = capabilities.maxTextureSize;\n\t\tconst maxSamples = capabilities.maxSamples;\n\n\t\tconst _videoTextures = new WeakMap();\n\n\t\tlet _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tlet useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tlet scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tconst floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\t\t\t\t\tconst width = floor(scale * image.width);\n\t\t\t\t\tconst height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tconst canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tconst context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo(image) {\n\t\t\treturn MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\ttextureProperties.__maxMipLevel = Math.log2(Math.max(width, height));\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tlet internalFormat = glFormat;\n\n\t\t\tif (glFormat === _gl.RED) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGB) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGBA) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\tif (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn _gl.NEAREST;\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tconst renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t\tinfo.memory.textures--;\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tproperties.remove(texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tlet textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tconst textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t}\n\n\t\tconst wrappingToGL = {\n\t\t\t[RepeatWrapping]: _gl.REPEAT,\n\t\t\t[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n\t\t\t[MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n\t\t};\n\t\tconst filterToGL = {\n\t\t\t[NearestFilter]: _gl.NEAREST,\n\t\t\t[NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n\t\t\t[LinearFilter]: _gl.LINEAR,\n\t\t\t[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tif (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\t\tif (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tlet textureType = _gl.TEXTURE_2D;\n\t\t\tif (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\t\tif (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n\t\t\tconst image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tconst supportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tlet glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\tmipmap = mipmaps[i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tconst isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst image = cubeImage[0],\n\t\t\t\t\t\tsupportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\t\t\tlet mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tmipmaps = cubeImage[i].mipmaps;\n\n\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[i].image;\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\tconst glType = utils.convert(texture.type);\n\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\tif (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\tstate.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n\t\t\t} else {\n\t\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else {\n\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tconst isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tconst webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures++;\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tconst isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tconst isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\t\tconst supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n\t\t\t} else {\n\t\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\t\tif (isRenderTarget3D) {\n\t\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\tconst isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\t\tglTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(glTextureType, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(glTextureType, texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n\t\t\t\tconst webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\tstate.bindTexture(target, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\t\t\t\t\tconst width = renderTarget.width;\n\t\t\t\t\tconst height = renderTarget.height;\n\t\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer); // see #18905\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tconst frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tlet warnedTexture2D = false;\n\t\tlet warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tlet extension;\n\t\t\tif (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n\t\t\tif (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;\n\t\t\tif (p === ByteType) return gl.BYTE;\n\t\t\tif (p === ShortType) return gl.SHORT;\n\t\t\tif (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n\t\t\tif (p === IntType) return gl.INT;\n\t\t\tif (p === UnsignedIntType) return gl.UNSIGNED_INT;\n\t\t\tif (p === FloatType) return gl.FLOAT;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return gl.HALF_FLOAT;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return gl.ALPHA;\n\t\t\tif (p === RGBFormat) return gl.RGB;\n\t\t\tif (p === RGBAFormat) return gl.RGBA;\n\t\t\tif (p === LuminanceFormat) return gl.LUMINANCE;\n\t\t\tif (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n\t\t\tif (p === DepthFormat) return gl.DEPTH_COMPONENT;\n\t\t\tif (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n\t\t\tif (p === RedFormat) return gl.RED; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return gl.RED_INTEGER;\n\t\t\tif (p === RGFormat) return gl.RG;\n\t\t\tif (p === RGIntegerFormat) return gl.RG_INTEGER;\n\t\t\tif (p === RGBIntegerFormat) return gl.RGB_INTEGER;\n\t\t\tif (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return gl.UNSIGNED_INT_24_8;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tclass ArrayCamera extends PerspectiveCamera {\n\t\tconstructor(array = []) {\n\t\t\tsuper();\n\t\t\tthis.cameras = array;\n\t\t}\n\n\t}\n\n\tArrayCamera.prototype.isArrayCamera = true;\n\n\tclass Group extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Group';\n\t\t}\n\n\t}\n\n\tGroup.prototype.isGroup = true;\n\n\tfunction WebXRController() {\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\t}\n\n\tObject.assign(WebXRController.prototype, {\n\t\tconstructor: WebXRController,\n\t\tgetHandSpace: function () {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t},\n\t\tgetTargetRaySpace: function () {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t},\n\t\tgetGripSpace: function () {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t},\n\t\tdispatchEvent: function (event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tdisconnect: function (inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tupdate: function (inputSource, frame, referenceSpace) {\n\t\t\tlet inputPose = null;\n\t\t\tlet gripPose = null;\n\t\t\tlet handPose = null;\n\t\t\tconst targetRay = this._targetRay;\n\t\t\tconst grip = this._grip;\n\t\t\tconst hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (const inputjoint of inputSource.hand.values()) {\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tconst jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = joint; // ??\n\n\t\t\t\t\t\t\thand.add(joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tconst indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tconst thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tconst distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction WebXRManager(renderer, gl) {\n\t\tconst scope = this;\n\t\tconst state = renderer.state;\n\t\tlet session = null;\n\t\tlet framebufferScaleFactor = 1.0;\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\t\tlet pose = null;\n\t\tconst controllers = [];\n\t\tconst inputSourcesMap = new Map(); //\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable(1);\n\t\tcameraL.viewport = new Vector4();\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable(2);\n\t\tcameraR.viewport = new Vector4();\n\t\tconst cameras = [cameraL, cameraR];\n\t\tconst cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable(1);\n\t\tcameraVR.layers.enable(2);\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null; //\n\n\t\tthis.enabled = false;\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function (index) {\n\t\t\tlet controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\t\t};\n\n\t\tthis.getControllerGrip = function (index) {\n\t\t\tlet controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\t\t};\n\n\t\tthis.getHand = function (index) {\n\t\t\tlet controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\t\t}; //\n\n\n\t\tfunction onSessionEvent(event) {\n\t\t\tconst controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\tif (controller) {\n\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\ttype: event.type,\n\t\t\t\t\tdata: event.inputSource\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t});\n\t\t\tinputSourcesMap.clear();\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null; // restore framebuffer/rendering state\n\n\t\t\tstate.bindXRFramebuffer(null);\n\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); //\n\n\t\t\tanimation.stop();\n\t\t\tscope.isPresenting = false;\n\t\t\tscope.dispatchEvent({\n\t\t\t\ttype: 'sessionend'\n\t\t\t});\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\t\t\treturn referenceSpace;\n\t\t};\n\n\t\tthis.getSession = function () {\n\t\t\treturn session;\n\t\t};\n\n\t\tthis.setSession = async function (value) {\n\t\t\tsession = value;\n\n\t\t\tif (session !== null) {\n\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\tconst attributes = gl.getContextAttributes();\n\n\t\t\t\tif (attributes.xrCompatible !== true) {\n\t\t\t\t\tawait gl.makeXRCompatible();\n\t\t\t\t}\n\n\t\t\t\tconst layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\tconst baseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\tsession.updateRenderState({\n\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t});\n\t\t\t\treferenceSpace = await session.requestReferenceSpace(referenceSpaceType);\n\t\t\t\tanimation.setContext(session);\n\t\t\t\tanimation.start();\n\t\t\t\tscope.isPresenting = true;\n\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tfunction onInputSourcesChange(event) {\n\t\t\tconst inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t} // Notify disconnected\n\n\n\t\t\tfor (let i = 0; i < event.removed.length; i++) {\n\t\t\t\tconst inputSource = event.removed[i];\n\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t});\n\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t}\n\t\t\t} // Notify connected\n\n\n\t\t\tfor (let i = 0; i < event.added.length; i++) {\n\t\t\t\tconst inputSource = event.added[i];\n\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} //\n\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\n\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\tconst ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\n\t\t\tconst near = projL[14] / (projL[10] - 1);\n\t\t\tconst far = projL[14] / (projL[10] + 1);\n\t\t\tconst topFov = (projL[9] + 1) / projL[5];\n\t\t\tconst bottomFov = (projL[9] - 1) / projL[5];\n\t\t\tconst leftFov = (projL[8] - 1) / projL[0];\n\t\t\tconst rightFov = (projR[8] + 1) / projR[0];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\tconst zOffset = ipd / (-leftFov + rightFov);\n\t\t\tconst xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.translateX(xOffset);\n\t\t\tcamera.translateZ(zOffset);\n\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\n\t\t\tconst near2 = near + zOffset;\n\t\t\tconst far2 = far + zOffset;\n\t\t\tconst left2 = left - xOffset;\n\t\t\tconst right2 = right + (ipd - xOffset);\n\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t}\n\n\t\tfunction updateCamera(camera, parent) {\n\t\t\tif (parent === null) {\n\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t} else {\n\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t}\n\n\t\tthis.getCamera = function (camera) {\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\tsession.updateRenderState({\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t});\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t}\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraVR.cameras;\n\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\tfor (let i = 0; i < cameras.length; i++) {\n\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t} // update camera and its children\n\n\n\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\tcamera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tconst children = camera.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(true);\n\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\tif (cameras.length === 2) {\n\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t} else {\n\t\t\t\t// assume single camera setup (AR)\n\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\t\t}; // Animation Loop\n\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\tif (pose !== null) {\n\t\t\t\tconst views = pose.views;\n\t\t\t\tconst baseLayer = session.renderState.baseLayer;\n\t\t\t\tstate.bindXRFramebuffer(baseLayer.framebuffer);\n\t\t\t\tlet cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < views.length; i++) {\n\t\t\t\t\tconst view = views[i];\n\t\t\t\t\tconst viewport = baseLayer.getViewport(view);\n\t\t\t\t\tconst camera = cameras[i];\n\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tconst inputSources = session.inputSources;\n\n\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\tconst controller = controllers[i];\n\t\t\t\tconst inputSource = inputSources[i];\n\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t}\n\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t};\n\n\t\tthis.dispose = function () {};\n\t}\n\n\tObject.assign(WebXRManager.prototype, EventDispatcher.prototype);\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tconst maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tlet uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tconst canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tlet currentRenderList = null;\n\t\tlet currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tconst renderListStack = [];\n\t\tconst renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // internal properties\n\n\t\tconst _this = this;\n\n\t\tlet _isContextLost = false; // internal state cache\n\n\t\tlet _currentActiveCubeFace = 0;\n\t\tlet _currentActiveMipmapLevel = 0;\n\t\tlet _currentRenderTarget = null;\n\n\t\tlet _currentMaterialId = -1;\n\n\t\tlet _currentCamera = null;\n\n\t\tconst _currentViewport = new Vector4();\n\n\t\tconst _currentScissor = new Vector4();\n\n\t\tlet _currentScissorTest = null; //\n\n\t\tlet _width = _canvas.width;\n\t\tlet _height = _canvas.height;\n\t\tlet _pixelRatio = 1;\n\t\tlet _opaqueSort = null;\n\t\tlet _transparentSort = null;\n\n\t\tconst _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tconst _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tlet _scissorTest = false; // frustum\n\n\t\tconst _frustum = new Frustum(); // clipping\n\n\n\t\tlet _clippingEnabled = false;\n\t\tlet _localClippingEnabled = false; // camera matrices cache\n\n\t\tconst _projScreenMatrix = new Matrix4();\n\n\t\tconst _vector3 = new Vector3();\n\n\t\tconst _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tlet _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (let i = 0; i < contextNames.length; i++) {\n\t\t\t\tconst contextName = contextNames[i];\n\n\t\t\t\tconst context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tconst contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tlet extensions, capabilities, state, info;\n\t\tlet properties, textures, cubemaps, attributes, geometries, objects;\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tlet utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tshadowMap = new WebGLShadowMap(_this, objects, capabilities);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.shadowMap = shadowMap;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tconst xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\n\t\t\t\ttarget = new Color();\n\t\t\t}\n\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tlet bits = 0;\n\t\t\tif (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\txr.removeEventListener('sessionstart', onXRSessionStart);\n\t\t\txr.removeEventListener('sessionend', onXRSessionEnd);\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tconst infoAutoReset = info.autoReset;\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\t\tconst shadowMapType = shadowMap.type;\n\t\t\tinitGLContext();\n\t\t\tinfo.autoReset = infoAutoReset;\n\t\t\tshadowMap.enabled = shadowMapEnabled;\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\t\tshadowMap.type = shadowMapType;\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tconst material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReferences(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReferences(material) {\n\t\t\tconst programs = properties.get(material).programs;\n\n\t\t\tif (programs !== undefined) {\n\t\t\t\tprograms.forEach(function (program) {\n\t\t\t\t\tprogramCache.releaseProgram(program);\n\t\t\t\t});\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tconst buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tconst programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tconst frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tlet index = geometry.index;\n\t\t\tconst position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tlet rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tlet attribute;\n\t\t\tlet renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tconst dataCount = index !== null ? index.count : position.count;\n\t\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tconst drawStart = Math.max(rangeStart, groupStart);\n\t\t\tconst drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tconst drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tlet lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(_gl.LINE_LOOP);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.LINE_STRIP);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(_gl.POINTS);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tconst instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tconst material2 = material[i];\n\t\t\t\t\t\t\tgetProgram(material2, scene, object);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetProgram(material, scene, object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tfunction onXRSessionStart() {\n\t\t\tanimation.stop();\n\t\t}\n\n\t\tfunction onXRSessionEnd() {\n\t\t\tanimation.start();\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t};\n\n\t\txr.addEventListener('sessionstart', onXRSessionStart);\n\t\txr.addEventListener('sessionend', onXRSessionEnd); // Rendering\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tlet renderTarget, forceClear;\n\n\t\t\tif (arguments[2] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n\t\t\t\trenderTarget = arguments[2];\n\t\t\t}\n\n\t\t\tif (arguments[3] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');\n\t\t\t\tforceClear = arguments[3];\n\t\t\t}\n\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tcamera = xr.getCamera(camera);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, renderListStack.length);\n\t\t\tcurrentRenderList.init();\n\t\t\trenderListStack.push(currentRenderList);\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset();\n\n\t\t\tif (renderTarget !== undefined) {\n\t\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\t} //\n\n\n\t\t\tbackground.render(currentRenderList, scene, camera, forceClear); // render scene\n\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null;\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif (renderListStack.length > 0) {\n\t\t\t\tcurrentRenderList = renderListStack[renderListStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderList = null;\n\t\t\t}\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tprojectObject(children[i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (let i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tconst renderItem = renderList[i];\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\t\tfor (let j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tconst camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLightsView(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction getProgram(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tconst lightsStateVersion = lights.state.version;\n\t\t\tconst parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tlet programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);\n\n\t\t\tif (programs === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t\tprograms = new Map();\n\t\t\t\tmaterialProperties.programs = programs;\n\t\t\t}\n\n\t\t\tlet program = programs.get(programCacheKey);\n\n\t\t\tif (program !== undefined) {\n\t\t\t\t// early out if program and light state is identical\n\t\t\t\tif (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {\n\t\t\t\t\tupdateCommonMaterialProperties(material, parameters);\n\t\t\t\t\treturn program;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tprograms.set(programCacheKey, program);\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t}\n\n\t\t\tconst uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t}\n\n\t\t\tupdateCommonMaterialProperties(material, parameters); // store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tconst progUniforms = program.getUniforms();\n\t\t\tconst uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.currentProgram = program;\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction updateCommonMaterialProperties(material, parameters) {\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\tmaterialProperties.instancing = parameters.instancing;\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tconst envMap = cubemaps.get(material.envMap || environment);\n\t\t\tconst vertexAlphas = material.vertexColors === true && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4;\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tconst useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tlet needsProgramChange = false;\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isInstancedMesh && materialProperties.instancing === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isInstancedMesh && materialProperties.instancing === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.vertexAlphas !== vertexAlphas) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tneedsProgramChange = true;\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t} //\n\n\n\t\t\tlet program = materialProperties.currentProgram;\n\n\t\t\tif (needsProgramChange === true) {\n\t\t\t\tprogram = getProgram(material, scene, object);\n\t\t\t}\n\n\t\t\tlet refreshProgram = false;\n\t\t\tlet refreshMaterial = false;\n\t\t\tlet refreshLights = false;\n\t\t\tconst p_uniforms = program.getUniforms(),\n\t\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (material.skinning) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tconst skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tconst bones = skeleton.bones;\n\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) {\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t\t\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\t\t\t\t\tlet size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo(size);\n\t\t\t\t\t\t\tsize = Math.max(size, 4);\n\t\t\t\t\t\t\tconst boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\t\t\t\t\tboneMatrices.set(skeleton.boneMatrices); // copy current values\n\n\t\t\t\t\t\t\tconst boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t}\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tlet framebuffer = null;\n\t\t\tlet isCube = false;\n\t\t\tlet isRenderTarget3D = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tconst texture = renderTarget.texture;\n\n\t\t\t\tif (texture.isDataTexture3D || texture.isDataTexture2DArray) {\n\t\t\t\t\tisRenderTarget3D = true;\n\t\t\t\t}\n\n\t\t\t\tconst __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t} else if (isRenderTarget3D) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\t\t\t\tconst layer = activeCubeFace || 0;\n\n\t\t\t\t_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// restore framebuffer of current render target if necessary\n\t\t\t\t\tconst framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level = 0) {\n\t\t\tconst levelScale = Math.pow(2, -level);\n\t\t\tconst width = Math.floor(texture.image.width * levelScale);\n\t\t\tconst height = Math.floor(texture.image.height * levelScale);\n\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {\n\t\t\tconst width = srcTexture.image.width;\n\t\t\tconst height = srcTexture.image.height;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {\n\t\t\tif (_this.isWebGL1Renderer) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdata\n\t\t\t} = srcTexture.image;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\tlet glTarget;\n\n\t\t\tif (dstTexture.isDataTexture3D) {\n\t\t\t\ttextures.setTexture3D(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\n\t\t\t} else if (dstTexture.isDataTexture2DArray) {\n\t\t\t\ttextures.setTexture2DArray(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tconst unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);\n\n\t\t\tconst unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);\n\n\t\t\tconst unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);\n\n\t\t\tconst unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);\n\n\t\t\tconst unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, width);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, height);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);\n\n\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, sourceBox.max.x - sourceBox.min.x + 1, sourceBox.max.y - sourceBox.min.y + 1, sourceBox.max.z - sourceBox.min.z + 1, glFormat, glType, data);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\t_currentActiveCubeFace = 0;\n\t\t\t_currentActiveMipmapLevel = 0;\n\t\t\t_currentRenderTarget = null;\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tclass WebGL1Renderer extends WebGLRenderer {}\n\n\tWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\n\tclass FogExp2 {\n\t\tconstructor(color, density = 0.00025) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t}\n\n\t\ttoJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tclass Fog {\n\t\tconstructor(color, near = 1, far = 1000) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t}\n\n\t\ttoJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tclass Scene extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Scene';\n\t\t\tthis.background = null;\n\t\t\tthis.environment = null;\n\t\t\tthis.fog = null;\n\t\t\tthis.overrideMaterial = null;\n\t\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: this\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tScene.prototype.isScene = true;\n\n\tfunction InterleavedBuffer(array, stride) {\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t\tthis.uuid = MathUtils.generateUUID();\n\t}\n\n\tObject.defineProperty(InterleavedBuffer.prototype, 'needsUpdate', {\n\t\tset: function (value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tisInterleavedBuffer: true,\n\t\tonUploadCallback: function () {},\n\t\tsetUsage: function (value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function (source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function (index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (let i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function (value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function (data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tconst array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tconst ib = new InterleavedBuffer(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t},\n\t\tonUpload: function (callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function (data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\t});\n\n\tconst _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {\n\t\tthis.name = '';\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\t\tthis.normalized = normalized === true;\n\t}\n\n\tObject.defineProperties(InterleavedBufferAttribute.prototype, {\n\t\tcount: {\n\t\t\tget: function () {\n\t\t\t\treturn this.data.count;\n\t\t\t}\n\t\t},\n\t\tarray: {\n\t\t\tget: function () {\n\t\t\t\treturn this.data.array;\n\t\t\t}\n\t\t},\n\t\tneedsUpdate: {\n\t\t\tset: function (value) {\n\t\t\t\tthis.data.needsUpdate = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBufferAttribute.prototype, {\n\t\tisInterleavedBufferAttribute: true,\n\t\tapplyMatrix4: function (m) {\n\t\t\tfor (let i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyNormalMatrix: function (m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttransformDirection: function (m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsetX: function (index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t},\n\t\tsetY: function (index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetZ: function (index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetW: function (index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function (index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t},\n\t\tgetY: function (index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t},\n\t\tgetZ: function (index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t},\n\t\tgetW: function (index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t},\n\t\tsetXY: function (index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function (index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function (index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function (data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t},\n\t\ttoJSON: function (data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tclass SpriteMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SpriteMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.rotation = 0;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tlet _geometry;\n\n\tconst _intersectPoint = /*@__PURE__*/new Vector3();\n\n\tconst _worldScale = /*@__PURE__*/new Vector3();\n\n\tconst _mvPosition = /*@__PURE__*/new Vector3();\n\n\tconst _alignedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _rotatedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _vA = /*@__PURE__*/new Vector3();\n\n\tconst _vB = /*@__PURE__*/new Vector3();\n\n\tconst _vC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA = /*@__PURE__*/new Vector2();\n\n\tconst _uvB = /*@__PURE__*/new Vector2();\n\n\tconst _uvC = /*@__PURE__*/new Vector2();\n\n\tclass Sprite extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Sprite';\n\n\t\t\tif (_geometry === undefined) {\n\t\t\t\t_geometry = new BufferGeometry();\n\t\t\t\tconst float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\t\tconst interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t\t}\n\n\t\t\tthis.geometry = _geometry;\n\t\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\t\tthis.center = new Vector2(0.5, 0.5);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tconst rotation = this.material.rotation;\n\t\t\tlet sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tconst center = this.center;\n\t\t\ttransformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA.set(0, 0);\n\n\t\t\t_uvB.set(1, 0);\n\n\t\t\t_uvC.set(1, 1); // check first triangle\n\n\n\t\t\tlet intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSprite.prototype.isSprite = true;\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tconst _v1$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$1 = /*@__PURE__*/new Vector3();\n\n\tclass LOD extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis._currentLevel = 0;\n\t\t\tthis.type = 'LOD';\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tlevels: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\tisLOD: {\n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.autoUpdate = true;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tconst levels = source.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\taddLevel(object, distance = 0) {\n\t\t\tdistance = Math.abs(distance);\n\t\t\tconst levels = this.levels;\n\t\t\tlet l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t}\n\n\t\tgetObjectForDistance(distance) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(_v1$2);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$2.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$1.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tconst levels = this.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _basePosition = new Vector3();\n\n\tconst _skinIndex = new Vector4();\n\n\tconst _skinWeight = new Vector4();\n\n\tconst _vector$5 = new Vector3();\n\n\tconst _matrix = new Matrix4();\n\n\tfunction SkinnedMesh(geometry, material) {\n\t\tMesh.call(this, geometry, material);\n\t\tthis.type = 'SkinnedMesh';\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\t}\n\n\tSkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: SkinnedMesh,\n\t\tisSkinnedMesh: true,\n\t\tcopy: function (source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t},\n\t\tbind: function (skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t},\n\t\tpose: function () {\n\t\t\tthis.skeleton.pose();\n\t\t},\n\t\tnormalizeSkinWeights: function () {\n\t\t\tconst vector = new Vector4();\n\t\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (let i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t},\n\t\tupdateMatrixWorld: function (force) {\n\t\t\tMesh.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t},\n\t\tboneTransform: function (index, target) {\n\t\t\tconst skeleton = this.skeleton;\n\t\t\tconst geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tconst weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tconst boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\t});\n\n\tfunction Bone() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Bone';\n\t}\n\n\tBone.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Bone,\n\t\tisBone: true\n\t});\n\n\tconst _offsetMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _identityMatrix = /*@__PURE__*/new Matrix4();\n\n\tclass Skeleton {\n\t\tconstructor(bones = [], boneInverses = []) {\n\t\t\tthis.uuid = MathUtils.generateUUID();\n\t\t\tthis.bones = bones.slice(0);\n\t\t\tthis.boneInverses = boneInverses;\n\t\t\tthis.boneMatrices = null;\n\t\t\tthis.boneTexture = null;\n\t\t\tthis.boneTextureSize = 0;\n\t\t\tthis.frame = -1;\n\t\t\tthis.init();\n\t\t}\n\n\t\tinit() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcalculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t}\n\n\t\tpose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t\tbone.matrix.copy(bone.parent.matrixWorld).invert();\n\t\t\t\t\t\tbone.matrix.multiply(bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbone.matrix.copy(bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tconst boneMatrices = this.boneMatrices;\n\t\t\tconst boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (let i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tconst matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t}\n\n\t\tgetBoneByName(name) {\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t}\n\n\t\tfromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (let i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tconst uuid = json.bones[i];\n\t\t\t\tlet bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\n\t\t\tfor (let i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tconst bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tconst boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _instanceLocalMatrix = new Matrix4();\n\n\tconst _instanceWorldMatrix = new Matrix4();\n\n\tconst _instanceIntersects = [];\n\n\tconst _mesh = new Mesh();\n\n\tfunction InstancedMesh(geometry, material, count) {\n\t\tMesh.call(this, geometry, material);\n\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\tthis.instanceColor = null;\n\t\tthis.count = count;\n\t\tthis.frustumCulled = false;\n\t}\n\n\tInstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: InstancedMesh,\n\t\tisInstancedMesh: true,\n\t\tcopy: function (source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t},\n\t\tgetColorAt: function (index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tgetMatrixAt: function (index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\traycast: function (raycaster, intersects) {\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tconst intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t},\n\t\tsetColorAt: function (index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tsetMatrixAt: function (index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\tupdateMorphTargets: function () {},\n\t\tdispose: function () {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tclass LineBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.linecap = 'round';\n\t\t\tthis.linejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.linewidth = source.linewidth;\n\t\t\tthis.linecap = source.linecap;\n\t\t\tthis.linejoin = source.linejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tconst _start$1 = new Vector3();\n\n\tconst _end$1 = new Vector3();\n\n\tconst _inverseMatrix$1 = new Matrix4();\n\n\tconst _ray$1 = new Ray();\n\n\tconst _sphere$1 = new Sphere();\n\n\tfunction Line(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Line';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tLine.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Line,\n\t\tisLine: true,\n\t\tcopy: function (source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tcomputeLineDistances: function () {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [0];\n\n\t\t\t\t\tfor (let i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\traycast: function (raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Line.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$1.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$1.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\t\t\tconst vStart = new Vector3();\n\t\t\tconst vEnd = new Vector3();\n\t\t\tconst interSegment = new Vector3();\n\t\t\tconst interRay = new Vector3();\n\t\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function () {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tconst _start = new Vector3();\n\n\tconst _end = new Vector3();\n\n\tfunction LineSegments(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineSegments';\n\t}\n\n\tLineSegments.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineSegments,\n\t\tisLineSegments: true,\n\t\tcomputeLineDistances: function () {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [];\n\n\t\t\t\t\tfor (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tclass LineLoop extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineLoop';\n\t\t}\n\n\t}\n\n\tLineLoop.prototype.isLineLoop = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tclass PointsMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PointsMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.size = 1;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.size = source.size;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tconst _inverseMatrix = new Matrix4();\n\n\tconst _ray = new Ray();\n\n\tconst _sphere = new Sphere();\n\n\tconst _position$2 = new Vector3();\n\n\tfunction Points(geometry = new BufferGeometry(), material = new PointsMaterial()) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Points';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tPoints.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Points,\n\t\tisPoints: true,\n\t\tcopy: function (source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\traycast: function (raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Points.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, il = end; i < il; i++) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end; i < l; i++) {\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\ttestPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function () {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tconst rayPointDistanceSq = _ray.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tconst intersectPoint = new Vector3();\n\n\t\t\t_ray.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tclass VideoTexture extends Texture {\n\t\tconstructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tconst scope = this;\n\n\t\t\tfunction updateVideo() {\n\t\t\t\tscope.needsUpdate = true;\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst video = this.image;\n\t\t\tconst hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tVideoTexture.prototype.isVideoTexture = true;\n\n\tclass CompressedTexture extends Texture {\n\t\tconstructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t\t// (also flipping doesn't work for compressed textures )\n\n\t\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t\t// mips must be embedded in DDS files\n\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tclass CanvasTexture extends Texture {\n\t\tconstructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tclass DepthTexture extends Texture {\n\t\tconstructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t\t}\n\n\t\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.flipY = false;\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tclass CircleGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CircleGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (let s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tconst segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tindices.push(i, i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass CylinderGeometry extends BufferGeometry {\n\t\tconstructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CylinderGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tconst scope = this;\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet index = 0;\n\t\t\tconst indexArray = [];\n\t\t\tconst halfHeight = height / 2;\n\t\t\tlet groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tconst normal = new Vector3();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tconst slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (let y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tconst indexRow = [];\n\t\t\t\t\tconst v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tconst radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tconst sinTheta = Math.sin(theta);\n\t\t\t\t\t\tconst cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tfor (let y = 0; y < heightSegments; y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tconst a = indexArray[y][x];\n\t\t\t\t\t\tconst b = indexArray[y + 1][x];\n\t\t\t\t\t\tconst c = indexArray[y + 1][x + 1];\n\t\t\t\t\t\tconst d = indexArray[y][x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tconst centerIndexStart = index;\n\t\t\t\tconst uv = new Vector2();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tconst sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (let x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tconst centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\tconst cosTheta = Math.cos(theta);\n\t\t\t\t\tconst sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass ConeGeometry extends CylinderGeometry {\n\t\tconstructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n\t\t\tthis.type = 'ConeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t}\n\n\t}\n\n\tclass PolyhedronGeometry extends BufferGeometry {\n\t\tconstructor(vertices, indices, radius = 1, detail = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PolyhedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tconst vertexBuffer = [];\n\t\t\tconst uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\tthis.computeVertexNormals(); // flat normals\n\t\t\t} else {\n\t\t\t\tthis.normalizeNormals(); // smooth normals\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (let i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tconst cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tconst v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (let i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tconst aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tconst bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tconst rows = cols - i;\n\n\t\t\t\t\tfor (let j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (let i = 0; i < cols; i++) {\n\t\t\t\t\tfor (let j = 0; j < 2 * (cols - i) - 1; j++) {\n\t\t\t\t\t\tconst k = Math.floor(j / 2);\n\n\t\t\t\t\t\tif (j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tconst vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tconst vertex = new Vector3();\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tconst u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tconst v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (let i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tconst x0 = uvBuffer[i + 0];\n\t\t\t\t\tconst x1 = uvBuffer[i + 2];\n\t\t\t\t\tconst x2 = uvBuffer[i + 4];\n\t\t\t\t\tconst max = Math.max(x0, x1, x2);\n\t\t\t\t\tconst min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tconst stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3();\n\t\t\t\tconst centroid = new Vector3();\n\t\t\t\tconst uvA = new Vector2();\n\t\t\t\tconst uvB = new Vector2();\n\t\t\t\tconst uvC = new Vector2();\n\n\t\t\t\tfor (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tconst azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass DodecahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst r = 1 / t;\n\t\t\tconst vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tconst indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'DodecahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst _v0 = new Vector3();\n\n\tconst _v1$1 = new Vector3();\n\n\tconst _normal = new Vector3();\n\n\tconst _triangle = new Triangle();\n\n\tclass EdgesGeometry extends BufferGeometry {\n\t\tconstructor(geometry, thresholdAngle) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EdgesGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow(10, precisionPoints);\n\t\t\tconst thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle);\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute('position');\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tconst indexArr = [0, 0, 0];\n\t\t\tconst vertKeys = ['a', 'b', 'c'];\n\t\t\tconst hashes = new Array(3);\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\n\t\t\tfor (let i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tconst {\n\t\t\t\t\ta,\n\t\t\t\t\tb,\n\t\t\t\t\tc\n\t\t\t\t} = _triangle;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n\t\t\t\thashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n\t\t\t\thashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = (j + 1) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[j];\n\t\t\t\t\tconst vecHash1 = hashes[jNext];\n\t\t\t\t\tconst v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tconst v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tconst hash = `${vecHash0}_${vecHash1}`;\n\t\t\t\t\tconst reverseHash = `${vecHash1}_${vecHash0}`;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (const key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tindex0,\n\t\t\t\t\t\tindex1\n\t\t\t\t\t} = edgeData[key];\n\n\t\t\t\t\t_v0.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$1.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0.x, _v0.y, _v0.z);\n\t\t\t\t\tvertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tconst Earcut = {\n\t\ttriangulate: function (data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\t\tconst outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tlet outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tconst triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (let i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tlet i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tlet p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tlet stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tlet p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tconst minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tconst minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tlet p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tconst a = p.prev,\n\t\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tlet a = start;\n\n\t\tdo {\n\t\t\tlet b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tlet c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tconst queue = [];\n\t\tlet i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tconst b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tlet p = outerNode;\n\t\tconst hx = hole.x;\n\t\tconst hy = hole.y;\n\t\tlet qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tconst x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tconst stop = m,\n\t\t\t\t\tmx = m.x,\n\t\t\t\t\tmy = m.y;\n\t\tlet tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tlet i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tlet p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tconst o1 = sign(area(p1, q1, p2));\n\t\tconst o2 = sign(area(p1, q1, q2));\n\t\tconst o3 = sign(area(p2, q2, p1));\n\t\tconst o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tlet p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tlet p = a,\n\t\t\t\tinside = false;\n\t\tconst px = (a.x + b.x) / 2,\n\t\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tconst a2 = new Node(a.i, a.x, a.y),\n\t\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\t\tan = a.next,\n\t\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tconst p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tlet sum = 0;\n\n\t\tfor (let i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tconst ShapeUtils = {\n\t\t// calculate area of the contour polygon\n\t\tarea: function (contour) {\n\t\t\tconst n = contour.length;\n\t\t\tlet a = 0.0;\n\n\t\t\tfor (let p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t},\n\t\tisClockWise: function (pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t},\n\t\ttriangulateShape: function (contour, holes) {\n\t\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tconst holeIndices = []; // array of hole indices\n\n\t\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tlet holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (let i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tconst triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\t\tfaces.push(triangles.slice(i, i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\t};\n\n\tfunction removeDupEndPts(points) {\n\t\tconst l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (let i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\t/**\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\tsteps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *\tdepth: <float>, // Depth to extrude the shape\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into the original shape bevel goes\n\t *\tbevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float>, // how far from shape outline does bevel start\n\t *\tbevelSegments: <int>, // number of bevel layers\n\t *\n\t *\textrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *\tUVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\tclass ExtrudeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, options) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ExtrudeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\t\t\tconst scope = this;\n\t\t\tconst verticesArray = [];\n\t\t\tconst uvArray = [];\n\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\t\t\tthis.computeVertexNormals(); // functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst placeholder = []; // options\n\n\t\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tlet depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tconst extrudePath = options.extrudePath;\n\t\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tlet extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tconst shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tlet vertices = shapePoints.shape;\n\t\t\t\tconst holes = shapePoints.holes;\n\t\t\t\tconst reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\tvertices = vertices.concat(ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tconst vlen = vertices.length,\n\t\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tconst v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tconst collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tconst v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tconst v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tconst ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tconst ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tconst ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tconst ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tconst sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tconst v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tconst contourMovements = [];\n\n\t\t\t\tfor (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tconst holesMovements = [];\n\t\t\t\tlet oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (let b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\t\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(vert.x, vert.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (let s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(vert.x, vert.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (let b = bevelSegments - 1; b >= 0; b--) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tlet layer = 0; // steps + 1\n\n\t\t\t\t\t\tlet offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + offset, face[1] + offset, face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2], face[1], face[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\t\tlet layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\tsidewalls(ahole, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += ahole.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tlet i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tconst j = i;\n\t\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\t\tif (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\n\t\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\t\tconst slen2 = vlen * (s + 1);\n\t\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\t\t\t\t\t\t\tf4(a, b, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\tconst options = this.parameters.options;\n\t\t\treturn toJSON$1(shapes, options, data);\n\t\t}\n\n\t}\n\n\tconst WorldUVGenerator = {\n\t\tgenerateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst a_z = vertices[indexA * 3 + 2];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst b_z = vertices[indexB * 3 + 2];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\tconst c_z = vertices[indexC * 3 + 2];\n\t\t\tconst d_x = vertices[indexD * 3];\n\t\t\tconst d_y = vertices[indexD * 3 + 1];\n\t\t\tconst d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < 0.01) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction toJSON$1(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tclass IcosahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tconst indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'IcosahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\tclass LatheGeometry extends BufferGeometry {\n\t\tconstructor(points, segments = 12, phiStart = 0, phiLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LatheGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = MathUtils.clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst inverseSegments = 1.0 / segments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tconst sin = Math.sin(phi);\n\t\t\t\tconst cos = Math.cos(phi);\n\n\t\t\t\tfor (let j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 0; i < segments; i++) {\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tconst base = j + i * points.length;\n\t\t\t\t\tconst a = base;\n\t\t\t\t\tconst b = base + points.length;\n\t\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\t\tconst d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\t\t\tthis.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tconst normals = this.attributes.normal.array;\n\t\t\t\tconst n1 = new Vector3();\n\t\t\t\tconst n2 = new Vector3();\n\t\t\t\tconst n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tconst base = segments * points.length * 3;\n\n\t\t\t\tfor (let i = 0, j = 0; i < points.length; i++, j += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[j + 0];\n\t\t\t\t\tn1.y = normals[j + 1];\n\t\t\t\t\tn1.z = normals[j + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[base + j + 0];\n\t\t\t\t\tn2.y = normals[base + j + 1];\n\t\t\t\t\tn2.z = normals[base + j + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[j + 0] = normals[base + j + 0] = n.x;\n\t\t\t\t\tnormals[j + 1] = normals[base + j + 1] = n.y;\n\t\t\t\t\tnormals[j + 2] = normals[base + j + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass OctahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tconst indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'OctahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tfunction ParametricGeometry(func, slices, stacks) {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'ParametricGeometry';\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t}; // buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst EPS = 0.00001;\n\t\tconst normal = new Vector3();\n\t\tconst p0 = new Vector3(),\n\t\t\t\t\tp1 = new Vector3();\n\t\tconst pu = new Vector3(),\n\t\t\t\t\tpv = new Vector3();\n\n\t\tif (func.length < 3) {\n\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t} // generate vertices, normals and uvs\n\n\n\t\tconst sliceCount = slices + 1;\n\n\t\tfor (let i = 0; i <= stacks; i++) {\n\t\t\tconst v = i / stacks;\n\n\t\t\tfor (let j = 0; j <= slices; j++) {\n\t\t\t\tconst u = j / slices; // vertex\n\n\t\t\t\tfunc(u, v, p0);\n\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t}\n\n\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\tuvs.push(u, v);\n\t\t\t}\n\t\t} // generate indices\n\n\n\t\tfor (let i = 0; i < stacks; i++) {\n\t\t\tfor (let j = 0; j < slices; j++) {\n\t\t\t\tconst a = i * sliceCount + j;\n\t\t\t\tconst b = i * sliceCount + j + 1;\n\t\t\t\tconst c = (i + 1) * sliceCount + j + 1;\n\t\t\t\tconst d = (i + 1) * sliceCount + j; // faces one and two\n\n\t\t\t\tindices.push(a, b, d);\n\t\t\t\tindices.push(b, c, d);\n\t\t\t}\n\t\t} // build geometry\n\n\n\t\tthis.setIndex(indices);\n\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t}\n\n\tParametricGeometry.prototype = Object.create(BufferGeometry.prototype);\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\tclass RingGeometry extends BufferGeometry {\n\t\tconstructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'RingGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // some helper variables\n\n\t\t\tlet radius = innerRadius;\n\t\t\tconst radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (let j = 0; j < phiSegments; j++) {\n\t\t\t\tconst thetaSegmentLevel = j * (thetaSegments + 1);\n\n\t\t\t\tfor (let i = 0; i < thetaSegments; i++) {\n\t\t\t\t\tconst segment = i + thetaSegmentLevel;\n\t\t\t\t\tconst a = segment;\n\t\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\t\tconst d = segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass ShapeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, curveSegments = 12) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShapeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet groupStart = 0;\n\t\t\tlet groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\t\t\t\t\tthis.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\t\tconst points = shape.extractPoints(curveSegments);\n\t\t\t\tlet shapeVertices = points.shape;\n\t\t\t\tconst shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (let i = 0, l = shapeVertices.length; i < l; i++) {\n\t\t\t\t\tconst vertex = shapeVertices[i];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (let i = 0, l = faces.length; i < l; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst a = face[0] + indexOffset;\n\t\t\t\t\tconst b = face[1] + indexOffset;\n\t\t\t\t\tconst c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\treturn toJSON(shapes, data);\n\t\t}\n\n\t}\n\n\tfunction toJSON(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tclass SphereGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, widthSegments = 8, heightSegments = 6, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SphereGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tconst thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tlet index = 0;\n\t\t\tconst grid = [];\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (let iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tconst verticesRow = [];\n\t\t\t\tconst v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tlet uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (let ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tconst u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (let iy = 0; iy < heightSegments; iy++) {\n\t\t\t\tfor (let ix = 0; ix < widthSegments; ix++) {\n\t\t\t\t\tconst a = grid[iy][ix + 1];\n\t\t\t\t\tconst b = grid[iy][ix];\n\t\t\t\t\tconst c = grid[iy + 1][ix];\n\t\t\t\t\tconst d = grid[iy + 1][ix + 1];\n\t\t\t\t\tif (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass TetrahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tconst indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'TetrahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\t/**\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *\tfont: <THREE.Font>, // font\n\t *\n\t *\tsize: <float>, // size of the text\n\t *\theight: <float>, // thickness to extrude text\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into text bevel goes\n\t *\tbevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\tclass TextGeometry extends ExtrudeGeometry {\n\t\tconstructor(text, parameters = {}) {\n\t\t\tconst font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry();\n\t\t\t}\n\n\t\t\tconst shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\tsuper(shapes, parameters);\n\t\t\tthis.type = 'TextGeometry';\n\t\t}\n\n\t}\n\n\tclass TorusGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst center = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= tubularSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (tubularSegments + 1) * j + i - 1;\n\t\t\t\t\tconst b = (tubularSegments + 1) * (j - 1) + i - 1;\n\t\t\t\t\tconst c = (tubularSegments + 1) * (j - 1) + i;\n\t\t\t\t\tconst d = (tubularSegments + 1) * j + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass TorusKnotGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusKnotGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst P1 = new Vector3();\n\t\t\tconst P2 = new Vector3();\n\t\t\tconst B = new Vector3();\n\t\t\tconst T = new Vector3();\n\t\t\tconst N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tconst u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst cx = -tube * Math.cos(v);\n\t\t\t\t\tconst cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tconst cu = Math.cos(u);\n\t\t\t\tconst su = Math.sin(u);\n\t\t\t\tconst quOverP = q / p * u;\n\t\t\t\tconst cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass TubeGeometry extends BufferGeometry {\n\t\tconstructor(path, tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TubeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tconst frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\tthis.tangents = frames.tangents;\n\t\t\tthis.normals = frames.normals;\n\t\t\tthis.binormals = frames.binormals; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst uv = new Vector2();\n\t\t\tlet P = new Vector3(); // buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (let i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tconst N = frames.normals[i];\n\t\t\t\tconst B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst sin = Math.sin(v);\n\t\t\t\t\tconst cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tclass WireframeGeometry extends BufferGeometry {\n\t\tconstructor(geometry) {\n\t\t\tsuper();\n\t\t\tthis.type = 'WireframeGeometry';\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t} // buffer\n\n\n\t\t\tconst vertices = []; // helper variables\n\n\t\t\tconst edge = [0, 0],\n\t\t\t\t\t\tedges = {};\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\t// indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\tgroups = [{\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t}];\n\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\tfor (let o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\tconst group = groups[o];\n\t\t\t\t\tconst start = group.start;\n\t\t\t\t\tconst count = group.count;\n\n\t\t\t\t\tfor (let i = start, l = start + count; i < l; i += 3) {\n\t\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tconst edge1 = indices.getX(i + j);\n\t\t\t\t\t\t\tconst edge2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\t\tconst key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (const key in edges) {\n\t\t\t\t\tconst e = edges[key];\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index1);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index2);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor (let i = 0, l = position.count / 3; i < l; i++) {\n\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute(position, index1);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t\tconst index2 = 3 * i + (j + 1) % 3;\n\t\t\t\t\t\tvertex.fromBufferAttribute(position, index2);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tclass ShadowMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShadowMaterial';\n\t\t\tthis.color = new Color(0x000000);\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tclass RawShaderMaterial extends ShaderMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper(parameters);\n\t\t\tthis.type = 'RawShaderMaterial';\n\t\t}\n\n\t}\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.type = 'MeshStandardMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.roughnessMap = null;\n\t\tthis.metalnessMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.flatShading = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create(Material.prototype);\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.roughnessMap = source.roughnessMap;\n\t\tthis.metalnessMap = source.metalnessMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.flatShading = source.flatShading;\n\t\tthis.vertexTangents = source.vertexTangents;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial(parameters) {\n\t\tMeshStandardMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.type = 'MeshPhysicalMaterial';\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\tthis.clearcoatNormalMap = null;\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tObject.defineProperty(this, 'ior', {\n\t\t\tget: function () {\n\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t},\n\t\t\tset: function (ior) {\n\t\t\t\tthis.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t}\n\t\t});\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transmission = 0.0;\n\t\tthis.transmissionMap = null;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function (source) {\n\t\tMeshStandardMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif (source.sheen) {\n\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t} else {\n\t\t\tthis.sheen = null;\n\t\t}\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshPhongMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshPhongMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.specular = new Color(0x111111);\n\t\t\tthis.shininess = 30;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.specular.copy(source.specular);\n\t\t\tthis.shininess = source.shininess;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass MeshToonMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'TOON': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshToonMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.gradientMap = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.gradientMap = source.gradientMap;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshNormalMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshNormalMaterial';\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass MeshLambertMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshLambertMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshMatcapMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshMatcapMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.matcap = null;\n\t\t\tthis.map = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.matcap = source.matcap;\n\t\t\tthis.map = source.map;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tclass LineDashedMaterial extends LineBasicMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineDashedMaterial';\n\t\t\tthis.scale = 1;\n\t\t\tthis.dashSize = 3;\n\t\t\tthis.gapSize = 1;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.scale = source.scale;\n\t\t\tthis.dashSize = source.dashSize;\n\t\t\tthis.gapSize = source.gapSize;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tconst AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function (array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function (array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function (object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function (times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tconst n = times.length;\n\t\t\tconst result = new Array(n);\n\n\t\t\tfor (let i = 0; i !== n; ++i) result[i] = i;\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function (values, stride, order) {\n\t\t\tconst nValues = values.length;\n\t\t\tconst result = new values.constructor(nValues);\n\n\t\t\tfor (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tconst srcOffset = order[i] * stride;\n\n\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function (jsonKeys, times, values, valuePropertyName) {\n\t\t\tlet i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tlet value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function (sourceClip, name, startFrame, endFrame, fps = 30) {\n\t\t\tconst clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tconst track = clip.tracks[i];\n\t\t\t\tconst valueSize = track.getValueSize();\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (let j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tconst frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (let k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tlet minStartTime = Infinity;\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tif (minStartTime > clip.tracks[i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tclip.tracks[i].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function (targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tconst numTracks = referenceClip.tracks.length;\n\t\t\tconst referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tfor (let i = 0; i < numTracks; ++i) {\n\t\t\t\tconst referenceTrack = referenceClip.tracks[i];\n\t\t\t\tconst referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tconst targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) continue;\n\t\t\t\tlet referenceOffset = 0;\n\t\t\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tlet targetOffset = 0;\n\t\t\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tlet referenceValue; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tconst referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tconst numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (let j = 0; j < numTimes; ++j) {\n\t\t\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (let k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tfunction Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\t}\n\n\tObject.assign(Interpolant.prototype, {\n\t\tevaluate: function (t) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tlet right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tconst t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tconst mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t},\n\t\tsettings: null,\n\t\t// optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\t\t// --- Protected interface\n\t\tDefaultSettings_: {},\n\t\tgetSettings_: function () {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t},\n\t\tcopySampleValue_: function (index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// Template methods for derived classes:\n\t\tinterpolate_: function ()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t},\n\t\tintervalChanged_: function ()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(Interpolant.prototype, {\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_\n\t});\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tfunction CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\t}\n\n\tCubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: CubicInterpolant,\n\t\tDefaultSettings_: {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t},\n\t\tintervalChanged_: function (i1, t0, t1) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t},\n\t\tinterpolate_: function (i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tpp = p * p,\n\t\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tconst sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tconst s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tconst s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tconst sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\tfunction LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: LinearInterpolant,\n\t\tinterpolate_: function (i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tfunction DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: DiscreteInterpolant,\n\t\tinterpolate_: function (i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\t});\n\n\tclass KeyframeTrack {\n\t\tconstructor(name, times, values, interpolation) {\n\t\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\t\tthis.name = name;\n\t\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t\t} // Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\n\t\tstatic toJSON(track) {\n\t\t\tconst trackType = track.constructor;\n\t\t\tlet json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== this.toJSON) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\n\t\tInterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tsetInterpolation(interpolation) {\n\t\t\tlet factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tconst message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t}\n\n\t\tgetValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t} // move all keyframes either forwards or backwards in time\n\n\n\t\tshift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\n\n\t\tscale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\n\n\t\ttrim(startTime, endTime) {\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tnKeys = times.length;\n\t\t\tlet from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tconst stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\t\t\tconst valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tvalues = this.values,\n\t\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tlet prevTime = null;\n\n\t\t\tfor (let i = 0; i !== nKeys; i++) {\n\t\t\t\tconst currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (let i = 0, n = values.length; i !== n; ++i) {\n\t\t\t\t\t\tconst value = values[i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t} // removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n\n\t\toptimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tconst times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tlet writeIndex = 1;\n\n\t\t\tfor (let i = 1; i < lastIndex; ++i) {\n\t\t\t\tlet keep = false;\n\t\t\t\tconst time = times[i];\n\t\t\t\tconst timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tconst value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tconst values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tconst TypedKeyframeTrack = this.constructor;\n\t\t\tconst track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\n\t}\n\n\tKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\tKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\tKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tclass BooleanKeyframeTrack extends KeyframeTrack {}\n\n\tBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\tBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\tBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tclass ColorKeyframeTrack extends KeyframeTrack {}\n\n\tColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tclass NumberKeyframeTrack extends KeyframeTrack {}\n\n\tNumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tfunction QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: QuaternionLinearInterpolant,\n\t\tinterpolate_: function (i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tlet offset = i1 * stride;\n\n\t\t\tfor (let end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tclass QuaternionKeyframeTrack extends KeyframeTrack {\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\n\n\tQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\tQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tclass StringKeyframeTrack extends KeyframeTrack {}\n\n\tStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\tStringKeyframeTrack.prototype.ValueBufferType = Array;\n\tStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tclass VectorKeyframeTrack extends KeyframeTrack {}\n\n\tVectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\n\n\tclass AnimationClip {\n\t\tconstructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {\n\t\t\tthis.name = name;\n\t\t\tthis.tracks = tracks;\n\t\t\tthis.duration = duration;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tthis.uuid = MathUtils.generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\t\tif (this.duration < 0) {\n\t\t\t\tthis.resetDuration();\n\t\t\t}\n\t\t}\n\n\t\tstatic parse(json) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (let i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tconst clip = new this(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t}\n\n\t\tstatic toJSON(clip) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tconst json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (let i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t}\n\n\t\tstatic CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < numMorphTargets; i++) {\n\t\t\t\tlet times = [];\n\t\t\t\tlet values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tconst order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new this(name, -1, tracks);\n\t\t}\n\n\t\tstatic findByName(objectOrClipArray, name) {\n\t\t\tlet clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tconst o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tstatic CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tconst animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (let i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tconst morphTarget = morphTargets[i];\n\t\t\t\tconst parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tconst name = parts[1];\n\t\t\t\t\tlet animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst clips = [];\n\n\t\t\tfor (const name in animationToMorphTargets) {\n\t\t\t\tclips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t} // parse the animation.hierarchy format\n\n\n\t\tstatic parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst tracks = [];\n\t\t\tconst clipName = animation.name || 'default';\n\t\t\tconst fps = animation.fps || 30;\n\t\t\tconst blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tlet duration = animation.length || -1;\n\t\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (let h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tconst animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tconst morphTargetNames = {};\n\t\t\t\t\tlet k;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (const morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tconst times = [];\n\t\t\t\t\t\tconst values = [];\n\n\t\t\t\t\t\tfor (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n\t\t\t\t\t\t\tconst animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tconst boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst clip = new this(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\n\t\tresetDuration() {\n\t\t\tconst tracks = this.tracks;\n\t\t\tlet duration = 0;\n\n\t\t\tfor (let i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tconst track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t}\n\n\t\ttrim() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t}\n\n\t\toptimize() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new this.constructor(this.name, this.duration, tracks, this.blendMode);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.constructor.toJSON(this);\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tconst trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tconst times = [],\n\t\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tconst Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function (key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function (key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function (key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function () {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tfunction LoadingManager(onLoad, onProgress, onError) {\n\t\tconst scope = this;\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function (url) {\n\t\t\titemsTotal++;\n\n\t\t\tif (isLoading === false) {\n\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tisLoading = true;\n\t\t};\n\n\t\tthis.itemEnd = function (url) {\n\t\t\titemsLoaded++;\n\n\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t}\n\n\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\tscope.onLoad();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.itemError = function (url) {\n\t\t\tif (scope.onError !== undefined) {\n\t\t\t\tscope.onError(url);\n\t\t\t}\n\t\t};\n\n\t\tthis.resolveURL = function (url) {\n\t\t\tif (urlModifier) {\n\t\t\t\treturn urlModifier(url);\n\t\t\t}\n\n\t\t\treturn url;\n\t\t};\n\n\t\tthis.setURLModifier = function (transform) {\n\t\t\turlModifier = transform;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.addHandler = function (regex, loader) {\n\t\t\thandlers.push(regex, loader);\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.removeHandler = function (regex) {\n\t\t\tconst index = handlers.indexOf(regex);\n\n\t\t\tif (index !== -1) {\n\t\t\t\thandlers.splice(index, 2);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.getHandler = function (file) {\n\t\t\tfor (let i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\tconst regex = handlers[i];\n\t\t\t\tconst loader = handlers[i + 1];\n\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\treturn loader;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n\n\tconst DefaultLoadingManager = new LoadingManager();\n\n\tfunction Loader(manager) {\n\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\t}\n\n\tObject.assign(Loader.prototype, {\n\t\tload: function ()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{},\n\t\tloadAsync: function (url, onProgress) {\n\t\t\tconst scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t},\n\t\tparse: function ()\n\t\t/* data */\n\t\t{},\n\t\tsetCrossOrigin: function (crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t},\n\t\tsetWithCredentials: function (value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetPath: function (path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t},\n\t\tsetResourcePath: function (resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t},\n\t\tsetRequestHeader: function (requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tconst loading = {};\n\n\tfunction FileLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFileLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FileLoader,\n\t\tload: function (url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tconst dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tconst dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tlet request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tconst mimeType = dataUriRegexResult[1];\n\t\t\t\tconst isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tlet data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tlet response;\n\t\t\t\t\tconst responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tconst view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tconst response = this.response;\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (const header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t},\n\t\tsetResponseType: function (value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetMimeType: function (value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tclass AnimationLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst animations = [];\n\n\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\tconst clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CompressedTextureLoader,\n\t\tload: function (url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst images = [];\n\t\t\tconst texture = new CompressedTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (let i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (let f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (let i = 0; i < texDatas.mipmapCount; i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tclass ImageLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\n\t}\n\n\tclass CubeTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(urls, onLoad, onProgress, onError) {\n\t\t\tconst texture = new CubeTexture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tDataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: DataTextureLoader,\n\t\tload: function (url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst texture = new DataTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tconst texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\tif (texData.generateMipmaps !== undefined) {\n\t\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction TextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: TextureLoader,\n\t\tload: function (url, onLoad, onProgress, onError) {\n\t\t\tconst texture = new Texture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tconst isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tfunction Curve() {\n\t\tthis.type = 'Curve';\n\t\tthis.arcLengthDivisions = 200;\n\t}\n\n\tObject.assign(Curve.prototype, {\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\t\tgetPoint: function ()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t},\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\t\tgetPointAt: function (u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t},\n\t\t// Get sequence of points using getPoint( t )\n\t\tgetPoints: function (divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get sequence of points using getPointAt( u )\n\t\tgetSpacedPoints: function (divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get total curve arc length\n\t\tgetLength: function () {\n\t\t\tconst lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t},\n\t\t// Get list of cumulative segment lengths\n\t\tgetLengths: function (divisions) {\n\t\t\tif (divisions === undefined) divisions = this.arcLengthDivisions;\n\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tconst cache = [];\n\t\t\tlet current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tlet sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (let p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t},\n\t\tupdateArcLengths: function () {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t},\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\tgetUtoTmapping: function (u, distance) {\n\t\t\tconst arcLengths = this.getLengths();\n\t\t\tlet i = 0;\n\t\t\tconst il = arcLengths.length;\n\t\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tlet low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tconst lengthBefore = arcLengths[i];\n\t\t\tconst lengthAfter = arcLengths[i + 1];\n\t\t\tconst segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tconst segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tconst t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t},\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\t\tgetTangent: function (t, optionalTarget) {\n\t\t\tconst delta = 0.0001;\n\t\t\tlet t1 = t - delta;\n\t\t\tlet t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tconst pt1 = this.getPoint(t1);\n\t\t\tconst pt2 = this.getPoint(t2);\n\t\t\tconst tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t},\n\t\tgetTangentAt: function (u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t},\n\t\tcomputeFrenetFrames: function (segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tconst normal = new Vector3();\n\t\t\tconst tangents = [];\n\t\t\tconst normals = [];\n\t\t\tconst binormals = [];\n\t\t\tconst vec = new Vector3();\n\t\t\tconst mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tlet min = Number.MAX_VALUE;\n\t\t\tconst tx = Math.abs(tangents[0].x);\n\t\t\tconst ty = Math.abs(tangents[0].y);\n\t\t\tconst tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tnormals[i] = normals[i - 1].clone();\n\t\t\t\tbinormals[i] = binormals[i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[i - 1], tangents[i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tconst theta = Math.acos(MathUtils.clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tlet theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\ttheta = -theta;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n\t\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t},\n\t\tclone: function () {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function (source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function () {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function (json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tclass EllipseCurve extends Curve {\n\t\tconstructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EllipseCurve';\n\t\t\tthis.aX = aX;\n\t\t\tthis.aY = aY;\n\t\t\tthis.xRadius = xRadius;\n\t\t\tthis.yRadius = yRadius;\n\t\t\tthis.aStartAngle = aStartAngle;\n\t\t\tthis.aEndAngle = aEndAngle;\n\t\t\tthis.aClockwise = aClockwise;\n\t\t\tthis.aRotation = aRotation;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget) {\n\t\t\tconst point = optionalTarget || new Vector2();\n\t\t\tconst twoPi = Math.PI * 2;\n\t\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\t\tconst samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\t\twhile (deltaAngle < 0) deltaAngle += twoPi;\n\n\t\t\twhile (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n\t\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\t\tif (samePoints) {\n\t\t\t\t\tdeltaAngle = 0;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\t\tlet x = this.aX + this.xRadius * Math.cos(angle);\n\t\t\tlet y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\t\tif (this.aRotation !== 0) {\n\t\t\t\tconst cos = Math.cos(this.aRotation);\n\t\t\t\tconst sin = Math.sin(this.aRotation);\n\t\t\t\tconst tx = x - this.aX;\n\t\t\t\tconst ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t\t}\n\n\t\t\treturn point.set(x, y);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.aX = source.aX;\n\t\t\tthis.aY = source.aY;\n\t\t\tthis.xRadius = source.xRadius;\n\t\t\tthis.yRadius = source.yRadius;\n\t\t\tthis.aStartAngle = source.aStartAngle;\n\t\t\tthis.aEndAngle = source.aEndAngle;\n\t\t\tthis.aClockwise = source.aClockwise;\n\t\t\tthis.aRotation = source.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.aX = this.aX;\n\t\t\tdata.aY = this.aY;\n\t\t\tdata.xRadius = this.xRadius;\n\t\t\tdata.yRadius = this.yRadius;\n\t\t\tdata.aStartAngle = this.aStartAngle;\n\t\t\tdata.aEndAngle = this.aEndAngle;\n\t\t\tdata.aClockwise = this.aClockwise;\n\t\t\tdata.aRotation = this.aRotation;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.aX = json.aX;\n\t\t\tthis.aY = json.aY;\n\t\t\tthis.xRadius = json.xRadius;\n\t\t\tthis.yRadius = json.yRadius;\n\t\t\tthis.aStartAngle = json.aStartAngle;\n\t\t\tthis.aEndAngle = json.aEndAngle;\n\t\t\tthis.aClockwise = json.aClockwise;\n\t\t\tthis.aRotation = json.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tclass ArcCurve extends EllipseCurve {\n\t\tconstructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tsuper(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\tthis.type = 'ArcCurve';\n\t\t}\n\n\t}\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tlet c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function (x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tlet t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tlet t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function (t) {\n\t\t\t\tconst t2 = t * t;\n\t\t\t\tconst t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tconst tmp = new Vector3();\n\tconst px = new CubicPoly(),\n\t\t\t\tpy = new CubicPoly(),\n\t\t\t\tpz = new CubicPoly();\n\n\tclass CatmullRomCurve3 extends Curve {\n\t\tconstructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CatmullRomCurve3';\n\t\t\tthis.points = points;\n\t\t\tthis.closed = closed;\n\t\t\tthis.curveType = curveType;\n\t\t\tthis.tension = tension;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst l = points.length;\n\t\t\tconst p = (l - (this.closed ? 0 : 1)) * t;\n\t\t\tlet intPoint = Math.floor(p);\n\t\t\tlet weight = p - intPoint;\n\n\t\t\tif (this.closed) {\n\t\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\t\t\t}\n\n\t\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\t\tif (this.closed || intPoint > 0) {\n\t\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\t\tp0 = tmp;\n\t\t\t}\n\n\t\t\tconst p1 = points[intPoint % l];\n\t\t\tconst p2 = points[(intPoint + 1) % l];\n\n\t\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\t\tp3 = tmp;\n\t\t\t}\n\n\t\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tlet dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\t\tlet dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\t\tlet dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t\t}\n\n\t\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\tthis.closed = source.closed;\n\t\t\tthis.curveType = source.curveType;\n\t\t\tthis.tension = source.tension;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\tdata.closed = this.closed;\n\t\t\tdata.curveType = this.curveType;\n\t\t\tdata.tension = this.tension;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t\t}\n\n\t\t\tthis.closed = json.closed;\n\t\t\tthis.curveType = json.curveType;\n\t\t\tthis.tension = json.tension;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tconst v0 = (p2 - p0) * 0.5;\n\t\tconst v1 = (p3 - p1) * 0.5;\n\t\tconst t2 = t * t;\n\t\tconst t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tclass CubicBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tclass CubicBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tclass LineCurve extends Curve {\n\t\tconstructor(v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve';\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst tangent = optionalTarget || new Vector2();\n\t\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tclass LineCurve3 extends Curve {\n\t\tconstructor(v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve3';\n\t\t\tthis.isLineCurve3 = true;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass QuadraticBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tclass QuadraticBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tclass SplineCurve extends Curve {\n\t\tconstructor(points = []) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SplineCurve';\n\t\t\tthis.points = points;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst p = (points.length - 1) * t;\n\t\t\tconst intPoint = Math.floor(p);\n\t\t\tconst weight = p - intPoint;\n\t\t\tconst p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\t\tconst p1 = points[intPoint];\n\t\t\tconst p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\t\tconst p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tclass CurvePath extends Curve {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'CurvePath';\n\t\t\tthis.curves = [];\n\t\t\tthis.autoClose = false; // Automatically closes the path\n\t\t}\n\n\t\tadd(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t}\n\n\t\tclosePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tconst startPoint = this.curves[0].getPoint(0);\n\t\t\tconst endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t} // To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\n\t\tgetPoint(t) {\n\t\t\tconst d = t * this.getLength();\n\t\t\tconst curveLengths = this.getCurveLengths();\n\t\t\tlet i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tconst diff = curveLengths[i] - d;\n\t\t\t\t\tconst curve = this.curves[i];\n\t\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t} // We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\n\t\tgetLength() {\n\t\t\tconst lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t} // cacheLengths must be recalculated.\n\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t} // Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\n\t\tgetCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tconst lengths = [];\n\t\t\tlet sums = 0;\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t}\n\n\t\tgetSpacedPoints(divisions = 40) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tgetPoints(divisions = 12) {\n\t\t\tconst points = [];\n\t\t\tlet last;\n\n\t\t\tfor (let i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tconst curve = curves[i];\n\t\t\t\tconst resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tconst pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (let j = 0; j < pts.length; j++) {\n\t\t\t\t\tconst point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tconst curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tconst curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tconst curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Path extends CurvePath {\n\t\tconstructor(points) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Path';\n\t\t\tthis.currentPoint = new Vector2();\n\n\t\t\tif (points) {\n\t\t\t\tthis.setFromPoints(points);\n\t\t\t}\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (let i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tconst curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tconst curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tconst curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tconst npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tconst curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t}\n\n\t\tarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tconst firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tconst lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Shape extends Path {\n\t\tconstructor(points) {\n\t\t\tsuper(points);\n\t\t\tthis.uuid = MathUtils.generateUUID();\n\t\t\tthis.type = 'Shape';\n\t\t\tthis.holes = [];\n\t\t}\n\n\t\tgetPointsHoles(divisions) {\n\t\t\tconst holesPts = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t} // get points of shape and holes (keypoints based on segments parameter)\n\n\n\t\textractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tconst hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tconst hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tconst hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Light extends Object3D {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Light';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.intensity = intensity;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLight.prototype.isLight = true;\n\n\tclass HemisphereLight extends Light {\n\t\tconstructor(skyColor, groundColor, intensity) {\n\t\t\tsuper(skyColor, intensity);\n\t\t\tthis.type = 'HemisphereLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.groundColor = new Color(groundColor);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tHemisphereLight.prototype.isHemisphereLight = true;\n\n\tconst _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n\tclass LightShadow {\n\t\tconstructor(camera) {\n\t\t\tthis.camera = camera;\n\t\t\tthis.bias = 0;\n\t\t\tthis.normalBias = 0;\n\t\t\tthis.radius = 1;\n\t\t\tthis.mapSize = new Vector2(512, 512);\n\t\t\tthis.map = null;\n\t\t\tthis.mapPass = null;\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.autoUpdate = true;\n\t\t\tthis.needsUpdate = false;\n\t\t\tthis._frustum = new Frustum();\n\t\t\tthis._frameExtents = new Vector2(1, 1);\n\t\t\tthis._viewportCount = 1;\n\t\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t\t}\n\n\t\tgetViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t}\n\n\t\tgetFrustum() {\n\t\t\treturn this._frustum;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst shadowCamera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tshadowCamera.position.copy(_lightPositionWorld$1);\n\n\t\t\t_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\tshadowCamera.lookAt(_lookTarget$1);\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t}\n\n\t\tgetViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t}\n\n\t\tgetFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\n\t}\n\n\tclass SpotLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(50, 1, 0.5, 500));\n\t\t\tthis.focus = 1;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst fov = MathUtils.RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tsuper.updateMatrices(light);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.focus = source.focus;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLightShadow.prototype.isSpotLightShadow = true;\n\n\tclass SpotLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'SpotLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.distance = distance;\n\t\t\tthis.angle = angle;\n\t\t\tthis.penumbra = penumbra;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new SpotLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLight.prototype.isSpotLight = true;\n\n\tconst _projScreenMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget = /*@__PURE__*/new Vector3();\n\n\tclass PointLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(90, 1, 0.5, 500));\n\t\t\tthis._frameExtents = new Vector2(4, 2);\n\t\t\tthis._viewportCount = 6;\n\t\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//\txzXZ\n\t\t\t//\t y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\t\t\t// positive X\n\t\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\t\tnew Vector4(1, 0, 1, 1)];\n\t\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t\t}\n\n\t\tupdateMatrices(light, viewportIndex = 0) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (far !== camera.far) {\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tcamera.position.copy(_lightPositionWorld);\n\n\t\t\t_lookTarget.copy(camera.position);\n\n\t\t\t_lookTarget.add(this._cubeDirections[viewportIndex]);\n\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(_lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix);\n\t\t}\n\n\t}\n\n\tPointLightShadow.prototype.isPointLightShadow = true;\n\n\tclass PointLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'PointLight';\n\t\t\tthis.distance = distance;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new PointLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointLight.prototype.isPointLight = true;\n\n\tclass OrthographicCamera extends Camera {\n\t\tconstructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'OrthographicCamera';\n\t\t\tthis.zoom = 1;\n\t\t\tthis.view = null;\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bottom;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tconst dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tconst cx = (this.right + this.left) / 2;\n\t\t\tconst cy = (this.top + this.bottom) / 2;\n\t\t\tlet left = cx - dx;\n\t\t\tlet right = cx + dx;\n\t\t\tlet top = cy + dy;\n\t\t\tlet bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tconst scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tOrthographicCamera.prototype.isOrthographicCamera = true;\n\n\tclass DirectionalLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t\t}\n\n\t}\n\n\tDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\n\tclass DirectionalLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'DirectionalLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.shadow = new DirectionalLightShadow();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tDirectionalLight.prototype.isDirectionalLight = true;\n\n\tclass AmbientLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'AmbientLight';\n\t\t}\n\n\t}\n\n\tAmbientLight.prototype.isAmbientLight = true;\n\n\tclass RectAreaLight extends Light {\n\t\tconstructor(color, intensity, width = 10, height = 10) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'RectAreaLight';\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tRectAreaLight.prototype.isRectAreaLight = true;\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tclass SphericalHarmonics3 {\n\t\tconstructor() {\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tset(coefficients) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tzero() {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\n\n\t\tgetAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\n\n\t\tgetIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t}\n\n\t\tadd(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledSH(sh, s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(sh, alpha) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcopy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\n\n\t\tstatic getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t}\n\n\t}\n\n\tSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\n\tclass LightProbe extends Light {\n\t\tconstructor(sh = new SphericalHarmonics3(), intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tthis.sh = sh;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLightProbe.prototype.isLightProbe = true;\n\n\tclass MaterialLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t\tthis.textures = {};\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tconst material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.skinning !== undefined) material.skinning = json.skinning;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n\t\t\tif (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (const name in json.uniforms) {\n\t\t\t\t\tconst uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (const key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tlet normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\treturn material;\n\t\t}\n\n\t\tsetTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst LoaderUtils = {\n\t\tdecodeText: function (array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tlet s = '';\n\n\t\t\tfor (let i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t},\n\t\textractUrlBase: function (url) {\n\t\t\tconst index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\t};\n\n\tfunction InstancedBufferGeometry() {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {\n\t\tconstructor: InstancedBufferGeometry,\n\t\tisInstancedBufferGeometry: true,\n\t\tcopy: function (source) {\n\t\t\tBufferGeometry.prototype.copy.call(this, source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function () {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function () {\n\t\t\tconst data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {\n\t\tif (typeof normalized === 'number') {\n\t\t\tmeshPerAttribute = normalized;\n\t\t\tnormalized = false;\n\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t}\n\n\t\tBufferAttribute.call(this, array, itemSize, normalized);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {\n\t\tconstructor: InstancedBufferAttribute,\n\t\tisInstancedBufferAttribute: true,\n\t\tcopy: function (source) {\n\t\t\tBufferAttribute.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function () {\n\t\t\tconst data = BufferAttribute.prototype.toJSON.call(this);\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tclass BufferGeometryLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst interleavedBufferMap = {};\n\t\t\tconst arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tconst interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tconst buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tconst array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tconst ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\t\tconst arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tconst ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tconst index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tconst attributes = json.data.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tlet bufferAttribute;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tif (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n\n\t\t\t\tif (attribute.updateRange !== undefined) {\n\t\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (const key in morphAttributes) {\n\t\t\t\t\tconst attributeArray = morphAttributes[key];\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\t\t\tbufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\t\t\tarray.push(bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (let i = 0, n = groups.length; i !== n; ++i) {\n\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tconst center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\n\t}\n\n\tclass ObjectLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json, onLoad) {\n\t\t\tconst animations = this.parseAnimations(json.animations);\n\t\t\tconst shapes = this.parseShapes(json.shapes);\n\t\t\tconst geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tconst images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tconst textures = this.parseTextures(json.textures, images);\n\t\t\tconst materials = this.parseMaterials(json.materials, textures);\n\t\t\tconst object = this.parseObject(json.object, geometries, materials, animations);\n\t\t\tconst skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tlet hasImages = false;\n\n\t\t\t\tfor (const uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tparseShapes(json) {\n\t\t\tconst shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t\tparseSkeletons(json, object) {\n\t\t\tconst skeletons = {};\n\t\t\tconst bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t}\n\n\t\tparseGeometries(json, shapes) {\n\t\t\tconst geometries = {};\n\t\t\tlet geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tlet geometry;\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t}\n\n\t\tparseMaterials(json, textures) {\n\t\t\tconst cache = {}; // MultiMaterial\n\n\t\t\tconst materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tconst array = [];\n\n\t\t\t\t\t\tfor (let j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tconst material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t}\n\n\t\tparseAnimations(json) {\n\t\t\tconst animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\t\tconst data = json[i];\n\t\t\t\t\tconst clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t\tparseImages(json, onLoad) {\n\t\t\tconst scope = this;\n\t\t\tconst images = {};\n\t\t\tlet loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tconst url = image;\n\t\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tconst manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (let i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tconst image = json[i];\n\t\t\t\t\tconst url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (let j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tconst currentUrl = url[j];\n\t\t\t\t\t\t\tconst deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tconst deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t}\n\n\t\tparseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tconst textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet texture;\n\t\t\t\t\tconst image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t}\n\n\t\tparseObject(data, geometries, materials, animations) {\n\t\t\tlet object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tconst uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tlet geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tconst count = data.count;\n\t\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tconst instanceColor = data.instanceColor;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tif (instanceColor !== undefined) object.instanceColor = new BufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tconst children = data.children;\n\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tconst objectAnimations = data.animations;\n\n\t\t\t\tfor (let i = 0; i < objectAnimations.length; i++) {\n\t\t\t\t\tconst uuid = objectAnimations[i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tconst levels = data.levels;\n\n\t\t\t\tfor (let l = 0; l < levels.length; l++) {\n\t\t\t\t\tconst level = levels[l];\n\t\t\t\t\tconst child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tbindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tconst skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\n\n\t\tsetTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t}\n\n\t}\n\n\tconst TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tconst TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tconst TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tfunction ImageBitmapLoader(manager) {\n\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t}\n\n\t\tif (typeof fetch === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t}\n\n\t\tLoader.call(this, manager);\n\t\tthis.options = {\n\t\t\tpremultiplyAlpha: 'none'\n\t\t};\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageBitmapLoader,\n\t\tisImageBitmapLoader: true,\n\t\tsetOptions: function setOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t},\n\t\tload: function (url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetchOptions.headers = this.requestHeader;\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, Object.assign(scope.options, {\n\t\t\t\t\tcolorSpaceConversion: 'none'\n\t\t\t\t}));\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\t});\n\n\tclass ShapePath {\n\t\tconstructor() {\n\t\t\tthis.type = 'ShapePath';\n\t\t\tthis.color = new Color();\n\t\t\tthis.subPaths = [];\n\t\t\tthis.currentPath = null;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tconst shapes = [];\n\n\t\t\t\tfor (let i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tconst tmpPath = inSubpaths[i];\n\t\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\t\tshapes.push(tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tconst polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tlet inside = false;\n\n\t\t\t\tfor (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tlet edgeLowPt = inPolygon[p];\n\t\t\t\t\tlet edgeHighPt = inPolygon[q];\n\t\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tconst isClockWise = ShapeUtils.isClockWise;\n\t\t\tconst subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tlet solid, tmpPath, tmpShape;\n\t\t\tconst shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tlet holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tconst betterShapeHoles = [];\n\t\t\tconst newShapes = [];\n\t\t\tlet newShapeHoles = [];\n\t\t\tlet mainIdx = 0;\n\t\t\tlet tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (let i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tlet ambiguous = false;\n\t\t\t\tconst toChange = [];\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tconst sho = newShapeHoles[sIdx];\n\n\t\t\t\t\tfor (let hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tconst ho = sho[hIdx];\n\t\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\t\tfor (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet tmpHoles;\n\n\t\t\tfor (let i = 0, il = newShapes.length; i < il; i++) {\n\t\t\t\ttmpShape = newShapes[i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[i];\n\n\t\t\t\tfor (let j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tclass Font {\n\t\tconstructor(data) {\n\t\t\tthis.type = 'Font';\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tgenerateShapes(text, size = 100) {\n\t\t\tconst shapes = [];\n\t\t\tconst paths = createPaths(text, size, this.data);\n\n\t\t\tfor (let p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tfunction createPaths(text, size, data) {\n\t\tconst chars = Array.from(text);\n\t\tconst scale = size / data.resolution;\n\t\tconst line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tconst paths = [];\n\t\tlet offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (let i = 0; i < chars.length; i++) {\n\t\t\tconst char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tconst ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tconst glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst path = new ShapePath();\n\t\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tconst outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (let i = 0, l = outline.length; i < l;) {\n\t\t\t\tconst action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tFont.prototype.isFont = true;\n\n\tclass FontLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tconst font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\treturn new Font(json);\n\t\t}\n\n\t}\n\n\tlet _context;\n\n\tconst AudioContext = {\n\t\tgetContext: function () {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function (value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tclass AudioLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tconst bufferCopy = buffer.slice(0);\n\t\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t}\n\n\tclass HemisphereLightProbe extends LightProbe {\n\t\tconstructor(skyColor, groundColor, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(skyColor);\n\t\t\tconst color2 = new Color().set(groundColor);\n\t\t\tconst sky = new Vector3(color1.r, color1.g, color1.b);\n\t\t\tconst ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\t\tconst c0 = Math.sqrt(Math.PI);\n\t\t\tconst c1 = c0 * Math.sqrt(0.75);\n\t\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t\t}\n\n\t}\n\n\tHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\n\tclass AmbientLightProbe extends LightProbe {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t\t}\n\n\t}\n\n\tAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\n\tconst _eyeRight = new Matrix4();\n\n\tconst _eyeLeft = new Matrix4();\n\n\tclass StereoCamera {\n\t\tconstructor() {\n\t\t\tthis.type = 'StereoCamera';\n\t\t\tthis.aspect = 1;\n\t\t\tthis.eyeSep = 0.064;\n\t\t\tthis.cameraL = new PerspectiveCamera();\n\t\t\tthis.cameraL.layers.enable(1);\n\t\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\t\tthis.cameraR = new PerspectiveCamera();\n\t\t\tthis.cameraR.layers.enable(2);\n\t\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\t\tthis._cache = {\n\t\t\t\tfocus: null,\n\t\t\t\tfov: null,\n\t\t\t\taspect: null,\n\t\t\t\tnear: null,\n\t\t\t\tfar: null,\n\t\t\t\tzoom: null,\n\t\t\t\teyeSep: null\n\t\t\t};\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst cache = this._cache;\n\t\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tconst projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tconst ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tlet xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\n\t}\n\n\tclass Clock {\n\t\tconstructor(autoStart) {\n\t\t\tthis.autoStart = autoStart !== undefined ? autoStart : true;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tstart() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t}\n\n\t\tgetElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t}\n\n\t\tgetDelta() {\n\t\t\tlet diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tconst newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t}\n\n\t}\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tconst _position$1 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tconst _scale$1 = /*@__PURE__*/new Vector3();\n\n\tconst _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tclass AudioListener extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'AudioListener';\n\t\t\tthis.context = AudioContext.getContext();\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(this.context.destination);\n\t\t\tthis.filter = null;\n\t\t\tthis.timeDelta = 0; // private\n\n\t\t\tthis._clock = new Clock();\n\t\t}\n\n\t\tgetInput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tremoveFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.filter;\n\t\t}\n\n\t\tsetFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tconst listener = this.context.listener;\n\t\t\tconst up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n\n\t\t\t_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n\t\t\t\tlistener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass Audio extends Object3D {\n\t\tconstructor(listener) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Audio';\n\t\t\tthis.listener = listener;\n\t\t\tthis.context = listener.context;\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(listener.getInput());\n\t\t\tthis.autoplay = false;\n\t\t\tthis.buffer = null;\n\t\t\tthis.detune = 0;\n\t\t\tthis.loop = false;\n\t\t\tthis.loopStart = 0;\n\t\t\tthis.loopEnd = 0;\n\t\t\tthis.offset = 0;\n\t\t\tthis.duration = undefined;\n\t\t\tthis.playbackRate = 1;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.hasPlaybackControl = true;\n\t\t\tthis.source = null;\n\t\t\tthis.sourceType = 'empty';\n\t\t\tthis._startedAt = 0;\n\t\t\tthis._progress = 0;\n\t\t\tthis._connected = false;\n\t\t\tthis.filters = [];\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tsetNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t}\n\n\t\tplay(delay = 0) {\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tconst source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t}\n\n\t\tpause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilters() {\n\t\t\treturn this.filters;\n\t\t}\n\n\t\tsetFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDetune() {\n\t\t\treturn this.detune;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t}\n\n\t\tsetFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t}\n\n\t\tsetPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t}\n\n\t\tonEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t}\n\n\t\tgetLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t}\n\n\t\tsetLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst _position = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion = /*@__PURE__*/new Quaternion();\n\n\tconst _scale = /*@__PURE__*/new Vector3();\n\n\tconst _orientation = /*@__PURE__*/new Vector3();\n\n\tclass PositionalAudio extends Audio {\n\t\tconstructor(listener) {\n\t\t\tsuper(listener);\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.panningModel = 'HRTF';\n\t\t\tthis.panner.connect(this.gain);\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.panner;\n\t\t}\n\n\t\tgetRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t}\n\n\t\tsetRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t}\n\n\t\tsetRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t}\n\n\t\tsetDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t}\n\n\t\tsetMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion, _scale);\n\n\t\t\t_orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n\n\t\t\tconst panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position.x, _position.y, _position.z);\n\t\t\t\tpanner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass AudioAnalyser {\n\t\tconstructor(audio, fftSize = 2048) {\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tgetFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t}\n\n\t\tgetAverageFrequency() {\n\t\t\tlet value = 0;\n\t\t\tconst data = this.getFrequencyData();\n\n\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t}\n\n\t}\n\n\tclass PropertyMixer {\n\t\tconstructor(binding, typeName, valueSize) {\n\t\t\tthis.binding = binding;\n\t\t\tthis.valueSize = valueSize;\n\t\t\tlet mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t\t//\n\t\t\t// interpolators can use .buffer as their .result\n\t\t\t// the data then goes to 'incoming'\n\t\t\t//\n\t\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t\t// the cumulative result and are compared to detect\n\t\t\t// changes\n\t\t\t//\n\t\t\t// 'orig' stores the original state of the property\n\t\t\t//\n\t\t\t// 'add' is used for additive cumulative results\n\t\t\t//\n\t\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t\t// to store intermediate quaternion multiplication results\n\n\t\t\tswitch (typeName) {\n\t\t\t\tcase 'quaternion':\n\t\t\t\t\tmixFunction = this._slerp;\n\t\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\t\tthis._workIndex = 5;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'bool':\n\t\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmixFunction = this._lerp;\n\t\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t\t}\n\n\t\t\tthis._mixBufferRegion = mixFunction;\n\t\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\t\tthis._setIdentity = setIdentity;\n\t\t\tthis._origIndex = 3;\n\t\t\tthis._addIndex = 4;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t\tthis.useCount = 0;\n\t\t\tthis.referenceCount = 0;\n\t\t} // accumulate data in the 'incoming' region into 'accu<i>'\n\n\n\t\taccumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tconst mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t} // accumulate data in the 'incoming' region into 'add'\n\n\n\t\taccumulateAdditive(weight) {\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t} // apply the state of 'accu<i>' to the binding when accus differ\n\n\n\t\tapply(accuIndex) {\n\t\t\tconst stride = this.valueSize,\n\t\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (let i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} // remember the state of the bound property and copy it to both accus\n\n\n\t\tsaveOriginalState() {\n\t\t\tconst binding = this.binding;\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (let i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t} // apply the state previously taken via 'saveOriginalState' to the binding\n\n\n\t\trestoreOriginalState() {\n\t\t\tconst originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t}\n\n\t\t_setAdditiveIdentityNumeric() {\n\t\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t_setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t}\n\n\t\t_setAdditiveIdentityOther() {\n\t\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (let i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t} // mix functions\n\n\n\t\t_select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t}\n\n\t\t_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t}\n\n\t\t_lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst s = 1 - t;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t\t_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tconst _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tconst _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tconst _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tconst _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tfunction Composite(targetGroup, path, optionalParsedPath) {\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t}\n\n\tObject.assign(Composite.prototype, {\n\t\tgetValue: function (array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t},\n\t\tsetValue: function (array, offset) {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t},\n\t\tbind: function () {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t},\n\t\tunbind: function () {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction PropertyBinding(rootNode, path, parsedPath) {\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\tthis.rootNode = rootNode;\n\t}\n\n\tObject.assign(PropertyBinding, {\n\t\tComposite: Composite,\n\t\tcreate: function (root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function (name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t},\n\t\tparseTrackName: function (trackName) {\n\t\t\tconst matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tconst results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tconst objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t},\n\t\tfindNode: function (root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tconst bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tconst searchNodeSubtree = function (children) {\n\t\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\t\tconst childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tconst subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t});\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// prototype, continued\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\t\tGetterByBindingType: [function getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}, function getValue_array(buffer, offset) {\n\t\t\tconst source = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}, function getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}, function getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t}],\n\t\tSetterByBindingTypeAndVersioning: [[// Direct\n\t\tfunction setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}, function setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// EntireArray\n\t\tfunction setValue_array(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}, function setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// ArrayElement\n\t\tfunction setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// HasToFromArray\n\t\tfunction setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}, function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}]],\n\t\tgetValue: function getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset); // Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\t\t},\n\t\tsetValue: function getValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t},\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\t\t\tlet targetObject = this.node;\n\t\t\tconst parsedPath = this.parsedPath;\n\t\t\tconst objectName = parsedPath.objectName;\n\t\t\tconst propertyName = parsedPath.propertyName;\n\t\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tlet objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (let i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tconst nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tconst nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tlet versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tlet bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t},\n\t\tunbind: function () {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue\n\t});\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tclass AnimationObjectGroup {\n\t\tconstructor() {\n\t\t\tthis.uuid = MathUtils.generateUUID(); // cached objects followed by the active ones\n\n\t\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t\t// note: read by PropertyBinding.Composite\n\n\t\t\tconst indices = {};\n\t\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tindices[arguments[i].uuid] = i;\n\t\t\t}\n\n\t\t\tthis._paths = []; // inside: string\n\n\t\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tobjects: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tget bindingsPerObject() {\n\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tadd() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tlet index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tlet binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t}\n\n\t\tremove() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tconst lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // remove & forget\n\n\n\t\tuncache() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tconst lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex];\n\n\t\t\t\t\t\tif (lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j];\n\t\t\t\t\t\t\tbindingsForPath[index] = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // Internal interface used by befriended PropertyBinding.Composite:\n\n\n\t\tsubscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\t\tlet index = indicesByPath[path];\n\t\t\tconst bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tconst paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tconst object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t}\n\n\t\tunsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst paths = this._paths,\n\t\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\n\tclass AnimationAction {\n\t\tconstructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tconst tracks = clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tconst interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tplay() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t}\n\n\t\treset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t}\n\n\t\tisRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\n\n\t\tisScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t}\n\n\t\tstartAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\n\n\t\tsetEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\n\n\t\tgetEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t}\n\n\t\tfadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t}\n\n\t\tfadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t}\n\n\t\tcrossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcrossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t}\n\n\t\tstopFading() {\n\t\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\n\n\t\tsetEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\n\n\t\tgetEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t}\n\n\t\tsetDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\tsyncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\thalt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t}\n\n\t\twarp(startTimeScale, endTimeScale, duration) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t}\n\n\t\tstopWarping() {\n\t\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\n\n\t\tgetMixer() {\n\t\t\treturn this._mixer;\n\t\t}\n\n\t\tgetClip() {\n\t\t\treturn this._clip;\n\t\t}\n\n\t\tgetRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\n\n\t\t_update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tconst timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tconst clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tconst weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tconst interpolants = this._interpolants;\n\t\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_updateWeight(time) {\n\t\t\tlet weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t}\n\n\t\t_updateTimeScale(time) {\n\t\t\tlet timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t}\n\n\t\t_updateTime(deltaTime) {\n\t\t\tconst duration = this._clip.duration;\n\t\t\tconst loop = this.loop;\n\t\t\tlet time = this.time + deltaTime;\n\t\t\tlet loopCount = this._loopCount;\n\t\t\tconst pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tconst loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t}\n\n\t\t_setEndings(atStart, atEnd, pingPong) {\n\t\t\tconst settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_scheduleFading(duration, weightNow, weightThen) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time;\n\t\t\tlet interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationMixer extends EventDispatcher {\n\t\tconstructor(root) {\n\t\t\tsuper();\n\t\t\tthis._root = root;\n\n\t\t\tthis._initMemoryManager();\n\n\t\t\tthis._accuIndex = 0;\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1.0;\n\t\t}\n\n\t\t_bindAction(action, prototypeAction) {\n\t\t\tconst root = action._localRoot || this._root,\n\t\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tlet bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst track = tracks[i],\n\t\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tlet binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t}\n\n\t\t_activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tconst rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tconst bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t}\n\n\t\t_deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tconst bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t} // Memory manager\n\n\n\t\t_initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t} // Memory management for AnimationAction objects\n\n\n\t\t_isActiveAction(action) {\n\t\t\tconst index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t}\n\n\t\t_addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tlet actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tconst knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t}\n\n\t\t_removeInactiveAction(action) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tconst clipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t}\n\n\t\t_removeInactiveBindingsForAction(action) {\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t}\n\n\t\t_takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t} // Memory management for PropertyMixer objects\n\n\n\t\t_addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindings = this._bindings;\n\t\t\tlet bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t}\n\n\t\t_removeInactiveBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t}\n\n\t\t_lendBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t}\n\n\t\t_takeBackBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t} // Memory management of Interpolants for weight and time scale\n\n\n\t\t_lendControlInterpolant() {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tlet interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t}\n\n\t\t_takeBackControlInterpolant(interpolant) {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t} // return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\n\n\t\tclipAction(clip, optionalRoot, blendMode) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid;\n\t\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tconst actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tlet prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tconst existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tconst newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t} // get an existing action\n\n\n\t\texistingAction(clip, optionalRoot) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // deactivates all previously scheduled actions\n\n\n\t\tstopAllAction() {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (let i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // advance the time and update apply the animation\n\n\n\t\tupdate(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (let i = 0; i !== nActions; ++i) {\n\t\t\t\tconst action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (let i = 0; i !== nBindings; ++i) {\n\t\t\t\tbindings[i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Allows you to seek to a specific time in an animation.\n\n\n\t\tsetTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (let i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t} // return this mixer's root target object\n\n\n\t\tgetRoot() {\n\t\t\treturn this._root;\n\t\t} // free all resources specific to a particular clip\n\n\n\t\tuncacheClip(clip) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tconst action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t} // free all resources specific to a particular root target object\n\n\n\t\tuncacheRoot(root) {\n\t\t\tconst rootUuid = root.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (const clipUuid in actionsByClip) {\n\t\t\t\tconst actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (const trackName in bindingByName) {\n\t\t\t\t\tconst binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t} // remove a targeted clip from the cache\n\n\n\t\tuncacheAction(clip, optionalRoot) {\n\t\t\tconst action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\n\n\tclass Uniform {\n\t\tconstructor(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t}\n\n\t}\n\n\tfunction InstancedInterleavedBuffer(array, stride, meshPerAttribute) {\n\t\tInterleavedBuffer.call(this, array, stride);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {\n\t\tconstructor: InstancedInterleavedBuffer,\n\t\tisInstancedInterleavedBuffer: true,\n\t\tcopy: function (source) {\n\t\t\tInterleavedBuffer.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function (data) {\n\t\t\tconst ib = InterleavedBuffer.prototype.clone.call(this, data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t},\n\t\ttoJSON: function (data) {\n\t\t\tconst json = InterleavedBuffer.prototype.toJSON.call(this, data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\t});\n\n\tfunction GLBufferAttribute(buffer, type, itemSize, elementSize, count) {\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(GLBufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function (value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(GLBufferAttribute.prototype, {\n\t\tisGLBufferAttribute: true,\n\t\tsetBuffer: function (buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t},\n\t\tsetType: function (type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetItemSize: function (itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetCount: function (count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Raycaster(origin, direction, near = 0, far = Infinity) {\n\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tLOD: {},\n\t\t\tPoints: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tSprite: {}\n\t\t};\n\t\tObject.defineProperties(this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tintersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tObject.assign(Raycaster.prototype, {\n\t\tset: function (origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t},\n\t\tsetFromCamera: function (coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t},\n\t\tintersectObject: function (object, recursive = false, intersects = []) {\n\t\t\tintersectObject(object, this, intersects, recursive);\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t},\n\t\tintersectObjects: function (objects, recursive = false, intersects = []) {\n\t\t\tfor (let i = 0, l = objects.length; i < l; i++) {\n\t\t\t\tintersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\t});\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tclass Spherical {\n\t\tconstructor(radius = 1, phi = 0, theta = 0) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\n\n\t\tmakeSafe() {\n\t\t\tconst EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tclass Cylindrical {\n\t\tconstructor(radius = 1, theta = 0, y = 0) {\n\t\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$4 = /*@__PURE__*/new Vector2();\n\n\tclass Box2 {\n\t\tconstructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox2.prototype.isBox2 = true;\n\n\tconst _startP = /*@__PURE__*/new Vector3();\n\n\tconst _startEnd = /*@__PURE__*/new Vector3();\n\n\tclass Line3 {\n\t\tconstructor(start = new Vector3(), end = new Vector3()) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\n\t\tset(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t}\n\n\t\tdelta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t}\n\n\t\tdistanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t}\n\n\t\tdistance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t}\n\n\t\tat(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tclosestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tconst startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tconst startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tlet t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = MathUtils.clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t}\n\n\t\tclosestPointToPoint(point, clampToLine, target) {\n\t\t\tconst t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tfunction ImmediateRenderObject(material) {\n\t\tObject3D.call(this);\n\t\tthis.material = material;\n\n\t\tthis.render = function ()\n\t\t/* renderCallback */\n\t\t{};\n\n\t\tthis.hasPositions = false;\n\t\tthis.hasNormals = false;\n\t\tthis.hasColors = false;\n\t\tthis.hasUvs = false;\n\t\tthis.positionArray = null;\n\t\tthis.normalArray = null;\n\t\tthis.colorArray = null;\n\t\tthis.uvArray = null;\n\t\tthis.count = 0;\n\t}\n\n\tImmediateRenderObject.prototype = Object.create(Object3D.prototype);\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tconst _vector$3 = /*@__PURE__*/new Vector3();\n\n\tclass SpotLightHelper extends Object3D {\n\t\tconstructor(light, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tconst p1 = i / l * Math.PI * 2;\n\t\t\t\tconst p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.cone = new LineSegments(geometry, material);\n\t\t\tthis.add(this.cone);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tconst coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _vector$2 = /*@__PURE__*/new Vector3();\n\n\tconst _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tclass SkeletonHelper extends LineSegments {\n\t\tconstructor(object) {\n\t\t\tconst bones = getBoneList(object);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst color1 = new Color(0, 0, 1);\n\t\t\tconst color2 = new Color(0, 1, 0);\n\n\t\t\tfor (let i = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkeletonHelper';\n\t\t\tthis.isSkeletonHelper = true;\n\t\t\tthis.root = object;\n\t\t\tthis.bones = bones;\n\t\t\tthis.matrix = object.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst bones = this.bones;\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (let i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tfunction getBoneList(object) {\n\t\tconst boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (let i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tclass PointLightHelper extends Mesh {\n\t\tconstructor(light, sphereSize, color) {\n\t\t\tconst geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tconst material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.color = color;\n\t\t\tthis.type = 'PointLightHelper';\n\t\t\tthis.matrix = this.light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t}\n\n\t}\n\n\tconst _vector$1 = /*@__PURE__*/new Vector3();\n\n\tconst _color1 = /*@__PURE__*/new Color();\n\n\tconst _color2 = /*@__PURE__*/new Color();\n\n\tclass HemisphereLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\tthis.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (this.color === undefined) this.material.vertexColors = true;\n\t\t\tconst position = geometry.getAttribute('position');\n\t\t\tconst colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\t\tthis.add(new Mesh(geometry, this.material));\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tconst colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tconst color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t}\n\n\t}\n\n\tclass GridHelper extends LineSegments {\n\t\tconstructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst center = divisions / 2;\n\t\t\tconst step = size / divisions;\n\t\t\tconst halfSize = size / 2;\n\t\t\tconst vertices = [],\n\t\t\t\t\t\tcolors = [];\n\n\t\t\tfor (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tconst color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'GridHelper';\n\t\t}\n\n\t}\n\n\tclass PolarGridHelper extends LineSegments {\n\t\tconstructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst vertices = [];\n\t\t\tconst colors = []; // create the radials\n\n\t\t\tfor (let i = 0; i <= radials; i++) {\n\t\t\t\tconst v = i / radials * (Math.PI * 2);\n\t\t\t\tconst x = Math.sin(v) * radius;\n\t\t\t\tconst z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (let i = 0; i <= circles; i++) {\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tconst r = radius - radius / circles * i;\n\n\t\t\t\tfor (let j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tlet v = j / divisions * (Math.PI * 2);\n\t\t\t\t\tlet x = Math.sin(v) * r;\n\t\t\t\t\tlet z = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b); // second vertex\n\n\t\t\t\t\tv = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\tx = Math.sin(v) * r;\n\t\t\t\t\tz = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'PolarGridHelper';\n\t\t}\n\n\t}\n\n\tconst _v1 = /*@__PURE__*/new Vector3();\n\n\tconst _v2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3 = /*@__PURE__*/new Vector3();\n\n\tclass DirectionalLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tlet geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.lightPlane = new Line(geometry, material);\n\t\t\tthis.add(this.lightPlane);\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\tthis.targetLine = new Line(geometry, material);\n\t\t\tthis.add(this.targetLine);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\t_v1.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3.subVectors(_v2, _v1);\n\n\t\t\tthis.lightPlane.lookAt(_v2);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2);\n\t\t\tthis.targetLine.scale.z = _v3.length();\n\t\t}\n\n\t}\n\n\tconst _vector = /*@__PURE__*/new Vector3();\n\n\tconst _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tclass CameraHelper extends LineSegments {\n\t\tconstructor(camera) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst pointMap = {}; // colors\n\n\t\t\tconst colorFrustum = new Color(0xffaa00);\n\t\t\tconst colorCone = new Color(0xff0000);\n\t\t\tconst colorUp = new Color(0x00aaff);\n\t\t\tconst colorTarget = new Color(0xffffff);\n\t\t\tconst colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'CameraHelper';\n\t\t\tthis.camera = camera;\n\t\t\tif (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n\t\t\tthis.matrix = camera.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.pointMap = pointMap;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst pointMap = this.pointMap;\n\t\t\tconst w = 1,\n\t\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t}\n\n\t}\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector.set(x, y, z).unproject(camera);\n\n\t\tconst points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst _box = /*@__PURE__*/new Box3();\n\n\tclass BoxHelper extends LineSegments {\n\t\tconstructor(object, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = new Float32Array(8 * 3);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.object = object;\n\t\t\tthis.type = 'BoxHelper';\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box.isEmpty()) return;\n\t\t\tconst min = _box.min;\n\t\t\tconst max = _box.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tconst position = this.geometry.attributes.position;\n\t\t\tconst array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Box3Helper extends LineSegments {\n\t\tconstructor(box, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.box = box;\n\t\t\tthis.type = 'Box3Helper';\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tclass PlaneHelper extends Line {\n\t\tconstructor(plane, size = 1, hex = 0xffff00) {\n\t\t\tconst color = hex;\n\t\t\tconst positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.type = 'PlaneHelper';\n\t\t\tthis.plane = plane;\n\t\t\tthis.size = size;\n\t\t\tconst positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\t\t\tthis.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tlet scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tconst _axis = /*@__PURE__*/new Vector3();\n\n\tlet _lineGeometry, _coneGeometry;\n\n\tclass ArrowHelper extends Object3D {\n\t\t// dir is assumed to be normalized\n\t\tconstructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ArrowHelper';\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\tthis.position.copy(origin);\n\t\t\tthis.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add(this.line);\n\t\t\tthis.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add(this.cone);\n\t\t\tthis.setDirection(dir);\n\t\t\tthis.setLength(length, headLength, headWidth);\n\t\t}\n\n\t\tsetDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tconst radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t}\n\n\t\tsetLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t}\n\n\t\tsetColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AxesHelper extends LineSegments {\n\t\tconstructor(size = 1) {\n\t\t\tconst vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tconst colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'AxesHelper';\n\t\t}\n\n\t}\n\n\tconst _floatView = new Float32Array(1);\n\n\tconst _int32View = new Int32Array(_floatView.buffer);\n\n\tconst DataUtils = {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\ttoHalfFloat: function (val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tconst x = _int32View[0];\n\t\t\tlet bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tlet m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tconst e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\t};\n\n\tconst LOD_MIN = 4;\n\tconst LOD_MAX = 8;\n\tconst SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tconst EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tconst MAX_SAMPLES = 20;\n\tconst ENCODINGS = {\n\t\t[LinearEncoding]: 0,\n\t\t[sRGBEncoding]: 1,\n\t\t[RGBEEncoding]: 2,\n\t\t[RGBM7Encoding]: 3,\n\t\t[RGBM16Encoding]: 4,\n\t\t[RGBDEncoding]: 5,\n\t\t[GammaEncoding]: 6\n\t};\n\tconst backgroundMaterial = new MeshBasicMaterial({\n\t\tside: BackSide,\n\t\tdepthWrite: false,\n\t\tdepthTest: false\n\t});\n\tconst backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\n\tconst _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tconst {\n\t\t_lodPlanes,\n\t\t_sizeLods,\n\t\t_sigmas\n\t} = /*@__PURE__*/_createPlanes();\n\n\tconst _clearColor = /*@__PURE__*/new Color();\n\n\tlet _oldTarget = null; // Golden Ratio\n\n\tconst PHI = (1 + Math.sqrt(5)) / 2;\n\tconst INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tconst _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t *\n\t * Paper: Fast, Accurate Image-Based Lighting\n\t * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n\t*/\n\n\tfunction convertLinearToRGBE(color) {\n\t\tconst maxComponent = Math.max(color.r, color.g, color.b);\n\t\tconst fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\tcolor.multiplyScalar(Math.pow(2.0, -fExp));\n\t\tconst alpha = (fExp + 128.0) / 255.0;\n\t\treturn alpha;\n\t}\n\n\tclass PMREMGenerator {\n\t\tconstructor(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tfromScene(scene, sigma = 0, near = 0.1, far = 100) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\n\n\t\tdispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (let i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\n\n\t\t_cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t}\n\n\t\t_fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tconst params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tconst cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_compileMaterial(material) {\n\t\t\tconst tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t}\n\n\t\t_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tconst fov = 90;\n\t\t\tconst aspect = 1;\n\t\t\tconst cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tconst upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tconst forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst originalAutoClear = renderer.autoClear;\n\t\t\tconst outputEncoding = renderer.outputEncoding;\n\t\t\tconst toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tlet useSolidColor = false;\n\t\t\tconst background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background).convertSRGBToLinear();\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tconst alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();\n\t\t\t\tconst alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t}\n\n\t\t_textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tconst mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tconst uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t}\n\n\t\t_applyPMREM(cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (let i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tconst sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tconst poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\n\n\t\t_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t}\n\n\t\t_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tconst STANDARD_DEVIATIONS = 3;\n\t\t\tconst blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tconst blurUniforms = blurMaterial.uniforms;\n\t\t\tconst pixels = _sizeLods[lodIn] - 1;\n\t\t\tconst radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tconst samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n\t\t\t}\n\n\t\t\tconst weights = [];\n\t\t\tlet sum = 0;\n\n\t\t\tfor (let i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tconst x = i / sigmaPixels;\n\t\t\t\tconst weight = Math.exp(-x * x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < weights.length; i++) {\n\t\t\t\tweights[i] = weights[i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tconst outputSize = _sizeLods[lodOut];\n\t\t\tconst x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tconst y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t}\n\n\t}\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tconst _lodPlanes = [];\n\t\tconst _sizeLods = [];\n\t\tconst _sigmas = [];\n\t\tlet lod = LOD_MAX;\n\n\t\tfor (let i = 0; i < TOTAL_LODS; i++) {\n\t\t\tconst sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tlet sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tconst texelSize = 1.0 / (sizeLod - 1);\n\t\t\tconst min = -texelSize / 2;\n\t\t\tconst max = 1 + texelSize / 2;\n\t\t\tconst uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tconst cubeFaces = 6;\n\t\t\tconst vertices = 6;\n\t\t\tconst positionSize = 3;\n\t\t\tconst uvSize = 2;\n\t\t\tconst faceIndexSize = 1;\n\t\t\tconst position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tconst uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tconst faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (let face = 0; face < cubeFaces; face++) {\n\t\t\t\tconst x = face % 3 * 2 / 3 - 1;\n\t\t\t\tconst y = face > 2 ? 0 : -1;\n\t\t\t\tconst coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tconst fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tconst planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes,\n\t\t\t_sizeLods,\n\t\t\t_sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tconst cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tconst weights = new Float32Array(maxSamples);\n\t\tconst poleAxis = new Vector3(0, 1, 0);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tconst texelSize = new Vector2(1, 1);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${_getEncodings()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tconst LineStrip = 0;\n\tconst LinePieces = 1;\n\tconst NoColors = 0;\n\tconst FaceColors = 1;\n\tconst VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials = []) {\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tPath.prototype.fromPoints = function (points) {\n\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\treturn this.setFromPoints(points);\n\t}; //\n\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tLoader.prototype.extractUrlBase = function (url) {\n\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\treturn LoaderUtils.extractUrlBase(url);\n\t};\n\n\tLoader.Handlers = {\n\t\tadd: function ()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function ()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tBox2.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox2.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox2.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox2.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tBox3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox3.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox3.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox3.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t};\n\n\tBox3.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tSphere.prototype.empty = function () {\n\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t}; //\n\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t}; //\n\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t}; //\n\n\n\tMathUtils.random16 = function () {\n\t\tconsole.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');\n\t\treturn Math.random();\n\t};\n\n\tMathUtils.nearestPowerOfTwo = function (value) {\n\t\tconsole.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');\n\t\treturn MathUtils.floorPowerOfTwo(value);\n\t};\n\n\tMathUtils.nextPowerOfTwo = function (value) {\n\t\tconsole.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');\n\t\treturn MathUtils.ceilPowerOfTwo(value);\n\t}; //\n\n\n\tMatrix3.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix3.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\treturn vector.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\treturn attribute.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tMatrix4.prototype.extractPosition = function (m) {\n\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\treturn this.copyPosition(m);\n\t};\n\n\tMatrix4.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix4.prototype.getPosition = function () {\n\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t};\n\n\tMatrix4.prototype.setRotationFromQuaternion = function (q) {\n\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\treturn this.makeRotationFromQuaternion(q);\n\t};\n\n\tMatrix4.prototype.multiplyToArray = function () {\n\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t};\n\n\tMatrix4.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector4 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateAxis = function (v) {\n\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\tv.transformDirection(this);\n\t};\n\n\tMatrix4.prototype.crossVector = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.translate = function () {\n\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateX = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateY = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateZ = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateByAxis = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t};\n\n\tMatrix4.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\treturn attribute.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\n\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t};\n\n\tMatrix4.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t}; //\n\n\n\tQuaternion.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\treturn vector.applyQuaternion(this);\n\t};\n\n\tQuaternion.prototype.inverse = function () {\n\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\treturn this.invert();\n\t}; //\n\n\n\tRay.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tRay.prototype.isIntersectionPlane = function (plane) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\treturn this.intersectsPlane(plane);\n\t};\n\n\tRay.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t}; //\n\n\n\tTriangle.prototype.area = function () {\n\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\treturn this.getArea();\n\t};\n\n\tTriangle.prototype.barycoordFromPoint = function (point, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn this.getBarycoord(point, target);\n\t};\n\n\tTriangle.prototype.midpoint = function (target) {\n\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\treturn this.getMidpoint(target);\n\t};\n\n\tTriangle.prototypenormal = function (target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn this.getNormal(target);\n\t};\n\n\tTriangle.prototype.plane = function (target) {\n\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\treturn this.getPlane(target);\n\t};\n\n\tTriangle.barycoordFromPoint = function (point, a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t};\n\n\tTriangle.normal = function (a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn Triangle.getNormal(a, b, c, target);\n\t}; //\n\n\n\tShape.prototype.extractAllPoints = function (divisions) {\n\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\treturn this.extractPoints(divisions);\n\t};\n\n\tShape.prototype.extrude = function (options) {\n\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\treturn new ExtrudeGeometry(this, options);\n\t};\n\n\tShape.prototype.makeGeometry = function (options) {\n\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\treturn new ShapeGeometry(this, options);\n\t}; //\n\n\n\tVector2.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector2.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector2.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector3.prototype.setEulerFromRotationMatrix = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t};\n\n\tVector3.prototype.setEulerFromQuaternion = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t};\n\n\tVector3.prototype.getPositionFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\treturn this.setFromMatrixPosition(m);\n\t};\n\n\tVector3.prototype.getScaleFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\treturn this.setFromMatrixScale(m);\n\t};\n\n\tVector3.prototype.getColumnFromMatrix = function (index, matrix) {\n\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\treturn this.setFromMatrixColumn(matrix, index);\n\t};\n\n\tVector3.prototype.applyProjection = function (m) {\n\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\treturn this.applyMatrix4(m);\n\t};\n\n\tVector3.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector3.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector3.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector4.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector4.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tObject3D.prototype.getChildByName = function (name) {\n\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\treturn this.getObjectByName(name);\n\t};\n\n\tObject3D.prototype.renderDepth = function () {\n\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t};\n\n\tObject3D.prototype.translate = function (distance, axis) {\n\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\treturn this.translateOnAxis(axis, distance);\n\t};\n\n\tObject3D.prototype.getWorldRotation = function () {\n\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t};\n\n\tObject3D.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\n\tMesh.prototype.setDrawMode = function () {\n\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t};\n\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t};\n\n\tObject.defineProperty(Curve.prototype, '__arcLengthDivisions', {\n\t\tget: function () {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\treturn this.arcLengthDivisions;\n\t\t},\n\t\tset: function (value) {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\tthis.arcLengthDivisions = value;\n\t\t}\n\t}); //\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\n\tBufferAttribute.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tBufferAttribute.prototype.copyIndicesArray = function ()\n\t/* indices */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t}, BufferAttribute.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\tBufferGeometry.prototype.addIndex = function (index) {\n\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\tthis.setIndex(index);\n\t};\n\n\tBufferGeometry.prototype.addAttribute = function (name, attribute) {\n\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t}\n\n\t\tif (name === 'index') {\n\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\tthis.setIndex(attribute);\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.setAttribute(name, attribute);\n\t};\n\n\tBufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\n\t\tif (indexOffset !== undefined) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t}\n\n\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\tthis.addGroup(start, count);\n\t};\n\n\tBufferGeometry.prototype.clearDrawCalls = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\tthis.clearGroups();\n\t};\n\n\tBufferGeometry.prototype.computeOffsets = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t};\n\n\tBufferGeometry.prototype.removeAttribute = function (name) {\n\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\treturn this.deleteAttribute(name);\n\t};\n\n\tBufferGeometry.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InstancedBufferGeometry.prototype, {\n\t\tmaxInstancedCount: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\treturn this.instanceCount;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\tthis.instanceCount = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(Raycaster.prototype, {\n\t\tlinePrecision: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\treturn this.params.Line.threshold;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\tthis.params.Line.threshold = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InterleavedBuffer.prototype, {\n\t\tdynamic: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(value);\n\t\t\t}\n\t\t}\n\t});\n\n\tInterleavedBuffer.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tInterleavedBuffer.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\n\tExtrudeGeometry.prototype.getArrays = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShapeList = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShape = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t}; //\n\n\n\tScene.prototype.dispose = function () {\n\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t}; //\n\n\n\tUniform.prototype.onUpdate = function () {\n\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\treturn this;\n\t}; //\n\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhysicalMaterial.prototype, {\n\t\ttransparency: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\treturn this.transmission;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\tthis.transmission = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tWebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\n\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\tthis.setRenderTarget(renderTarget);\n\t\tthis.clear(color, depth, stencil);\n\t};\n\n\tWebGLRenderer.prototype.animate = function (callback) {\n\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\tthis.setAnimationLoop(callback);\n\t};\n\n\tWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\treturn this.getRenderTarget();\n\t};\n\n\tWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\treturn this.capabilities.getMaxAnisotropy();\n\t};\n\n\tWebGLRenderer.prototype.getPrecision = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\treturn this.capabilities.precision;\n\t};\n\n\tWebGLRenderer.prototype.resetGLState = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\treturn this.state.reset();\n\t};\n\n\tWebGLRenderer.prototype.supportsFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_half_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\treturn this.extensions.get('OES_standard_derivatives');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t};\n\n\tWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\treturn this.extensions.get('EXT_blend_minmax');\n\t};\n\n\tWebGLRenderer.prototype.supportsVertexTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\treturn this.capabilities.vertexTextures;\n\t};\n\n\tWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t};\n\n\tWebGLRenderer.prototype.enableScissorTest = function (boolean) {\n\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\tthis.setScissorTest(boolean);\n\t};\n\n\tWebGLRenderer.prototype.initMaterial = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPrePlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPostPlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.updateShadowMap = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setFaceCulling = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.allocTextureUnit = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture2D = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTextureCube = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\treturn this.getActiveMipmapLevel();\n\t};\n\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tAudio.prototype.load = function (file) {\n\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\tconst scope = this;\n\t\tconst audioLoader = new AudioLoader();\n\t\taudioLoader.load(file, function (buffer) {\n\t\t\tscope.setBuffer(buffer);\n\t\t});\n\t\treturn this;\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tconst loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tconst loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tconst SceneUtils = {\n\t\tcreateMultiMaterialObject: function ()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function ()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function ()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SplineCurve = SplineCurve;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t// the target DOM element for key events\n\tthis._domElementKeyEvents = null;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.listenToKeyEvents = function ( domElement ) {\n\n\t\tdomElement.addEventListener( 'keydown', onKeyDown );\n\t\tthis._domElementKeyEvents = domElement;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().invert();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\tvar twoPI = 2 * Math.PI;\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\n\t\t\tvar min = scope.minAzimuthAngle;\n\t\t\tvar max = scope.maxAzimuthAngle;\n\n\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\tif ( min <= max ) {\n\n\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n\n\t\tif ( scope._domElementKeyEvents !== null ) {\n\n\t\t\tscope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n\n\t\t}\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.code ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onPointerDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseDown( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseMove( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerUp( event ) {\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseUp( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase THREE.MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointermove', onPointerMove );\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointerup', onPointerUp );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase THREE.TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n\tscope.domElement.addEventListener( 'pointerdown', onPointerDown );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nTHREE.MapControls = function ( object, domElement ) {\n\n\tTHREE.OrbitControls.call( this, object, domElement );\n\n\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\tthis.mouseButtons.LEFT = THREE.MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\n\tthis.touches.ONE = THREE.TOUCH.PAN;\n\tthis.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n};\n\nTHREE.MapControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.MapControls.prototype.constructor = THREE.MapControls;\n","// Ensure ThreeJS is in global scope for the 'examples/'\nglobal.THREE = require('three');\n\n// Include any additional ThreeJS examples below\nrequire('three/examples/js/controls/OrbitControls');\n\nconst canvasSketch = require('canvas-sketch');\n\nconst settings = {\n  // Make the loop animated\n  animate: true,\n  // Get a WebGL canvas rather than 2D\n  context: 'webgl',\n};\n\nconst sketch = ({ context }) => {\n  // Create a renderer\n  const renderer = new THREE.WebGLRenderer({\n    canvas: context.canvas,\n  });\n\n  // WebGL background color\n  renderer.setClearColor('#000', 1);\n\n  // Setup a camera\n  const camera = new THREE.PerspectiveCamera(50, 1, 0.01, 100);\n  camera.position.set(0, 0, -4);\n  camera.lookAt(new THREE.Vector3());\n\n  // Setup camera controller\n  const controls = new THREE.OrbitControls(camera, context.canvas);\n\n  // Setup your scene\n  const scene = new THREE.Scene();\n\n  // Setup a geometry\n  const geometry = new THREE.SphereGeometry(1, 32, 16);\n\n  const loader = new THREE.TextureLoader();\n  // load the earth map texture\n  const earthTexture = loader.load('earth.jpg');\n  const moonTexture = loader.load('moon.jpg');\n\n  // Setup a material\n  const earthMaterial = new THREE.MeshStandardMaterial({\n    map: earthTexture,\n  });\n\n  // Setup a mesh with geometry + material\n  const earthMesh = new THREE.Mesh(geometry, earthMaterial);\n  scene.add(earthMesh);\n\n  const moonGroup = new THREE.Group();\n  const moonMaterial = new THREE.MeshStandardMaterial({\n    map: moonTexture,\n  });\n\n  const moonMesh = new THREE.Mesh(geometry, moonMaterial);\n  moonMesh.position.set(1, 0, 2);\n  moonMesh.scale.setScalar(0.25);\n  moonGroup.add(moonMesh);\n\n  scene.add(moonGroup);\n\n  const light = new THREE.PointLight('white', 1);\n  light.position.set(5, 0, 5);\n  scene.add(light);\n\n  // use the helpers for light, grids and axes\n  scene.add(new THREE.GridHelper(5, 25));\n  scene.add(new THREE.PointLightHelper(light, 0.25));\n  scene.add(new THREE.AxesHelper(5));\n  // draw each frame\n  return {\n    // Handle resize events here\n    resize({ pixelRatio, viewportWidth, viewportHeight }) {\n      renderer.setPixelRatio(pixelRatio);\n      renderer.setSize(viewportWidth, viewportHeight, false);\n      camera.aspect = viewportWidth / viewportHeight;\n      camera.updateProjectionMatrix();\n    },\n    // Update & render your scene here\n    render({ time }) {\n      earthMesh.rotation.y = time * 0.2;\n      moonMesh.rotation.y = time * 0.14;\n      moonGroup.rotation.y = time * 0.4;\n      controls.update();\n      renderer.render(scene, camera);\n    },\n    // Dispose of events & renderer for cleaner hot-reloading\n    unload() {\n      controls.dispose();\n      renderer.dispose();\n    },\n  };\n};\n\ncanvasSketch(sketch, settings);\n","\nglobal.CANVAS_SKETCH_DEFAULT_STORAGE_KEY = window.location.href;\n"]}